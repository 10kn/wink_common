// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: event/v1/event.proto

package eventv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gisucoinc/ebisuiru-fc-common/server/event/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EventServiceName is the fully-qualified name of the EventService service.
	EventServiceName = "event.v1.EventService"
)

// EventServiceClient is a client for the event.v1.EventService service.
type EventServiceClient interface {
	CreateEvent(context.Context, *connect_go.Request[v1.CreateEventRequest]) (*connect_go.Response[v1.CreateEventResponse], error)
	ListEvent(context.Context, *connect_go.Request[v1.ListEventRequest]) (*connect_go.Response[v1.ListEventResponse], error)
	UseEventCode(context.Context, *connect_go.Request[v1.UseEventCodeRequest]) (*connect_go.Response[v1.UseEventCodeResponse], error)
	ListUserForEvent(context.Context, *connect_go.Request[v1.ListUserForEventRequest]) (*connect_go.Response[v1.ListUserForEventResponse], error)
	DetailEvent(context.Context, *connect_go.Request[v1.DetailEventRequest]) (*connect_go.Response[v1.DetailEventResponse], error)
	ListEventForUser(context.Context, *connect_go.Request[v1.ListEventForUserRequest]) (*connect_go.Response[v1.ListEventForUserResponse], error)
}

// NewEventServiceClient constructs a client for the event.v1.EventService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventServiceClient{
		createEvent: connect_go.NewClient[v1.CreateEventRequest, v1.CreateEventResponse](
			httpClient,
			baseURL+"/event.v1.EventService/CreateEvent",
			opts...,
		),
		listEvent: connect_go.NewClient[v1.ListEventRequest, v1.ListEventResponse](
			httpClient,
			baseURL+"/event.v1.EventService/ListEvent",
			opts...,
		),
		useEventCode: connect_go.NewClient[v1.UseEventCodeRequest, v1.UseEventCodeResponse](
			httpClient,
			baseURL+"/event.v1.EventService/UseEventCode",
			opts...,
		),
		listUserForEvent: connect_go.NewClient[v1.ListUserForEventRequest, v1.ListUserForEventResponse](
			httpClient,
			baseURL+"/event.v1.EventService/ListUserForEvent",
			opts...,
		),
		detailEvent: connect_go.NewClient[v1.DetailEventRequest, v1.DetailEventResponse](
			httpClient,
			baseURL+"/event.v1.EventService/DetailEvent",
			opts...,
		),
		listEventForUser: connect_go.NewClient[v1.ListEventForUserRequest, v1.ListEventForUserResponse](
			httpClient,
			baseURL+"/event.v1.EventService/ListEventForUser",
			opts...,
		),
	}
}

// eventServiceClient implements EventServiceClient.
type eventServiceClient struct {
	createEvent      *connect_go.Client[v1.CreateEventRequest, v1.CreateEventResponse]
	listEvent        *connect_go.Client[v1.ListEventRequest, v1.ListEventResponse]
	useEventCode     *connect_go.Client[v1.UseEventCodeRequest, v1.UseEventCodeResponse]
	listUserForEvent *connect_go.Client[v1.ListUserForEventRequest, v1.ListUserForEventResponse]
	detailEvent      *connect_go.Client[v1.DetailEventRequest, v1.DetailEventResponse]
	listEventForUser *connect_go.Client[v1.ListEventForUserRequest, v1.ListEventForUserResponse]
}

// CreateEvent calls event.v1.EventService.CreateEvent.
func (c *eventServiceClient) CreateEvent(ctx context.Context, req *connect_go.Request[v1.CreateEventRequest]) (*connect_go.Response[v1.CreateEventResponse], error) {
	return c.createEvent.CallUnary(ctx, req)
}

// ListEvent calls event.v1.EventService.ListEvent.
func (c *eventServiceClient) ListEvent(ctx context.Context, req *connect_go.Request[v1.ListEventRequest]) (*connect_go.Response[v1.ListEventResponse], error) {
	return c.listEvent.CallUnary(ctx, req)
}

// UseEventCode calls event.v1.EventService.UseEventCode.
func (c *eventServiceClient) UseEventCode(ctx context.Context, req *connect_go.Request[v1.UseEventCodeRequest]) (*connect_go.Response[v1.UseEventCodeResponse], error) {
	return c.useEventCode.CallUnary(ctx, req)
}

// ListUserForEvent calls event.v1.EventService.ListUserForEvent.
func (c *eventServiceClient) ListUserForEvent(ctx context.Context, req *connect_go.Request[v1.ListUserForEventRequest]) (*connect_go.Response[v1.ListUserForEventResponse], error) {
	return c.listUserForEvent.CallUnary(ctx, req)
}

// DetailEvent calls event.v1.EventService.DetailEvent.
func (c *eventServiceClient) DetailEvent(ctx context.Context, req *connect_go.Request[v1.DetailEventRequest]) (*connect_go.Response[v1.DetailEventResponse], error) {
	return c.detailEvent.CallUnary(ctx, req)
}

// ListEventForUser calls event.v1.EventService.ListEventForUser.
func (c *eventServiceClient) ListEventForUser(ctx context.Context, req *connect_go.Request[v1.ListEventForUserRequest]) (*connect_go.Response[v1.ListEventForUserResponse], error) {
	return c.listEventForUser.CallUnary(ctx, req)
}

// EventServiceHandler is an implementation of the event.v1.EventService service.
type EventServiceHandler interface {
	CreateEvent(context.Context, *connect_go.Request[v1.CreateEventRequest]) (*connect_go.Response[v1.CreateEventResponse], error)
	ListEvent(context.Context, *connect_go.Request[v1.ListEventRequest]) (*connect_go.Response[v1.ListEventResponse], error)
	UseEventCode(context.Context, *connect_go.Request[v1.UseEventCodeRequest]) (*connect_go.Response[v1.UseEventCodeResponse], error)
	ListUserForEvent(context.Context, *connect_go.Request[v1.ListUserForEventRequest]) (*connect_go.Response[v1.ListUserForEventResponse], error)
	DetailEvent(context.Context, *connect_go.Request[v1.DetailEventRequest]) (*connect_go.Response[v1.DetailEventResponse], error)
	ListEventForUser(context.Context, *connect_go.Request[v1.ListEventForUserRequest]) (*connect_go.Response[v1.ListEventForUserResponse], error)
}

// NewEventServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventServiceHandler(svc EventServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/event.v1.EventService/CreateEvent", connect_go.NewUnaryHandler(
		"/event.v1.EventService/CreateEvent",
		svc.CreateEvent,
		opts...,
	))
	mux.Handle("/event.v1.EventService/ListEvent", connect_go.NewUnaryHandler(
		"/event.v1.EventService/ListEvent",
		svc.ListEvent,
		opts...,
	))
	mux.Handle("/event.v1.EventService/UseEventCode", connect_go.NewUnaryHandler(
		"/event.v1.EventService/UseEventCode",
		svc.UseEventCode,
		opts...,
	))
	mux.Handle("/event.v1.EventService/ListUserForEvent", connect_go.NewUnaryHandler(
		"/event.v1.EventService/ListUserForEvent",
		svc.ListUserForEvent,
		opts...,
	))
	mux.Handle("/event.v1.EventService/DetailEvent", connect_go.NewUnaryHandler(
		"/event.v1.EventService/DetailEvent",
		svc.DetailEvent,
		opts...,
	))
	mux.Handle("/event.v1.EventService/ListEventForUser", connect_go.NewUnaryHandler(
		"/event.v1.EventService/ListEventForUser",
		svc.ListEventForUser,
		opts...,
	))
	return "/event.v1.EventService/", mux
}

// UnimplementedEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventServiceHandler struct{}

func (UnimplementedEventServiceHandler) CreateEvent(context.Context, *connect_go.Request[v1.CreateEventRequest]) (*connect_go.Response[v1.CreateEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.EventService.CreateEvent is not implemented"))
}

func (UnimplementedEventServiceHandler) ListEvent(context.Context, *connect_go.Request[v1.ListEventRequest]) (*connect_go.Response[v1.ListEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.EventService.ListEvent is not implemented"))
}

func (UnimplementedEventServiceHandler) UseEventCode(context.Context, *connect_go.Request[v1.UseEventCodeRequest]) (*connect_go.Response[v1.UseEventCodeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.EventService.UseEventCode is not implemented"))
}

func (UnimplementedEventServiceHandler) ListUserForEvent(context.Context, *connect_go.Request[v1.ListUserForEventRequest]) (*connect_go.Response[v1.ListUserForEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.EventService.ListUserForEvent is not implemented"))
}

func (UnimplementedEventServiceHandler) DetailEvent(context.Context, *connect_go.Request[v1.DetailEventRequest]) (*connect_go.Response[v1.DetailEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.EventService.DetailEvent is not implemented"))
}

func (UnimplementedEventServiceHandler) ListEventForUser(context.Context, *connect_go.Request[v1.ListEventForUserRequest]) (*connect_go.Response[v1.ListEventForUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.EventService.ListEventForUser is not implemented"))
}
