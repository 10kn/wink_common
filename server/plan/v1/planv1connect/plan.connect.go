// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: plan/v1/plan.proto

package planv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/10kn/wink_common/server/plan/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PlanServiceName is the fully-qualified name of the PlanService service.
	PlanServiceName = "plan.v1.PlanService"
)

// PlanServiceClient is a client for the plan.v1.PlanService service.
type PlanServiceClient interface {
	GetAdminPlanCategories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetAdminPlanCategoriesResponse], error)
	CreateAdminPlanCategory(context.Context, *connect_go.Request[v1.CreateAdminPlanCategoryRequest]) (*connect_go.Response[v1.CreateAdminPlanCategoryResponse], error)
	UpdateAdminPlanCategory(context.Context, *connect_go.Request[v1.UpdateAdminPlanCategoryRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteAdminPlanCategories(context.Context, *connect_go.Request[v1.DeleteAdminPlanCategoryRequest]) (*connect_go.Response[emptypb.Empty], error)
	OrderAdminPlanCategories(context.Context, *connect_go.Request[v1.OrderAdminPlanCategoriesRequest]) (*connect_go.Response[emptypb.Empty], error)
	CreateAdminPlan(context.Context, *connect_go.Request[v1.CreateAdminPlanRequest]) (*connect_go.Response[v1.CreateAdminPlanResponse], error)
	UpdateAdminPlan(context.Context, *connect_go.Request[v1.UpdateAdminPlanRequest]) (*connect_go.Response[v1.UpdateAdminPlanResponse], error)
}

// NewPlanServiceClient constructs a client for the plan.v1.PlanService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPlanServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PlanServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &planServiceClient{
		getAdminPlanCategories: connect_go.NewClient[emptypb.Empty, v1.GetAdminPlanCategoriesResponse](
			httpClient,
			baseURL+"/plan.v1.PlanService/GetAdminPlanCategories",
			opts...,
		),
		createAdminPlanCategory: connect_go.NewClient[v1.CreateAdminPlanCategoryRequest, v1.CreateAdminPlanCategoryResponse](
			httpClient,
			baseURL+"/plan.v1.PlanService/CreateAdminPlanCategory",
			opts...,
		),
		updateAdminPlanCategory: connect_go.NewClient[v1.UpdateAdminPlanCategoryRequest, emptypb.Empty](
			httpClient,
			baseURL+"/plan.v1.PlanService/UpdateAdminPlanCategory",
			opts...,
		),
		deleteAdminPlanCategories: connect_go.NewClient[v1.DeleteAdminPlanCategoryRequest, emptypb.Empty](
			httpClient,
			baseURL+"/plan.v1.PlanService/DeleteAdminPlanCategories",
			opts...,
		),
		orderAdminPlanCategories: connect_go.NewClient[v1.OrderAdminPlanCategoriesRequest, emptypb.Empty](
			httpClient,
			baseURL+"/plan.v1.PlanService/OrderAdminPlanCategories",
			opts...,
		),
		createAdminPlan: connect_go.NewClient[v1.CreateAdminPlanRequest, v1.CreateAdminPlanResponse](
			httpClient,
			baseURL+"/plan.v1.PlanService/CreateAdminPlan",
			opts...,
		),
		updateAdminPlan: connect_go.NewClient[v1.UpdateAdminPlanRequest, v1.UpdateAdminPlanResponse](
			httpClient,
			baseURL+"/plan.v1.PlanService/UpdateAdminPlan",
			opts...,
		),
	}
}

// planServiceClient implements PlanServiceClient.
type planServiceClient struct {
	getAdminPlanCategories    *connect_go.Client[emptypb.Empty, v1.GetAdminPlanCategoriesResponse]
	createAdminPlanCategory   *connect_go.Client[v1.CreateAdminPlanCategoryRequest, v1.CreateAdminPlanCategoryResponse]
	updateAdminPlanCategory   *connect_go.Client[v1.UpdateAdminPlanCategoryRequest, emptypb.Empty]
	deleteAdminPlanCategories *connect_go.Client[v1.DeleteAdminPlanCategoryRequest, emptypb.Empty]
	orderAdminPlanCategories  *connect_go.Client[v1.OrderAdminPlanCategoriesRequest, emptypb.Empty]
	createAdminPlan           *connect_go.Client[v1.CreateAdminPlanRequest, v1.CreateAdminPlanResponse]
	updateAdminPlan           *connect_go.Client[v1.UpdateAdminPlanRequest, v1.UpdateAdminPlanResponse]
}

// GetAdminPlanCategories calls plan.v1.PlanService.GetAdminPlanCategories.
func (c *planServiceClient) GetAdminPlanCategories(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetAdminPlanCategoriesResponse], error) {
	return c.getAdminPlanCategories.CallUnary(ctx, req)
}

// CreateAdminPlanCategory calls plan.v1.PlanService.CreateAdminPlanCategory.
func (c *planServiceClient) CreateAdminPlanCategory(ctx context.Context, req *connect_go.Request[v1.CreateAdminPlanCategoryRequest]) (*connect_go.Response[v1.CreateAdminPlanCategoryResponse], error) {
	return c.createAdminPlanCategory.CallUnary(ctx, req)
}

// UpdateAdminPlanCategory calls plan.v1.PlanService.UpdateAdminPlanCategory.
func (c *planServiceClient) UpdateAdminPlanCategory(ctx context.Context, req *connect_go.Request[v1.UpdateAdminPlanCategoryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updateAdminPlanCategory.CallUnary(ctx, req)
}

// DeleteAdminPlanCategories calls plan.v1.PlanService.DeleteAdminPlanCategories.
func (c *planServiceClient) DeleteAdminPlanCategories(ctx context.Context, req *connect_go.Request[v1.DeleteAdminPlanCategoryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteAdminPlanCategories.CallUnary(ctx, req)
}

// OrderAdminPlanCategories calls plan.v1.PlanService.OrderAdminPlanCategories.
func (c *planServiceClient) OrderAdminPlanCategories(ctx context.Context, req *connect_go.Request[v1.OrderAdminPlanCategoriesRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.orderAdminPlanCategories.CallUnary(ctx, req)
}

// CreateAdminPlan calls plan.v1.PlanService.CreateAdminPlan.
func (c *planServiceClient) CreateAdminPlan(ctx context.Context, req *connect_go.Request[v1.CreateAdminPlanRequest]) (*connect_go.Response[v1.CreateAdminPlanResponse], error) {
	return c.createAdminPlan.CallUnary(ctx, req)
}

// UpdateAdminPlan calls plan.v1.PlanService.UpdateAdminPlan.
func (c *planServiceClient) UpdateAdminPlan(ctx context.Context, req *connect_go.Request[v1.UpdateAdminPlanRequest]) (*connect_go.Response[v1.UpdateAdminPlanResponse], error) {
	return c.updateAdminPlan.CallUnary(ctx, req)
}

// PlanServiceHandler is an implementation of the plan.v1.PlanService service.
type PlanServiceHandler interface {
	GetAdminPlanCategories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetAdminPlanCategoriesResponse], error)
	CreateAdminPlanCategory(context.Context, *connect_go.Request[v1.CreateAdminPlanCategoryRequest]) (*connect_go.Response[v1.CreateAdminPlanCategoryResponse], error)
	UpdateAdminPlanCategory(context.Context, *connect_go.Request[v1.UpdateAdminPlanCategoryRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteAdminPlanCategories(context.Context, *connect_go.Request[v1.DeleteAdminPlanCategoryRequest]) (*connect_go.Response[emptypb.Empty], error)
	OrderAdminPlanCategories(context.Context, *connect_go.Request[v1.OrderAdminPlanCategoriesRequest]) (*connect_go.Response[emptypb.Empty], error)
	CreateAdminPlan(context.Context, *connect_go.Request[v1.CreateAdminPlanRequest]) (*connect_go.Response[v1.CreateAdminPlanResponse], error)
	UpdateAdminPlan(context.Context, *connect_go.Request[v1.UpdateAdminPlanRequest]) (*connect_go.Response[v1.UpdateAdminPlanResponse], error)
}

// NewPlanServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPlanServiceHandler(svc PlanServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/plan.v1.PlanService/GetAdminPlanCategories", connect_go.NewUnaryHandler(
		"/plan.v1.PlanService/GetAdminPlanCategories",
		svc.GetAdminPlanCategories,
		opts...,
	))
	mux.Handle("/plan.v1.PlanService/CreateAdminPlanCategory", connect_go.NewUnaryHandler(
		"/plan.v1.PlanService/CreateAdminPlanCategory",
		svc.CreateAdminPlanCategory,
		opts...,
	))
	mux.Handle("/plan.v1.PlanService/UpdateAdminPlanCategory", connect_go.NewUnaryHandler(
		"/plan.v1.PlanService/UpdateAdminPlanCategory",
		svc.UpdateAdminPlanCategory,
		opts...,
	))
	mux.Handle("/plan.v1.PlanService/DeleteAdminPlanCategories", connect_go.NewUnaryHandler(
		"/plan.v1.PlanService/DeleteAdminPlanCategories",
		svc.DeleteAdminPlanCategories,
		opts...,
	))
	mux.Handle("/plan.v1.PlanService/OrderAdminPlanCategories", connect_go.NewUnaryHandler(
		"/plan.v1.PlanService/OrderAdminPlanCategories",
		svc.OrderAdminPlanCategories,
		opts...,
	))
	mux.Handle("/plan.v1.PlanService/CreateAdminPlan", connect_go.NewUnaryHandler(
		"/plan.v1.PlanService/CreateAdminPlan",
		svc.CreateAdminPlan,
		opts...,
	))
	mux.Handle("/plan.v1.PlanService/UpdateAdminPlan", connect_go.NewUnaryHandler(
		"/plan.v1.PlanService/UpdateAdminPlan",
		svc.UpdateAdminPlan,
		opts...,
	))
	return "/plan.v1.PlanService/", mux
}

// UnimplementedPlanServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPlanServiceHandler struct{}

func (UnimplementedPlanServiceHandler) GetAdminPlanCategories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetAdminPlanCategoriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("plan.v1.PlanService.GetAdminPlanCategories is not implemented"))
}

func (UnimplementedPlanServiceHandler) CreateAdminPlanCategory(context.Context, *connect_go.Request[v1.CreateAdminPlanCategoryRequest]) (*connect_go.Response[v1.CreateAdminPlanCategoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("plan.v1.PlanService.CreateAdminPlanCategory is not implemented"))
}

func (UnimplementedPlanServiceHandler) UpdateAdminPlanCategory(context.Context, *connect_go.Request[v1.UpdateAdminPlanCategoryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("plan.v1.PlanService.UpdateAdminPlanCategory is not implemented"))
}

func (UnimplementedPlanServiceHandler) DeleteAdminPlanCategories(context.Context, *connect_go.Request[v1.DeleteAdminPlanCategoryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("plan.v1.PlanService.DeleteAdminPlanCategories is not implemented"))
}

func (UnimplementedPlanServiceHandler) OrderAdminPlanCategories(context.Context, *connect_go.Request[v1.OrderAdminPlanCategoriesRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("plan.v1.PlanService.OrderAdminPlanCategories is not implemented"))
}

func (UnimplementedPlanServiceHandler) CreateAdminPlan(context.Context, *connect_go.Request[v1.CreateAdminPlanRequest]) (*connect_go.Response[v1.CreateAdminPlanResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("plan.v1.PlanService.CreateAdminPlan is not implemented"))
}

func (UnimplementedPlanServiceHandler) UpdateAdminPlan(context.Context, *connect_go.Request[v1.UpdateAdminPlanRequest]) (*connect_go.Response[v1.UpdateAdminPlanResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("plan.v1.PlanService.UpdateAdminPlan is not implemented"))
}
