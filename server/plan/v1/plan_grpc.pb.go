// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: plan/v1/plan.proto

package planv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlanServiceClient is the client API for PlanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanServiceClient interface {
	GetAdminPlanCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAdminPlanCategoriesResponse, error)
	CreateAdminPlanCategory(ctx context.Context, in *CreateAdminPlanCategoryRequest, opts ...grpc.CallOption) (*CreateAdminPlanCategoryResponse, error)
	UpdateAdminPlanCategory(ctx context.Context, in *UpdateAdminPlanCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAdminPlanCategories(ctx context.Context, in *DeleteAdminPlanCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OrderAdminPlanCategories(ctx context.Context, in *OrderAdminPlanCategoriesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAdminPlan(ctx context.Context, in *CreateAdminPlanRequest, opts ...grpc.CallOption) (*CreateAdminPlanResponse, error)
	UpdateAdminPlan(ctx context.Context, in *UpdateAdminPlanRequest, opts ...grpc.CallOption) (*UpdateAdminPlanResponse, error)
}

type planServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanServiceClient(cc grpc.ClientConnInterface) PlanServiceClient {
	return &planServiceClient{cc}
}

func (c *planServiceClient) GetAdminPlanCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAdminPlanCategoriesResponse, error) {
	out := new(GetAdminPlanCategoriesResponse)
	err := c.cc.Invoke(ctx, "/plan.v1.PlanService/GetAdminPlanCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) CreateAdminPlanCategory(ctx context.Context, in *CreateAdminPlanCategoryRequest, opts ...grpc.CallOption) (*CreateAdminPlanCategoryResponse, error) {
	out := new(CreateAdminPlanCategoryResponse)
	err := c.cc.Invoke(ctx, "/plan.v1.PlanService/CreateAdminPlanCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) UpdateAdminPlanCategory(ctx context.Context, in *UpdateAdminPlanCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/plan.v1.PlanService/UpdateAdminPlanCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) DeleteAdminPlanCategories(ctx context.Context, in *DeleteAdminPlanCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/plan.v1.PlanService/DeleteAdminPlanCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) OrderAdminPlanCategories(ctx context.Context, in *OrderAdminPlanCategoriesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/plan.v1.PlanService/OrderAdminPlanCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) CreateAdminPlan(ctx context.Context, in *CreateAdminPlanRequest, opts ...grpc.CallOption) (*CreateAdminPlanResponse, error) {
	out := new(CreateAdminPlanResponse)
	err := c.cc.Invoke(ctx, "/plan.v1.PlanService/CreateAdminPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) UpdateAdminPlan(ctx context.Context, in *UpdateAdminPlanRequest, opts ...grpc.CallOption) (*UpdateAdminPlanResponse, error) {
	out := new(UpdateAdminPlanResponse)
	err := c.cc.Invoke(ctx, "/plan.v1.PlanService/UpdateAdminPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanServiceServer is the server API for PlanService service.
// All implementations should embed UnimplementedPlanServiceServer
// for forward compatibility
type PlanServiceServer interface {
	GetAdminPlanCategories(context.Context, *emptypb.Empty) (*GetAdminPlanCategoriesResponse, error)
	CreateAdminPlanCategory(context.Context, *CreateAdminPlanCategoryRequest) (*CreateAdminPlanCategoryResponse, error)
	UpdateAdminPlanCategory(context.Context, *UpdateAdminPlanCategoryRequest) (*emptypb.Empty, error)
	DeleteAdminPlanCategories(context.Context, *DeleteAdminPlanCategoryRequest) (*emptypb.Empty, error)
	OrderAdminPlanCategories(context.Context, *OrderAdminPlanCategoriesRequest) (*emptypb.Empty, error)
	CreateAdminPlan(context.Context, *CreateAdminPlanRequest) (*CreateAdminPlanResponse, error)
	UpdateAdminPlan(context.Context, *UpdateAdminPlanRequest) (*UpdateAdminPlanResponse, error)
}

// UnimplementedPlanServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPlanServiceServer struct {
}

func (UnimplementedPlanServiceServer) GetAdminPlanCategories(context.Context, *emptypb.Empty) (*GetAdminPlanCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminPlanCategories not implemented")
}
func (UnimplementedPlanServiceServer) CreateAdminPlanCategory(context.Context, *CreateAdminPlanCategoryRequest) (*CreateAdminPlanCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdminPlanCategory not implemented")
}
func (UnimplementedPlanServiceServer) UpdateAdminPlanCategory(context.Context, *UpdateAdminPlanCategoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminPlanCategory not implemented")
}
func (UnimplementedPlanServiceServer) DeleteAdminPlanCategories(context.Context, *DeleteAdminPlanCategoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdminPlanCategories not implemented")
}
func (UnimplementedPlanServiceServer) OrderAdminPlanCategories(context.Context, *OrderAdminPlanCategoriesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderAdminPlanCategories not implemented")
}
func (UnimplementedPlanServiceServer) CreateAdminPlan(context.Context, *CreateAdminPlanRequest) (*CreateAdminPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdminPlan not implemented")
}
func (UnimplementedPlanServiceServer) UpdateAdminPlan(context.Context, *UpdateAdminPlanRequest) (*UpdateAdminPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminPlan not implemented")
}

// UnsafePlanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanServiceServer will
// result in compilation errors.
type UnsafePlanServiceServer interface {
	mustEmbedUnimplementedPlanServiceServer()
}

func RegisterPlanServiceServer(s grpc.ServiceRegistrar, srv PlanServiceServer) {
	s.RegisterService(&PlanService_ServiceDesc, srv)
}

func _PlanService_GetAdminPlanCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).GetAdminPlanCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.v1.PlanService/GetAdminPlanCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).GetAdminPlanCategories(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_CreateAdminPlanCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminPlanCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).CreateAdminPlanCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.v1.PlanService/CreateAdminPlanCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).CreateAdminPlanCategory(ctx, req.(*CreateAdminPlanCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_UpdateAdminPlanCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminPlanCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).UpdateAdminPlanCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.v1.PlanService/UpdateAdminPlanCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).UpdateAdminPlanCategory(ctx, req.(*UpdateAdminPlanCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_DeleteAdminPlanCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminPlanCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).DeleteAdminPlanCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.v1.PlanService/DeleteAdminPlanCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).DeleteAdminPlanCategories(ctx, req.(*DeleteAdminPlanCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_OrderAdminPlanCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderAdminPlanCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).OrderAdminPlanCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.v1.PlanService/OrderAdminPlanCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).OrderAdminPlanCategories(ctx, req.(*OrderAdminPlanCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_CreateAdminPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).CreateAdminPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.v1.PlanService/CreateAdminPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).CreateAdminPlan(ctx, req.(*CreateAdminPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_UpdateAdminPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).UpdateAdminPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.v1.PlanService/UpdateAdminPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).UpdateAdminPlan(ctx, req.(*UpdateAdminPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanService_ServiceDesc is the grpc.ServiceDesc for PlanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plan.v1.PlanService",
	HandlerType: (*PlanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdminPlanCategories",
			Handler:    _PlanService_GetAdminPlanCategories_Handler,
		},
		{
			MethodName: "CreateAdminPlanCategory",
			Handler:    _PlanService_CreateAdminPlanCategory_Handler,
		},
		{
			MethodName: "UpdateAdminPlanCategory",
			Handler:    _PlanService_UpdateAdminPlanCategory_Handler,
		},
		{
			MethodName: "DeleteAdminPlanCategories",
			Handler:    _PlanService_DeleteAdminPlanCategories_Handler,
		},
		{
			MethodName: "OrderAdminPlanCategories",
			Handler:    _PlanService_OrderAdminPlanCategories_Handler,
		},
		{
			MethodName: "CreateAdminPlan",
			Handler:    _PlanService_CreateAdminPlan_Handler,
		},
		{
			MethodName: "UpdateAdminPlan",
			Handler:    _PlanService_UpdateAdminPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plan/v1/plan.proto",
}
