// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: payment/v1/iap.proto

package paymentv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/10kn/wink_common/server/payment/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IapServiceName is the fully-qualified name of the IapService service.
	IapServiceName = "payment.v1.IapService"
)

// IapServiceClient is a client for the payment.v1.IapService service.
type IapServiceClient interface {
	FetchSubscriptions(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.FetchSubscriptionsResponse], error)
	SyncIap(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.SyncIapResponse], error)
	BuyConsumableIap(context.Context, *connect_go.Request[v1.BuyConsumableIapRequest]) (*connect_go.Response[v1.BuyConsumableIapResponse], error)
}

// NewIapServiceClient constructs a client for the payment.v1.IapService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIapServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IapServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &iapServiceClient{
		fetchSubscriptions: connect_go.NewClient[emptypb.Empty, v1.FetchSubscriptionsResponse](
			httpClient,
			baseURL+"/payment.v1.IapService/FetchSubscriptions",
			opts...,
		),
		syncIap: connect_go.NewClient[emptypb.Empty, v1.SyncIapResponse](
			httpClient,
			baseURL+"/payment.v1.IapService/SyncIap",
			opts...,
		),
		buyConsumableIap: connect_go.NewClient[v1.BuyConsumableIapRequest, v1.BuyConsumableIapResponse](
			httpClient,
			baseURL+"/payment.v1.IapService/BuyConsumableIap",
			opts...,
		),
	}
}

// iapServiceClient implements IapServiceClient.
type iapServiceClient struct {
	fetchSubscriptions *connect_go.Client[emptypb.Empty, v1.FetchSubscriptionsResponse]
	syncIap            *connect_go.Client[emptypb.Empty, v1.SyncIapResponse]
	buyConsumableIap   *connect_go.Client[v1.BuyConsumableIapRequest, v1.BuyConsumableIapResponse]
}

// FetchSubscriptions calls payment.v1.IapService.FetchSubscriptions.
func (c *iapServiceClient) FetchSubscriptions(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.FetchSubscriptionsResponse], error) {
	return c.fetchSubscriptions.CallUnary(ctx, req)
}

// SyncIap calls payment.v1.IapService.SyncIap.
func (c *iapServiceClient) SyncIap(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.SyncIapResponse], error) {
	return c.syncIap.CallUnary(ctx, req)
}

// BuyConsumableIap calls payment.v1.IapService.BuyConsumableIap.
func (c *iapServiceClient) BuyConsumableIap(ctx context.Context, req *connect_go.Request[v1.BuyConsumableIapRequest]) (*connect_go.Response[v1.BuyConsumableIapResponse], error) {
	return c.buyConsumableIap.CallUnary(ctx, req)
}

// IapServiceHandler is an implementation of the payment.v1.IapService service.
type IapServiceHandler interface {
	FetchSubscriptions(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.FetchSubscriptionsResponse], error)
	SyncIap(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.SyncIapResponse], error)
	BuyConsumableIap(context.Context, *connect_go.Request[v1.BuyConsumableIapRequest]) (*connect_go.Response[v1.BuyConsumableIapResponse], error)
}

// NewIapServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIapServiceHandler(svc IapServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/payment.v1.IapService/FetchSubscriptions", connect_go.NewUnaryHandler(
		"/payment.v1.IapService/FetchSubscriptions",
		svc.FetchSubscriptions,
		opts...,
	))
	mux.Handle("/payment.v1.IapService/SyncIap", connect_go.NewUnaryHandler(
		"/payment.v1.IapService/SyncIap",
		svc.SyncIap,
		opts...,
	))
	mux.Handle("/payment.v1.IapService/BuyConsumableIap", connect_go.NewUnaryHandler(
		"/payment.v1.IapService/BuyConsumableIap",
		svc.BuyConsumableIap,
		opts...,
	))
	return "/payment.v1.IapService/", mux
}

// UnimplementedIapServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIapServiceHandler struct{}

func (UnimplementedIapServiceHandler) FetchSubscriptions(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.FetchSubscriptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payment.v1.IapService.FetchSubscriptions is not implemented"))
}

func (UnimplementedIapServiceHandler) SyncIap(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.SyncIapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payment.v1.IapService.SyncIap is not implemented"))
}

func (UnimplementedIapServiceHandler) BuyConsumableIap(context.Context, *connect_go.Request[v1.BuyConsumableIapRequest]) (*connect_go.Response[v1.BuyConsumableIapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payment.v1.IapService.BuyConsumableIap is not implemented"))
}
