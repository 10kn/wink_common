// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: payment/v1/payment.proto

package paymentv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gisucoinc/ebisuiru-fc-common/server/payment/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PaymentServiceName is the fully-qualified name of the PaymentService service.
	PaymentServiceName = "payment.v1.PaymentService"
)

// PaymentServiceClient is a client for the payment.v1.PaymentService service.
type PaymentServiceClient interface {
	GetCoinPlans(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetCoinPlansResponse], error)
	GetMemberPlans(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetMemberPlansResponse], error)
	GetPaymentCard(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetPaymentCardResponse], error)
	CreateSetupIntent(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CreateSetupIntentResponse], error)
	BuyConsumable(context.Context, *connect_go.Request[v1.BuyConsumableRequest]) (*connect_go.Response[v1.BuyConsumableResponse], error)
	BuyConsumableWithRegisteredMethod(context.Context, *connect_go.Request[v1.BuyConsumableWithRegisteredMethodRequest]) (*connect_go.Response[v1.BuyConsumableWithRegisteredMethodResponse], error)
	BuySubscription(context.Context, *connect_go.Request[v1.BuySubscriptionRequest]) (*connect_go.Response[v1.BuySubscriptionResponse], error)
	BuySubscriptionWithRegisteredMethod(context.Context, *connect_go.Request[v1.BuySubscriptionWithRegisteredMethodRequest]) (*connect_go.Response[v1.BuySubscriptionWithRegisteredMethodResponse], error)
	CancelSubscription(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CancelSubscriptionResponse], error)
	UpdatePaymentCard(context.Context, *connect_go.Request[v1.UpdatePaymentCardRequest]) (*connect_go.Response[v1.UpdatePaymentCardResponse], error)
	BuyOneDayPlanWithCoin(context.Context, *connect_go.Request[v1.BuyOneDayPlanWithCoinRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewPaymentServiceClient constructs a client for the payment.v1.PaymentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPaymentServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PaymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &paymentServiceClient{
		getCoinPlans: connect_go.NewClient[emptypb.Empty, v1.GetCoinPlansResponse](
			httpClient,
			baseURL+"/payment.v1.PaymentService/GetCoinPlans",
			opts...,
		),
		getMemberPlans: connect_go.NewClient[emptypb.Empty, v1.GetMemberPlansResponse](
			httpClient,
			baseURL+"/payment.v1.PaymentService/GetMemberPlans",
			opts...,
		),
		getPaymentCard: connect_go.NewClient[emptypb.Empty, v1.GetPaymentCardResponse](
			httpClient,
			baseURL+"/payment.v1.PaymentService/GetPaymentCard",
			opts...,
		),
		createSetupIntent: connect_go.NewClient[emptypb.Empty, v1.CreateSetupIntentResponse](
			httpClient,
			baseURL+"/payment.v1.PaymentService/CreateSetupIntent",
			opts...,
		),
		buyConsumable: connect_go.NewClient[v1.BuyConsumableRequest, v1.BuyConsumableResponse](
			httpClient,
			baseURL+"/payment.v1.PaymentService/BuyConsumable",
			opts...,
		),
		buyConsumableWithRegisteredMethod: connect_go.NewClient[v1.BuyConsumableWithRegisteredMethodRequest, v1.BuyConsumableWithRegisteredMethodResponse](
			httpClient,
			baseURL+"/payment.v1.PaymentService/BuyConsumableWithRegisteredMethod",
			opts...,
		),
		buySubscription: connect_go.NewClient[v1.BuySubscriptionRequest, v1.BuySubscriptionResponse](
			httpClient,
			baseURL+"/payment.v1.PaymentService/BuySubscription",
			opts...,
		),
		buySubscriptionWithRegisteredMethod: connect_go.NewClient[v1.BuySubscriptionWithRegisteredMethodRequest, v1.BuySubscriptionWithRegisteredMethodResponse](
			httpClient,
			baseURL+"/payment.v1.PaymentService/BuySubscriptionWithRegisteredMethod",
			opts...,
		),
		cancelSubscription: connect_go.NewClient[emptypb.Empty, v1.CancelSubscriptionResponse](
			httpClient,
			baseURL+"/payment.v1.PaymentService/CancelSubscription",
			opts...,
		),
		updatePaymentCard: connect_go.NewClient[v1.UpdatePaymentCardRequest, v1.UpdatePaymentCardResponse](
			httpClient,
			baseURL+"/payment.v1.PaymentService/UpdatePaymentCard",
			opts...,
		),
		buyOneDayPlanWithCoin: connect_go.NewClient[v1.BuyOneDayPlanWithCoinRequest, emptypb.Empty](
			httpClient,
			baseURL+"/payment.v1.PaymentService/BuyOneDayPlanWithCoin",
			opts...,
		),
	}
}

// paymentServiceClient implements PaymentServiceClient.
type paymentServiceClient struct {
	getCoinPlans                        *connect_go.Client[emptypb.Empty, v1.GetCoinPlansResponse]
	getMemberPlans                      *connect_go.Client[emptypb.Empty, v1.GetMemberPlansResponse]
	getPaymentCard                      *connect_go.Client[emptypb.Empty, v1.GetPaymentCardResponse]
	createSetupIntent                   *connect_go.Client[emptypb.Empty, v1.CreateSetupIntentResponse]
	buyConsumable                       *connect_go.Client[v1.BuyConsumableRequest, v1.BuyConsumableResponse]
	buyConsumableWithRegisteredMethod   *connect_go.Client[v1.BuyConsumableWithRegisteredMethodRequest, v1.BuyConsumableWithRegisteredMethodResponse]
	buySubscription                     *connect_go.Client[v1.BuySubscriptionRequest, v1.BuySubscriptionResponse]
	buySubscriptionWithRegisteredMethod *connect_go.Client[v1.BuySubscriptionWithRegisteredMethodRequest, v1.BuySubscriptionWithRegisteredMethodResponse]
	cancelSubscription                  *connect_go.Client[emptypb.Empty, v1.CancelSubscriptionResponse]
	updatePaymentCard                   *connect_go.Client[v1.UpdatePaymentCardRequest, v1.UpdatePaymentCardResponse]
	buyOneDayPlanWithCoin               *connect_go.Client[v1.BuyOneDayPlanWithCoinRequest, emptypb.Empty]
}

// GetCoinPlans calls payment.v1.PaymentService.GetCoinPlans.
func (c *paymentServiceClient) GetCoinPlans(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetCoinPlansResponse], error) {
	return c.getCoinPlans.CallUnary(ctx, req)
}

// GetMemberPlans calls payment.v1.PaymentService.GetMemberPlans.
func (c *paymentServiceClient) GetMemberPlans(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetMemberPlansResponse], error) {
	return c.getMemberPlans.CallUnary(ctx, req)
}

// GetPaymentCard calls payment.v1.PaymentService.GetPaymentCard.
func (c *paymentServiceClient) GetPaymentCard(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetPaymentCardResponse], error) {
	return c.getPaymentCard.CallUnary(ctx, req)
}

// CreateSetupIntent calls payment.v1.PaymentService.CreateSetupIntent.
func (c *paymentServiceClient) CreateSetupIntent(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CreateSetupIntentResponse], error) {
	return c.createSetupIntent.CallUnary(ctx, req)
}

// BuyConsumable calls payment.v1.PaymentService.BuyConsumable.
func (c *paymentServiceClient) BuyConsumable(ctx context.Context, req *connect_go.Request[v1.BuyConsumableRequest]) (*connect_go.Response[v1.BuyConsumableResponse], error) {
	return c.buyConsumable.CallUnary(ctx, req)
}

// BuyConsumableWithRegisteredMethod calls
// payment.v1.PaymentService.BuyConsumableWithRegisteredMethod.
func (c *paymentServiceClient) BuyConsumableWithRegisteredMethod(ctx context.Context, req *connect_go.Request[v1.BuyConsumableWithRegisteredMethodRequest]) (*connect_go.Response[v1.BuyConsumableWithRegisteredMethodResponse], error) {
	return c.buyConsumableWithRegisteredMethod.CallUnary(ctx, req)
}

// BuySubscription calls payment.v1.PaymentService.BuySubscription.
func (c *paymentServiceClient) BuySubscription(ctx context.Context, req *connect_go.Request[v1.BuySubscriptionRequest]) (*connect_go.Response[v1.BuySubscriptionResponse], error) {
	return c.buySubscription.CallUnary(ctx, req)
}

// BuySubscriptionWithRegisteredMethod calls
// payment.v1.PaymentService.BuySubscriptionWithRegisteredMethod.
func (c *paymentServiceClient) BuySubscriptionWithRegisteredMethod(ctx context.Context, req *connect_go.Request[v1.BuySubscriptionWithRegisteredMethodRequest]) (*connect_go.Response[v1.BuySubscriptionWithRegisteredMethodResponse], error) {
	return c.buySubscriptionWithRegisteredMethod.CallUnary(ctx, req)
}

// CancelSubscription calls payment.v1.PaymentService.CancelSubscription.
func (c *paymentServiceClient) CancelSubscription(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CancelSubscriptionResponse], error) {
	return c.cancelSubscription.CallUnary(ctx, req)
}

// UpdatePaymentCard calls payment.v1.PaymentService.UpdatePaymentCard.
func (c *paymentServiceClient) UpdatePaymentCard(ctx context.Context, req *connect_go.Request[v1.UpdatePaymentCardRequest]) (*connect_go.Response[v1.UpdatePaymentCardResponse], error) {
	return c.updatePaymentCard.CallUnary(ctx, req)
}

// BuyOneDayPlanWithCoin calls payment.v1.PaymentService.BuyOneDayPlanWithCoin.
func (c *paymentServiceClient) BuyOneDayPlanWithCoin(ctx context.Context, req *connect_go.Request[v1.BuyOneDayPlanWithCoinRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.buyOneDayPlanWithCoin.CallUnary(ctx, req)
}

// PaymentServiceHandler is an implementation of the payment.v1.PaymentService service.
type PaymentServiceHandler interface {
	GetCoinPlans(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetCoinPlansResponse], error)
	GetMemberPlans(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetMemberPlansResponse], error)
	GetPaymentCard(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetPaymentCardResponse], error)
	CreateSetupIntent(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CreateSetupIntentResponse], error)
	BuyConsumable(context.Context, *connect_go.Request[v1.BuyConsumableRequest]) (*connect_go.Response[v1.BuyConsumableResponse], error)
	BuyConsumableWithRegisteredMethod(context.Context, *connect_go.Request[v1.BuyConsumableWithRegisteredMethodRequest]) (*connect_go.Response[v1.BuyConsumableWithRegisteredMethodResponse], error)
	BuySubscription(context.Context, *connect_go.Request[v1.BuySubscriptionRequest]) (*connect_go.Response[v1.BuySubscriptionResponse], error)
	BuySubscriptionWithRegisteredMethod(context.Context, *connect_go.Request[v1.BuySubscriptionWithRegisteredMethodRequest]) (*connect_go.Response[v1.BuySubscriptionWithRegisteredMethodResponse], error)
	CancelSubscription(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CancelSubscriptionResponse], error)
	UpdatePaymentCard(context.Context, *connect_go.Request[v1.UpdatePaymentCardRequest]) (*connect_go.Response[v1.UpdatePaymentCardResponse], error)
	BuyOneDayPlanWithCoin(context.Context, *connect_go.Request[v1.BuyOneDayPlanWithCoinRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewPaymentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPaymentServiceHandler(svc PaymentServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/payment.v1.PaymentService/GetCoinPlans", connect_go.NewUnaryHandler(
		"/payment.v1.PaymentService/GetCoinPlans",
		svc.GetCoinPlans,
		opts...,
	))
	mux.Handle("/payment.v1.PaymentService/GetMemberPlans", connect_go.NewUnaryHandler(
		"/payment.v1.PaymentService/GetMemberPlans",
		svc.GetMemberPlans,
		opts...,
	))
	mux.Handle("/payment.v1.PaymentService/GetPaymentCard", connect_go.NewUnaryHandler(
		"/payment.v1.PaymentService/GetPaymentCard",
		svc.GetPaymentCard,
		opts...,
	))
	mux.Handle("/payment.v1.PaymentService/CreateSetupIntent", connect_go.NewUnaryHandler(
		"/payment.v1.PaymentService/CreateSetupIntent",
		svc.CreateSetupIntent,
		opts...,
	))
	mux.Handle("/payment.v1.PaymentService/BuyConsumable", connect_go.NewUnaryHandler(
		"/payment.v1.PaymentService/BuyConsumable",
		svc.BuyConsumable,
		opts...,
	))
	mux.Handle("/payment.v1.PaymentService/BuyConsumableWithRegisteredMethod", connect_go.NewUnaryHandler(
		"/payment.v1.PaymentService/BuyConsumableWithRegisteredMethod",
		svc.BuyConsumableWithRegisteredMethod,
		opts...,
	))
	mux.Handle("/payment.v1.PaymentService/BuySubscription", connect_go.NewUnaryHandler(
		"/payment.v1.PaymentService/BuySubscription",
		svc.BuySubscription,
		opts...,
	))
	mux.Handle("/payment.v1.PaymentService/BuySubscriptionWithRegisteredMethod", connect_go.NewUnaryHandler(
		"/payment.v1.PaymentService/BuySubscriptionWithRegisteredMethod",
		svc.BuySubscriptionWithRegisteredMethod,
		opts...,
	))
	mux.Handle("/payment.v1.PaymentService/CancelSubscription", connect_go.NewUnaryHandler(
		"/payment.v1.PaymentService/CancelSubscription",
		svc.CancelSubscription,
		opts...,
	))
	mux.Handle("/payment.v1.PaymentService/UpdatePaymentCard", connect_go.NewUnaryHandler(
		"/payment.v1.PaymentService/UpdatePaymentCard",
		svc.UpdatePaymentCard,
		opts...,
	))
	mux.Handle("/payment.v1.PaymentService/BuyOneDayPlanWithCoin", connect_go.NewUnaryHandler(
		"/payment.v1.PaymentService/BuyOneDayPlanWithCoin",
		svc.BuyOneDayPlanWithCoin,
		opts...,
	))
	return "/payment.v1.PaymentService/", mux
}

// UnimplementedPaymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPaymentServiceHandler struct{}

func (UnimplementedPaymentServiceHandler) GetCoinPlans(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetCoinPlansResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payment.v1.PaymentService.GetCoinPlans is not implemented"))
}

func (UnimplementedPaymentServiceHandler) GetMemberPlans(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetMemberPlansResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payment.v1.PaymentService.GetMemberPlans is not implemented"))
}

func (UnimplementedPaymentServiceHandler) GetPaymentCard(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetPaymentCardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payment.v1.PaymentService.GetPaymentCard is not implemented"))
}

func (UnimplementedPaymentServiceHandler) CreateSetupIntent(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CreateSetupIntentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payment.v1.PaymentService.CreateSetupIntent is not implemented"))
}

func (UnimplementedPaymentServiceHandler) BuyConsumable(context.Context, *connect_go.Request[v1.BuyConsumableRequest]) (*connect_go.Response[v1.BuyConsumableResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payment.v1.PaymentService.BuyConsumable is not implemented"))
}

func (UnimplementedPaymentServiceHandler) BuyConsumableWithRegisteredMethod(context.Context, *connect_go.Request[v1.BuyConsumableWithRegisteredMethodRequest]) (*connect_go.Response[v1.BuyConsumableWithRegisteredMethodResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payment.v1.PaymentService.BuyConsumableWithRegisteredMethod is not implemented"))
}

func (UnimplementedPaymentServiceHandler) BuySubscription(context.Context, *connect_go.Request[v1.BuySubscriptionRequest]) (*connect_go.Response[v1.BuySubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payment.v1.PaymentService.BuySubscription is not implemented"))
}

func (UnimplementedPaymentServiceHandler) BuySubscriptionWithRegisteredMethod(context.Context, *connect_go.Request[v1.BuySubscriptionWithRegisteredMethodRequest]) (*connect_go.Response[v1.BuySubscriptionWithRegisteredMethodResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payment.v1.PaymentService.BuySubscriptionWithRegisteredMethod is not implemented"))
}

func (UnimplementedPaymentServiceHandler) CancelSubscription(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CancelSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payment.v1.PaymentService.CancelSubscription is not implemented"))
}

func (UnimplementedPaymentServiceHandler) UpdatePaymentCard(context.Context, *connect_go.Request[v1.UpdatePaymentCardRequest]) (*connect_go.Response[v1.UpdatePaymentCardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payment.v1.PaymentService.UpdatePaymentCard is not implemented"))
}

func (UnimplementedPaymentServiceHandler) BuyOneDayPlanWithCoin(context.Context, *connect_go.Request[v1.BuyOneDayPlanWithCoinRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payment.v1.PaymentService.BuyOneDayPlanWithCoin is not implemented"))
}
