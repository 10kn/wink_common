// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: payment/v1/iap_admin.proto

package paymentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IapAdminServiceClient is the client API for IapAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IapAdminServiceClient interface {
	ListSubscription(ctx context.Context, in *ListSubscriptionAdminRequest, opts ...grpc.CallOption) (*ListSubscriptionAdminResponse, error)
	ListNonSubscription(ctx context.Context, in *ListNonSubscriptionAdminRequest, opts ...grpc.CallOption) (*ListNonSubscriptionAdminResponse, error)
}

type iapAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIapAdminServiceClient(cc grpc.ClientConnInterface) IapAdminServiceClient {
	return &iapAdminServiceClient{cc}
}

func (c *iapAdminServiceClient) ListSubscription(ctx context.Context, in *ListSubscriptionAdminRequest, opts ...grpc.CallOption) (*ListSubscriptionAdminResponse, error) {
	out := new(ListSubscriptionAdminResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.IapAdminService/ListSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iapAdminServiceClient) ListNonSubscription(ctx context.Context, in *ListNonSubscriptionAdminRequest, opts ...grpc.CallOption) (*ListNonSubscriptionAdminResponse, error) {
	out := new(ListNonSubscriptionAdminResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.IapAdminService/ListNonSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IapAdminServiceServer is the server API for IapAdminService service.
// All implementations should embed UnimplementedIapAdminServiceServer
// for forward compatibility
type IapAdminServiceServer interface {
	ListSubscription(context.Context, *ListSubscriptionAdminRequest) (*ListSubscriptionAdminResponse, error)
	ListNonSubscription(context.Context, *ListNonSubscriptionAdminRequest) (*ListNonSubscriptionAdminResponse, error)
}

// UnimplementedIapAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIapAdminServiceServer struct {
}

func (UnimplementedIapAdminServiceServer) ListSubscription(context.Context, *ListSubscriptionAdminRequest) (*ListSubscriptionAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscription not implemented")
}
func (UnimplementedIapAdminServiceServer) ListNonSubscription(context.Context, *ListNonSubscriptionAdminRequest) (*ListNonSubscriptionAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNonSubscription not implemented")
}

// UnsafeIapAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IapAdminServiceServer will
// result in compilation errors.
type UnsafeIapAdminServiceServer interface {
	mustEmbedUnimplementedIapAdminServiceServer()
}

func RegisterIapAdminServiceServer(s grpc.ServiceRegistrar, srv IapAdminServiceServer) {
	s.RegisterService(&IapAdminService_ServiceDesc, srv)
}

func _IapAdminService_ListSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IapAdminServiceServer).ListSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.IapAdminService/ListSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IapAdminServiceServer).ListSubscription(ctx, req.(*ListSubscriptionAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IapAdminService_ListNonSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNonSubscriptionAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IapAdminServiceServer).ListNonSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.IapAdminService/ListNonSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IapAdminServiceServer).ListNonSubscription(ctx, req.(*ListNonSubscriptionAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IapAdminService_ServiceDesc is the grpc.ServiceDesc for IapAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IapAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1.IapAdminService",
	HandlerType: (*IapAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSubscription",
			Handler:    _IapAdminService_ListSubscription_Handler,
		},
		{
			MethodName: "ListNonSubscription",
			Handler:    _IapAdminService_ListNonSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/iap_admin.proto",
}
