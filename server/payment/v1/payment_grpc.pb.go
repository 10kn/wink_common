// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: payment/v1/payment.proto

package paymentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	GetCoinPlans(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCoinPlansResponse, error)
	GetMemberPlans(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMemberPlansResponse, error)
	GetPaymentCard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPaymentCardResponse, error)
	CreateSetupIntent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateSetupIntentResponse, error)
	BuyConsumable(ctx context.Context, in *BuyConsumableRequest, opts ...grpc.CallOption) (*BuyConsumableResponse, error)
	BuyConsumableWithRegisteredMethod(ctx context.Context, in *BuyConsumableWithRegisteredMethodRequest, opts ...grpc.CallOption) (*BuyConsumableWithRegisteredMethodResponse, error)
	BuySubscription(ctx context.Context, in *BuySubscriptionRequest, opts ...grpc.CallOption) (*BuySubscriptionResponse, error)
	BuySubscriptionWithRegisteredMethod(ctx context.Context, in *BuySubscriptionWithRegisteredMethodRequest, opts ...grpc.CallOption) (*BuySubscriptionWithRegisteredMethodResponse, error)
	CancelSubscription(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CancelSubscriptionResponse, error)
	UpdatePaymentCard(ctx context.Context, in *UpdatePaymentCardRequest, opts ...grpc.CallOption) (*UpdatePaymentCardResponse, error)
	BuyOneDayPlanWithCoin(ctx context.Context, in *BuyOneDayPlanWithCoinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) GetCoinPlans(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCoinPlansResponse, error) {
	out := new(GetCoinPlansResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.PaymentService/GetCoinPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetMemberPlans(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMemberPlansResponse, error) {
	out := new(GetMemberPlansResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.PaymentService/GetMemberPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentCard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPaymentCardResponse, error) {
	out := new(GetPaymentCardResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.PaymentService/GetPaymentCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreateSetupIntent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateSetupIntentResponse, error) {
	out := new(CreateSetupIntentResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.PaymentService/CreateSetupIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) BuyConsumable(ctx context.Context, in *BuyConsumableRequest, opts ...grpc.CallOption) (*BuyConsumableResponse, error) {
	out := new(BuyConsumableResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.PaymentService/BuyConsumable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) BuyConsumableWithRegisteredMethod(ctx context.Context, in *BuyConsumableWithRegisteredMethodRequest, opts ...grpc.CallOption) (*BuyConsumableWithRegisteredMethodResponse, error) {
	out := new(BuyConsumableWithRegisteredMethodResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.PaymentService/BuyConsumableWithRegisteredMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) BuySubscription(ctx context.Context, in *BuySubscriptionRequest, opts ...grpc.CallOption) (*BuySubscriptionResponse, error) {
	out := new(BuySubscriptionResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.PaymentService/BuySubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) BuySubscriptionWithRegisteredMethod(ctx context.Context, in *BuySubscriptionWithRegisteredMethodRequest, opts ...grpc.CallOption) (*BuySubscriptionWithRegisteredMethodResponse, error) {
	out := new(BuySubscriptionWithRegisteredMethodResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.PaymentService/BuySubscriptionWithRegisteredMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CancelSubscription(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CancelSubscriptionResponse, error) {
	out := new(CancelSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.PaymentService/CancelSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdatePaymentCard(ctx context.Context, in *UpdatePaymentCardRequest, opts ...grpc.CallOption) (*UpdatePaymentCardResponse, error) {
	out := new(UpdatePaymentCardResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.PaymentService/UpdatePaymentCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) BuyOneDayPlanWithCoin(ctx context.Context, in *BuyOneDayPlanWithCoinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/payment.v1.PaymentService/BuyOneDayPlanWithCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations should embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	GetCoinPlans(context.Context, *emptypb.Empty) (*GetCoinPlansResponse, error)
	GetMemberPlans(context.Context, *emptypb.Empty) (*GetMemberPlansResponse, error)
	GetPaymentCard(context.Context, *emptypb.Empty) (*GetPaymentCardResponse, error)
	CreateSetupIntent(context.Context, *emptypb.Empty) (*CreateSetupIntentResponse, error)
	BuyConsumable(context.Context, *BuyConsumableRequest) (*BuyConsumableResponse, error)
	BuyConsumableWithRegisteredMethod(context.Context, *BuyConsumableWithRegisteredMethodRequest) (*BuyConsumableWithRegisteredMethodResponse, error)
	BuySubscription(context.Context, *BuySubscriptionRequest) (*BuySubscriptionResponse, error)
	BuySubscriptionWithRegisteredMethod(context.Context, *BuySubscriptionWithRegisteredMethodRequest) (*BuySubscriptionWithRegisteredMethodResponse, error)
	CancelSubscription(context.Context, *emptypb.Empty) (*CancelSubscriptionResponse, error)
	UpdatePaymentCard(context.Context, *UpdatePaymentCardRequest) (*UpdatePaymentCardResponse, error)
	BuyOneDayPlanWithCoin(context.Context, *BuyOneDayPlanWithCoinRequest) (*emptypb.Empty, error)
}

// UnimplementedPaymentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) GetCoinPlans(context.Context, *emptypb.Empty) (*GetCoinPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinPlans not implemented")
}
func (UnimplementedPaymentServiceServer) GetMemberPlans(context.Context, *emptypb.Empty) (*GetMemberPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberPlans not implemented")
}
func (UnimplementedPaymentServiceServer) GetPaymentCard(context.Context, *emptypb.Empty) (*GetPaymentCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentCard not implemented")
}
func (UnimplementedPaymentServiceServer) CreateSetupIntent(context.Context, *emptypb.Empty) (*CreateSetupIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSetupIntent not implemented")
}
func (UnimplementedPaymentServiceServer) BuyConsumable(context.Context, *BuyConsumableRequest) (*BuyConsumableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyConsumable not implemented")
}
func (UnimplementedPaymentServiceServer) BuyConsumableWithRegisteredMethod(context.Context, *BuyConsumableWithRegisteredMethodRequest) (*BuyConsumableWithRegisteredMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyConsumableWithRegisteredMethod not implemented")
}
func (UnimplementedPaymentServiceServer) BuySubscription(context.Context, *BuySubscriptionRequest) (*BuySubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuySubscription not implemented")
}
func (UnimplementedPaymentServiceServer) BuySubscriptionWithRegisteredMethod(context.Context, *BuySubscriptionWithRegisteredMethodRequest) (*BuySubscriptionWithRegisteredMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuySubscriptionWithRegisteredMethod not implemented")
}
func (UnimplementedPaymentServiceServer) CancelSubscription(context.Context, *emptypb.Empty) (*CancelSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscription not implemented")
}
func (UnimplementedPaymentServiceServer) UpdatePaymentCard(context.Context, *UpdatePaymentCardRequest) (*UpdatePaymentCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentCard not implemented")
}
func (UnimplementedPaymentServiceServer) BuyOneDayPlanWithCoin(context.Context, *BuyOneDayPlanWithCoinRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyOneDayPlanWithCoin not implemented")
}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_GetCoinPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetCoinPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.PaymentService/GetCoinPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetCoinPlans(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetMemberPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetMemberPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.PaymentService/GetMemberPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetMemberPlans(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.PaymentService/GetPaymentCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentCard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreateSetupIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateSetupIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.PaymentService/CreateSetupIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateSetupIntent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_BuyConsumable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyConsumableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).BuyConsumable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.PaymentService/BuyConsumable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).BuyConsumable(ctx, req.(*BuyConsumableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_BuyConsumableWithRegisteredMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyConsumableWithRegisteredMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).BuyConsumableWithRegisteredMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.PaymentService/BuyConsumableWithRegisteredMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).BuyConsumableWithRegisteredMethod(ctx, req.(*BuyConsumableWithRegisteredMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_BuySubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuySubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).BuySubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.PaymentService/BuySubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).BuySubscription(ctx, req.(*BuySubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_BuySubscriptionWithRegisteredMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuySubscriptionWithRegisteredMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).BuySubscriptionWithRegisteredMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.PaymentService/BuySubscriptionWithRegisteredMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).BuySubscriptionWithRegisteredMethod(ctx, req.(*BuySubscriptionWithRegisteredMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CancelSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CancelSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.PaymentService/CancelSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CancelSubscription(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdatePaymentCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdatePaymentCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.PaymentService/UpdatePaymentCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdatePaymentCard(ctx, req.(*UpdatePaymentCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_BuyOneDayPlanWithCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyOneDayPlanWithCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).BuyOneDayPlanWithCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.PaymentService/BuyOneDayPlanWithCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).BuyOneDayPlanWithCoin(ctx, req.(*BuyOneDayPlanWithCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoinPlans",
			Handler:    _PaymentService_GetCoinPlans_Handler,
		},
		{
			MethodName: "GetMemberPlans",
			Handler:    _PaymentService_GetMemberPlans_Handler,
		},
		{
			MethodName: "GetPaymentCard",
			Handler:    _PaymentService_GetPaymentCard_Handler,
		},
		{
			MethodName: "CreateSetupIntent",
			Handler:    _PaymentService_CreateSetupIntent_Handler,
		},
		{
			MethodName: "BuyConsumable",
			Handler:    _PaymentService_BuyConsumable_Handler,
		},
		{
			MethodName: "BuyConsumableWithRegisteredMethod",
			Handler:    _PaymentService_BuyConsumableWithRegisteredMethod_Handler,
		},
		{
			MethodName: "BuySubscription",
			Handler:    _PaymentService_BuySubscription_Handler,
		},
		{
			MethodName: "BuySubscriptionWithRegisteredMethod",
			Handler:    _PaymentService_BuySubscriptionWithRegisteredMethod_Handler,
		},
		{
			MethodName: "CancelSubscription",
			Handler:    _PaymentService_CancelSubscription_Handler,
		},
		{
			MethodName: "UpdatePaymentCard",
			Handler:    _PaymentService_UpdatePaymentCard_Handler,
		},
		{
			MethodName: "BuyOneDayPlanWithCoin",
			Handler:    _PaymentService_BuyOneDayPlanWithCoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/payment.proto",
}
