// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: payment/v1/payment_webhook.proto

package paymentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentWebhookServiceClient is the client API for PaymentWebhookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentWebhookServiceClient interface {
	Webhook(ctx context.Context, in *PaymentWebhookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type paymentWebhookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentWebhookServiceClient(cc grpc.ClientConnInterface) PaymentWebhookServiceClient {
	return &paymentWebhookServiceClient{cc}
}

func (c *paymentWebhookServiceClient) Webhook(ctx context.Context, in *PaymentWebhookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/payment.v1.PaymentWebhookService/Webhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentWebhookServiceServer is the server API for PaymentWebhookService service.
// All implementations should embed UnimplementedPaymentWebhookServiceServer
// for forward compatibility
type PaymentWebhookServiceServer interface {
	Webhook(context.Context, *PaymentWebhookRequest) (*emptypb.Empty, error)
}

// UnimplementedPaymentWebhookServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPaymentWebhookServiceServer struct {
}

func (UnimplementedPaymentWebhookServiceServer) Webhook(context.Context, *PaymentWebhookRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Webhook not implemented")
}

// UnsafePaymentWebhookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentWebhookServiceServer will
// result in compilation errors.
type UnsafePaymentWebhookServiceServer interface {
	mustEmbedUnimplementedPaymentWebhookServiceServer()
}

func RegisterPaymentWebhookServiceServer(s grpc.ServiceRegistrar, srv PaymentWebhookServiceServer) {
	s.RegisterService(&PaymentWebhookService_ServiceDesc, srv)
}

func _PaymentWebhookService_Webhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentWebhookServiceServer).Webhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.PaymentWebhookService/Webhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentWebhookServiceServer).Webhook(ctx, req.(*PaymentWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentWebhookService_ServiceDesc is the grpc.ServiceDesc for PaymentWebhookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentWebhookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1.PaymentWebhookService",
	HandlerType: (*PaymentWebhookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Webhook",
			Handler:    _PaymentWebhookService_Webhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/payment_webhook.proto",
}
