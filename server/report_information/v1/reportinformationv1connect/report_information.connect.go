// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: report_information/v1/report_information.proto

package reportinformationv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/10kn/wink_common/server/report_information/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ReportInformationServiceName is the fully-qualified name of the ReportInformationService service.
	ReportInformationServiceName = "reportinformation.v1.ReportInformationService"
)

// ReportInformationServiceClient is a client for the reportinformation.v1.ReportInformationService
// service.
type ReportInformationServiceClient interface {
	SendReportInformation(context.Context, *connect_go.Request[v1.SendReportInformationRequest]) (*connect_go.Response[emptypb.Empty], error)
	SearchReportInformations(context.Context, *connect_go.Request[v1.SearchReportInformationsRequest]) (*connect_go.Response[v1.SearchReportInformationsResponse], error)
	CheckReportInformation(context.Context, *connect_go.Request[v1.CheckReportInformationRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewReportInformationServiceClient constructs a client for the
// reportinformation.v1.ReportInformationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReportInformationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ReportInformationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &reportInformationServiceClient{
		sendReportInformation: connect_go.NewClient[v1.SendReportInformationRequest, emptypb.Empty](
			httpClient,
			baseURL+"/reportinformation.v1.ReportInformationService/SendReportInformation",
			opts...,
		),
		searchReportInformations: connect_go.NewClient[v1.SearchReportInformationsRequest, v1.SearchReportInformationsResponse](
			httpClient,
			baseURL+"/reportinformation.v1.ReportInformationService/SearchReportInformations",
			opts...,
		),
		checkReportInformation: connect_go.NewClient[v1.CheckReportInformationRequest, emptypb.Empty](
			httpClient,
			baseURL+"/reportinformation.v1.ReportInformationService/CheckReportInformation",
			opts...,
		),
	}
}

// reportInformationServiceClient implements ReportInformationServiceClient.
type reportInformationServiceClient struct {
	sendReportInformation    *connect_go.Client[v1.SendReportInformationRequest, emptypb.Empty]
	searchReportInformations *connect_go.Client[v1.SearchReportInformationsRequest, v1.SearchReportInformationsResponse]
	checkReportInformation   *connect_go.Client[v1.CheckReportInformationRequest, emptypb.Empty]
}

// SendReportInformation calls reportinformation.v1.ReportInformationService.SendReportInformation.
func (c *reportInformationServiceClient) SendReportInformation(ctx context.Context, req *connect_go.Request[v1.SendReportInformationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.sendReportInformation.CallUnary(ctx, req)
}

// SearchReportInformations calls
// reportinformation.v1.ReportInformationService.SearchReportInformations.
func (c *reportInformationServiceClient) SearchReportInformations(ctx context.Context, req *connect_go.Request[v1.SearchReportInformationsRequest]) (*connect_go.Response[v1.SearchReportInformationsResponse], error) {
	return c.searchReportInformations.CallUnary(ctx, req)
}

// CheckReportInformation calls
// reportinformation.v1.ReportInformationService.CheckReportInformation.
func (c *reportInformationServiceClient) CheckReportInformation(ctx context.Context, req *connect_go.Request[v1.CheckReportInformationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.checkReportInformation.CallUnary(ctx, req)
}

// ReportInformationServiceHandler is an implementation of the
// reportinformation.v1.ReportInformationService service.
type ReportInformationServiceHandler interface {
	SendReportInformation(context.Context, *connect_go.Request[v1.SendReportInformationRequest]) (*connect_go.Response[emptypb.Empty], error)
	SearchReportInformations(context.Context, *connect_go.Request[v1.SearchReportInformationsRequest]) (*connect_go.Response[v1.SearchReportInformationsResponse], error)
	CheckReportInformation(context.Context, *connect_go.Request[v1.CheckReportInformationRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewReportInformationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReportInformationServiceHandler(svc ReportInformationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/reportinformation.v1.ReportInformationService/SendReportInformation", connect_go.NewUnaryHandler(
		"/reportinformation.v1.ReportInformationService/SendReportInformation",
		svc.SendReportInformation,
		opts...,
	))
	mux.Handle("/reportinformation.v1.ReportInformationService/SearchReportInformations", connect_go.NewUnaryHandler(
		"/reportinformation.v1.ReportInformationService/SearchReportInformations",
		svc.SearchReportInformations,
		opts...,
	))
	mux.Handle("/reportinformation.v1.ReportInformationService/CheckReportInformation", connect_go.NewUnaryHandler(
		"/reportinformation.v1.ReportInformationService/CheckReportInformation",
		svc.CheckReportInformation,
		opts...,
	))
	return "/reportinformation.v1.ReportInformationService/", mux
}

// UnimplementedReportInformationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReportInformationServiceHandler struct{}

func (UnimplementedReportInformationServiceHandler) SendReportInformation(context.Context, *connect_go.Request[v1.SendReportInformationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("reportinformation.v1.ReportInformationService.SendReportInformation is not implemented"))
}

func (UnimplementedReportInformationServiceHandler) SearchReportInformations(context.Context, *connect_go.Request[v1.SearchReportInformationsRequest]) (*connect_go.Response[v1.SearchReportInformationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("reportinformation.v1.ReportInformationService.SearchReportInformations is not implemented"))
}

func (UnimplementedReportInformationServiceHandler) CheckReportInformation(context.Context, *connect_go.Request[v1.CheckReportInformationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("reportinformation.v1.ReportInformationService.CheckReportInformation is not implemented"))
}
