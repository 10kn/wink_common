// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: coin_balance/v1/coin_balance.proto

package coinbalancev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gisucoinc/ebisuiru-fc-common/server/coin_balance/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CoinBalanceServiceName is the fully-qualified name of the CoinBalanceService service.
	CoinBalanceServiceName = "coinbalance.v1.CoinBalanceService"
)

// CoinBalanceServiceClient is a client for the coinbalance.v1.CoinBalanceService service.
type CoinBalanceServiceClient interface {
	GetOwnCoinBalance(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetOwnCoinBalanceResponse], error)
}

// NewCoinBalanceServiceClient constructs a client for the coinbalance.v1.CoinBalanceService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCoinBalanceServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CoinBalanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &coinBalanceServiceClient{
		getOwnCoinBalance: connect_go.NewClient[emptypb.Empty, v1.GetOwnCoinBalanceResponse](
			httpClient,
			baseURL+"/coinbalance.v1.CoinBalanceService/GetOwnCoinBalance",
			opts...,
		),
	}
}

// coinBalanceServiceClient implements CoinBalanceServiceClient.
type coinBalanceServiceClient struct {
	getOwnCoinBalance *connect_go.Client[emptypb.Empty, v1.GetOwnCoinBalanceResponse]
}

// GetOwnCoinBalance calls coinbalance.v1.CoinBalanceService.GetOwnCoinBalance.
func (c *coinBalanceServiceClient) GetOwnCoinBalance(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetOwnCoinBalanceResponse], error) {
	return c.getOwnCoinBalance.CallUnary(ctx, req)
}

// CoinBalanceServiceHandler is an implementation of the coinbalance.v1.CoinBalanceService service.
type CoinBalanceServiceHandler interface {
	GetOwnCoinBalance(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetOwnCoinBalanceResponse], error)
}

// NewCoinBalanceServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCoinBalanceServiceHandler(svc CoinBalanceServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/coinbalance.v1.CoinBalanceService/GetOwnCoinBalance", connect_go.NewUnaryHandler(
		"/coinbalance.v1.CoinBalanceService/GetOwnCoinBalance",
		svc.GetOwnCoinBalance,
		opts...,
	))
	return "/coinbalance.v1.CoinBalanceService/", mux
}

// UnimplementedCoinBalanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCoinBalanceServiceHandler struct{}

func (UnimplementedCoinBalanceServiceHandler) GetOwnCoinBalance(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetOwnCoinBalanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("coinbalance.v1.CoinBalanceService.GetOwnCoinBalance is not implemented"))
}
