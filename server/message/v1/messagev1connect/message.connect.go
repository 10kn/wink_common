// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: message/v1/message.proto

package messagev1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/10kn/wink_common/server/message/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MessageServiceName is the fully-qualified name of the MessageService service.
	MessageServiceName = "message.v1.MessageService"
)

// MessageServiceClient is a client for the message.v1.MessageService service.
type MessageServiceClient interface {
	SendMessage(context.Context, *connect_go.Request[v1.SendMessageRequest]) (*connect_go.Response[v1.SendMessageResponse], error)
	GetMessages(context.Context, *connect_go.Request[v1.GetMessagesRequest]) (*connect_go.Response[v1.GetMessagesResponse], error)
	GetRooms(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetRoomsResponse], error)
	GetRoom(context.Context, *connect_go.Request[v1.GetRoomRequest]) (*connect_go.Response[v1.GetRoomResponse], error)
	PinRoom(context.Context, *connect_go.Request[v1.PinRoomRequest]) (*connect_go.Response[emptypb.Empty], error)
	UnpinRoom(context.Context, *connect_go.Request[v1.UnpinRoomRequest]) (*connect_go.Response[emptypb.Empty], error)
	HideRoom(context.Context, *connect_go.Request[v1.HideRoomRequest]) (*connect_go.Response[emptypb.Empty], error)
	SearchAdminMessages(context.Context, *connect_go.Request[v1.SearchAdminMessagesRequest]) (*connect_go.Response[v1.SearchAdminMessagesResponse], error)
	DeleteAdminMessages(context.Context, *connect_go.Request[v1.DeleteAdminMessagesRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetSuperWinkMessage(context.Context, *connect_go.Request[v1.GetSuperWinkMessageRequest]) (*connect_go.Response[v1.GetSuperWinkMessageResponse], error)
	CreateRoom(context.Context, *connect_go.Request[v1.CreateRoomRequest]) (*connect_go.Response[v1.CreateRoomResponse], error)
}

// NewMessageServiceClient constructs a client for the message.v1.MessageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MessageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &messageServiceClient{
		sendMessage: connect_go.NewClient[v1.SendMessageRequest, v1.SendMessageResponse](
			httpClient,
			baseURL+"/message.v1.MessageService/SendMessage",
			opts...,
		),
		getMessages: connect_go.NewClient[v1.GetMessagesRequest, v1.GetMessagesResponse](
			httpClient,
			baseURL+"/message.v1.MessageService/GetMessages",
			opts...,
		),
		getRooms: connect_go.NewClient[emptypb.Empty, v1.GetRoomsResponse](
			httpClient,
			baseURL+"/message.v1.MessageService/GetRooms",
			opts...,
		),
		getRoom: connect_go.NewClient[v1.GetRoomRequest, v1.GetRoomResponse](
			httpClient,
			baseURL+"/message.v1.MessageService/GetRoom",
			opts...,
		),
		pinRoom: connect_go.NewClient[v1.PinRoomRequest, emptypb.Empty](
			httpClient,
			baseURL+"/message.v1.MessageService/PinRoom",
			opts...,
		),
		unpinRoom: connect_go.NewClient[v1.UnpinRoomRequest, emptypb.Empty](
			httpClient,
			baseURL+"/message.v1.MessageService/UnpinRoom",
			opts...,
		),
		hideRoom: connect_go.NewClient[v1.HideRoomRequest, emptypb.Empty](
			httpClient,
			baseURL+"/message.v1.MessageService/HideRoom",
			opts...,
		),
		searchAdminMessages: connect_go.NewClient[v1.SearchAdminMessagesRequest, v1.SearchAdminMessagesResponse](
			httpClient,
			baseURL+"/message.v1.MessageService/SearchAdminMessages",
			opts...,
		),
		deleteAdminMessages: connect_go.NewClient[v1.DeleteAdminMessagesRequest, emptypb.Empty](
			httpClient,
			baseURL+"/message.v1.MessageService/DeleteAdminMessages",
			opts...,
		),
		getSuperWinkMessage: connect_go.NewClient[v1.GetSuperWinkMessageRequest, v1.GetSuperWinkMessageResponse](
			httpClient,
			baseURL+"/message.v1.MessageService/GetSuperWinkMessage",
			opts...,
		),
		createRoom: connect_go.NewClient[v1.CreateRoomRequest, v1.CreateRoomResponse](
			httpClient,
			baseURL+"/message.v1.MessageService/CreateRoom",
			opts...,
		),
	}
}

// messageServiceClient implements MessageServiceClient.
type messageServiceClient struct {
	sendMessage         *connect_go.Client[v1.SendMessageRequest, v1.SendMessageResponse]
	getMessages         *connect_go.Client[v1.GetMessagesRequest, v1.GetMessagesResponse]
	getRooms            *connect_go.Client[emptypb.Empty, v1.GetRoomsResponse]
	getRoom             *connect_go.Client[v1.GetRoomRequest, v1.GetRoomResponse]
	pinRoom             *connect_go.Client[v1.PinRoomRequest, emptypb.Empty]
	unpinRoom           *connect_go.Client[v1.UnpinRoomRequest, emptypb.Empty]
	hideRoom            *connect_go.Client[v1.HideRoomRequest, emptypb.Empty]
	searchAdminMessages *connect_go.Client[v1.SearchAdminMessagesRequest, v1.SearchAdminMessagesResponse]
	deleteAdminMessages *connect_go.Client[v1.DeleteAdminMessagesRequest, emptypb.Empty]
	getSuperWinkMessage *connect_go.Client[v1.GetSuperWinkMessageRequest, v1.GetSuperWinkMessageResponse]
	createRoom          *connect_go.Client[v1.CreateRoomRequest, v1.CreateRoomResponse]
}

// SendMessage calls message.v1.MessageService.SendMessage.
func (c *messageServiceClient) SendMessage(ctx context.Context, req *connect_go.Request[v1.SendMessageRequest]) (*connect_go.Response[v1.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// GetMessages calls message.v1.MessageService.GetMessages.
func (c *messageServiceClient) GetMessages(ctx context.Context, req *connect_go.Request[v1.GetMessagesRequest]) (*connect_go.Response[v1.GetMessagesResponse], error) {
	return c.getMessages.CallUnary(ctx, req)
}

// GetRooms calls message.v1.MessageService.GetRooms.
func (c *messageServiceClient) GetRooms(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetRoomsResponse], error) {
	return c.getRooms.CallUnary(ctx, req)
}

// GetRoom calls message.v1.MessageService.GetRoom.
func (c *messageServiceClient) GetRoom(ctx context.Context, req *connect_go.Request[v1.GetRoomRequest]) (*connect_go.Response[v1.GetRoomResponse], error) {
	return c.getRoom.CallUnary(ctx, req)
}

// PinRoom calls message.v1.MessageService.PinRoom.
func (c *messageServiceClient) PinRoom(ctx context.Context, req *connect_go.Request[v1.PinRoomRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.pinRoom.CallUnary(ctx, req)
}

// UnpinRoom calls message.v1.MessageService.UnpinRoom.
func (c *messageServiceClient) UnpinRoom(ctx context.Context, req *connect_go.Request[v1.UnpinRoomRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.unpinRoom.CallUnary(ctx, req)
}

// HideRoom calls message.v1.MessageService.HideRoom.
func (c *messageServiceClient) HideRoom(ctx context.Context, req *connect_go.Request[v1.HideRoomRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.hideRoom.CallUnary(ctx, req)
}

// SearchAdminMessages calls message.v1.MessageService.SearchAdminMessages.
func (c *messageServiceClient) SearchAdminMessages(ctx context.Context, req *connect_go.Request[v1.SearchAdminMessagesRequest]) (*connect_go.Response[v1.SearchAdminMessagesResponse], error) {
	return c.searchAdminMessages.CallUnary(ctx, req)
}

// DeleteAdminMessages calls message.v1.MessageService.DeleteAdminMessages.
func (c *messageServiceClient) DeleteAdminMessages(ctx context.Context, req *connect_go.Request[v1.DeleteAdminMessagesRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteAdminMessages.CallUnary(ctx, req)
}

// GetSuperWinkMessage calls message.v1.MessageService.GetSuperWinkMessage.
func (c *messageServiceClient) GetSuperWinkMessage(ctx context.Context, req *connect_go.Request[v1.GetSuperWinkMessageRequest]) (*connect_go.Response[v1.GetSuperWinkMessageResponse], error) {
	return c.getSuperWinkMessage.CallUnary(ctx, req)
}

// CreateRoom calls message.v1.MessageService.CreateRoom.
func (c *messageServiceClient) CreateRoom(ctx context.Context, req *connect_go.Request[v1.CreateRoomRequest]) (*connect_go.Response[v1.CreateRoomResponse], error) {
	return c.createRoom.CallUnary(ctx, req)
}

// MessageServiceHandler is an implementation of the message.v1.MessageService service.
type MessageServiceHandler interface {
	SendMessage(context.Context, *connect_go.Request[v1.SendMessageRequest]) (*connect_go.Response[v1.SendMessageResponse], error)
	GetMessages(context.Context, *connect_go.Request[v1.GetMessagesRequest]) (*connect_go.Response[v1.GetMessagesResponse], error)
	GetRooms(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetRoomsResponse], error)
	GetRoom(context.Context, *connect_go.Request[v1.GetRoomRequest]) (*connect_go.Response[v1.GetRoomResponse], error)
	PinRoom(context.Context, *connect_go.Request[v1.PinRoomRequest]) (*connect_go.Response[emptypb.Empty], error)
	UnpinRoom(context.Context, *connect_go.Request[v1.UnpinRoomRequest]) (*connect_go.Response[emptypb.Empty], error)
	HideRoom(context.Context, *connect_go.Request[v1.HideRoomRequest]) (*connect_go.Response[emptypb.Empty], error)
	SearchAdminMessages(context.Context, *connect_go.Request[v1.SearchAdminMessagesRequest]) (*connect_go.Response[v1.SearchAdminMessagesResponse], error)
	DeleteAdminMessages(context.Context, *connect_go.Request[v1.DeleteAdminMessagesRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetSuperWinkMessage(context.Context, *connect_go.Request[v1.GetSuperWinkMessageRequest]) (*connect_go.Response[v1.GetSuperWinkMessageResponse], error)
	CreateRoom(context.Context, *connect_go.Request[v1.CreateRoomRequest]) (*connect_go.Response[v1.CreateRoomResponse], error)
}

// NewMessageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageServiceHandler(svc MessageServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/message.v1.MessageService/SendMessage", connect_go.NewUnaryHandler(
		"/message.v1.MessageService/SendMessage",
		svc.SendMessage,
		opts...,
	))
	mux.Handle("/message.v1.MessageService/GetMessages", connect_go.NewUnaryHandler(
		"/message.v1.MessageService/GetMessages",
		svc.GetMessages,
		opts...,
	))
	mux.Handle("/message.v1.MessageService/GetRooms", connect_go.NewUnaryHandler(
		"/message.v1.MessageService/GetRooms",
		svc.GetRooms,
		opts...,
	))
	mux.Handle("/message.v1.MessageService/GetRoom", connect_go.NewUnaryHandler(
		"/message.v1.MessageService/GetRoom",
		svc.GetRoom,
		opts...,
	))
	mux.Handle("/message.v1.MessageService/PinRoom", connect_go.NewUnaryHandler(
		"/message.v1.MessageService/PinRoom",
		svc.PinRoom,
		opts...,
	))
	mux.Handle("/message.v1.MessageService/UnpinRoom", connect_go.NewUnaryHandler(
		"/message.v1.MessageService/UnpinRoom",
		svc.UnpinRoom,
		opts...,
	))
	mux.Handle("/message.v1.MessageService/HideRoom", connect_go.NewUnaryHandler(
		"/message.v1.MessageService/HideRoom",
		svc.HideRoom,
		opts...,
	))
	mux.Handle("/message.v1.MessageService/SearchAdminMessages", connect_go.NewUnaryHandler(
		"/message.v1.MessageService/SearchAdminMessages",
		svc.SearchAdminMessages,
		opts...,
	))
	mux.Handle("/message.v1.MessageService/DeleteAdminMessages", connect_go.NewUnaryHandler(
		"/message.v1.MessageService/DeleteAdminMessages",
		svc.DeleteAdminMessages,
		opts...,
	))
	mux.Handle("/message.v1.MessageService/GetSuperWinkMessage", connect_go.NewUnaryHandler(
		"/message.v1.MessageService/GetSuperWinkMessage",
		svc.GetSuperWinkMessage,
		opts...,
	))
	mux.Handle("/message.v1.MessageService/CreateRoom", connect_go.NewUnaryHandler(
		"/message.v1.MessageService/CreateRoom",
		svc.CreateRoom,
		opts...,
	))
	return "/message.v1.MessageService/", mux
}

// UnimplementedMessageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageServiceHandler struct{}

func (UnimplementedMessageServiceHandler) SendMessage(context.Context, *connect_go.Request[v1.SendMessageRequest]) (*connect_go.Response[v1.SendMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("message.v1.MessageService.SendMessage is not implemented"))
}

func (UnimplementedMessageServiceHandler) GetMessages(context.Context, *connect_go.Request[v1.GetMessagesRequest]) (*connect_go.Response[v1.GetMessagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("message.v1.MessageService.GetMessages is not implemented"))
}

func (UnimplementedMessageServiceHandler) GetRooms(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetRoomsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("message.v1.MessageService.GetRooms is not implemented"))
}

func (UnimplementedMessageServiceHandler) GetRoom(context.Context, *connect_go.Request[v1.GetRoomRequest]) (*connect_go.Response[v1.GetRoomResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("message.v1.MessageService.GetRoom is not implemented"))
}

func (UnimplementedMessageServiceHandler) PinRoom(context.Context, *connect_go.Request[v1.PinRoomRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("message.v1.MessageService.PinRoom is not implemented"))
}

func (UnimplementedMessageServiceHandler) UnpinRoom(context.Context, *connect_go.Request[v1.UnpinRoomRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("message.v1.MessageService.UnpinRoom is not implemented"))
}

func (UnimplementedMessageServiceHandler) HideRoom(context.Context, *connect_go.Request[v1.HideRoomRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("message.v1.MessageService.HideRoom is not implemented"))
}

func (UnimplementedMessageServiceHandler) SearchAdminMessages(context.Context, *connect_go.Request[v1.SearchAdminMessagesRequest]) (*connect_go.Response[v1.SearchAdminMessagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("message.v1.MessageService.SearchAdminMessages is not implemented"))
}

func (UnimplementedMessageServiceHandler) DeleteAdminMessages(context.Context, *connect_go.Request[v1.DeleteAdminMessagesRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("message.v1.MessageService.DeleteAdminMessages is not implemented"))
}

func (UnimplementedMessageServiceHandler) GetSuperWinkMessage(context.Context, *connect_go.Request[v1.GetSuperWinkMessageRequest]) (*connect_go.Response[v1.GetSuperWinkMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("message.v1.MessageService.GetSuperWinkMessage is not implemented"))
}

func (UnimplementedMessageServiceHandler) CreateRoom(context.Context, *connect_go.Request[v1.CreateRoomRequest]) (*connect_go.Response[v1.CreateRoomResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("message.v1.MessageService.CreateRoom is not implemented"))
}
