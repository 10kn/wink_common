// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: notification_settings/v1/notification_settings.proto

package notificationsettingsv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gisucoinc/ebisuiru-fc-common/server/notification_settings/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// NotificationSettingsServiceName is the fully-qualified name of the NotificationSettingsService
	// service.
	NotificationSettingsServiceName = "notificationsettings.v1.NotificationSettingsService"
)

// NotificationSettingsServiceClient is a client for the
// notificationsettings.v1.NotificationSettingsService service.
type NotificationSettingsServiceClient interface {
	GetNotificationSettings(context.Context, *connect_go.Request[v1.GetNotificationSettingsRequest]) (*connect_go.Response[v1.GetNotificationSettingsResponse], error)
	UpdateNotificationSettings(context.Context, *connect_go.Request[v1.UpdateNotificationSettingsRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewNotificationSettingsServiceClient constructs a client for the
// notificationsettings.v1.NotificationSettingsService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationSettingsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) NotificationSettingsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notificationSettingsServiceClient{
		getNotificationSettings: connect_go.NewClient[v1.GetNotificationSettingsRequest, v1.GetNotificationSettingsResponse](
			httpClient,
			baseURL+"/notificationsettings.v1.NotificationSettingsService/GetNotificationSettings",
			opts...,
		),
		updateNotificationSettings: connect_go.NewClient[v1.UpdateNotificationSettingsRequest, emptypb.Empty](
			httpClient,
			baseURL+"/notificationsettings.v1.NotificationSettingsService/UpdateNotificationSettings",
			opts...,
		),
	}
}

// notificationSettingsServiceClient implements NotificationSettingsServiceClient.
type notificationSettingsServiceClient struct {
	getNotificationSettings    *connect_go.Client[v1.GetNotificationSettingsRequest, v1.GetNotificationSettingsResponse]
	updateNotificationSettings *connect_go.Client[v1.UpdateNotificationSettingsRequest, emptypb.Empty]
}

// GetNotificationSettings calls
// notificationsettings.v1.NotificationSettingsService.GetNotificationSettings.
func (c *notificationSettingsServiceClient) GetNotificationSettings(ctx context.Context, req *connect_go.Request[v1.GetNotificationSettingsRequest]) (*connect_go.Response[v1.GetNotificationSettingsResponse], error) {
	return c.getNotificationSettings.CallUnary(ctx, req)
}

// UpdateNotificationSettings calls
// notificationsettings.v1.NotificationSettingsService.UpdateNotificationSettings.
func (c *notificationSettingsServiceClient) UpdateNotificationSettings(ctx context.Context, req *connect_go.Request[v1.UpdateNotificationSettingsRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updateNotificationSettings.CallUnary(ctx, req)
}

// NotificationSettingsServiceHandler is an implementation of the
// notificationsettings.v1.NotificationSettingsService service.
type NotificationSettingsServiceHandler interface {
	GetNotificationSettings(context.Context, *connect_go.Request[v1.GetNotificationSettingsRequest]) (*connect_go.Response[v1.GetNotificationSettingsResponse], error)
	UpdateNotificationSettings(context.Context, *connect_go.Request[v1.UpdateNotificationSettingsRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewNotificationSettingsServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationSettingsServiceHandler(svc NotificationSettingsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/notificationsettings.v1.NotificationSettingsService/GetNotificationSettings", connect_go.NewUnaryHandler(
		"/notificationsettings.v1.NotificationSettingsService/GetNotificationSettings",
		svc.GetNotificationSettings,
		opts...,
	))
	mux.Handle("/notificationsettings.v1.NotificationSettingsService/UpdateNotificationSettings", connect_go.NewUnaryHandler(
		"/notificationsettings.v1.NotificationSettingsService/UpdateNotificationSettings",
		svc.UpdateNotificationSettings,
		opts...,
	))
	return "/notificationsettings.v1.NotificationSettingsService/", mux
}

// UnimplementedNotificationSettingsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationSettingsServiceHandler struct{}

func (UnimplementedNotificationSettingsServiceHandler) GetNotificationSettings(context.Context, *connect_go.Request[v1.GetNotificationSettingsRequest]) (*connect_go.Response[v1.GetNotificationSettingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("notificationsettings.v1.NotificationSettingsService.GetNotificationSettings is not implemented"))
}

func (UnimplementedNotificationSettingsServiceHandler) UpdateNotificationSettings(context.Context, *connect_go.Request[v1.UpdateNotificationSettingsRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("notificationsettings.v1.NotificationSettingsService.UpdateNotificationSettings is not implemented"))
}
