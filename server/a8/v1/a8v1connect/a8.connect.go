// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: a8/v1/a8.proto

package a8v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gisucoinc/ebisuiru-fc-common/server/a8/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// A8ServiceName is the fully-qualified name of the A8Service service.
	A8ServiceName = "a8.v1.A8Service"
)

// A8ServiceClient is a client for the a8.v1.A8Service service.
type A8ServiceClient interface {
	SubmitA8(context.Context, *connect_go.Request[v1.SubmitA8Request]) (*connect_go.Response[v1.SubmitA8Response], error)
}

// NewA8ServiceClient constructs a client for the a8.v1.A8Service service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewA8ServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) A8ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &a8ServiceClient{
		submitA8: connect_go.NewClient[v1.SubmitA8Request, v1.SubmitA8Response](
			httpClient,
			baseURL+"/a8.v1.A8Service/SubmitA8",
			opts...,
		),
	}
}

// a8ServiceClient implements A8ServiceClient.
type a8ServiceClient struct {
	submitA8 *connect_go.Client[v1.SubmitA8Request, v1.SubmitA8Response]
}

// SubmitA8 calls a8.v1.A8Service.SubmitA8.
func (c *a8ServiceClient) SubmitA8(ctx context.Context, req *connect_go.Request[v1.SubmitA8Request]) (*connect_go.Response[v1.SubmitA8Response], error) {
	return c.submitA8.CallUnary(ctx, req)
}

// A8ServiceHandler is an implementation of the a8.v1.A8Service service.
type A8ServiceHandler interface {
	SubmitA8(context.Context, *connect_go.Request[v1.SubmitA8Request]) (*connect_go.Response[v1.SubmitA8Response], error)
}

// NewA8ServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewA8ServiceHandler(svc A8ServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/a8.v1.A8Service/SubmitA8", connect_go.NewUnaryHandler(
		"/a8.v1.A8Service/SubmitA8",
		svc.SubmitA8,
		opts...,
	))
	return "/a8.v1.A8Service/", mux
}

// UnimplementedA8ServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedA8ServiceHandler struct{}

func (UnimplementedA8ServiceHandler) SubmitA8(context.Context, *connect_go.Request[v1.SubmitA8Request]) (*connect_go.Response[v1.SubmitA8Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("a8.v1.A8Service.SubmitA8 is not implemented"))
}
