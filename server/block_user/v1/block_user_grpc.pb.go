// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: block_user/v1/block_user.proto

package blockuserv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockUserServiceClient is the client API for BlockUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockUserServiceClient interface {
	BlockUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBlockUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBlockUsersResponse, error)
	UnblockUser(ctx context.Context, in *UnblockUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type blockUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockUserServiceClient(cc grpc.ClientConnInterface) BlockUserServiceClient {
	return &blockUserServiceClient{cc}
}

func (c *blockUserServiceClient) BlockUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/blockuser.v1.BlockUserService/BlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockUserServiceClient) GetBlockUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBlockUsersResponse, error) {
	out := new(GetBlockUsersResponse)
	err := c.cc.Invoke(ctx, "/blockuser.v1.BlockUserService/GetBlockUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockUserServiceClient) UnblockUser(ctx context.Context, in *UnblockUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/blockuser.v1.BlockUserService/UnblockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockUserServiceServer is the server API for BlockUserService service.
// All implementations should embed UnimplementedBlockUserServiceServer
// for forward compatibility
type BlockUserServiceServer interface {
	BlockUser(context.Context, *BlockUserRequest) (*emptypb.Empty, error)
	GetBlockUsers(context.Context, *emptypb.Empty) (*GetBlockUsersResponse, error)
	UnblockUser(context.Context, *UnblockUserRequest) (*emptypb.Empty, error)
}

// UnimplementedBlockUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBlockUserServiceServer struct {
}

func (UnimplementedBlockUserServiceServer) BlockUser(context.Context, *BlockUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedBlockUserServiceServer) GetBlockUsers(context.Context, *emptypb.Empty) (*GetBlockUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockUsers not implemented")
}
func (UnimplementedBlockUserServiceServer) UnblockUser(context.Context, *UnblockUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUser not implemented")
}

// UnsafeBlockUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockUserServiceServer will
// result in compilation errors.
type UnsafeBlockUserServiceServer interface {
	mustEmbedUnimplementedBlockUserServiceServer()
}

func RegisterBlockUserServiceServer(s grpc.ServiceRegistrar, srv BlockUserServiceServer) {
	s.RegisterService(&BlockUserService_ServiceDesc, srv)
}

func _BlockUserService_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockUserServiceServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockuser.v1.BlockUserService/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockUserServiceServer).BlockUser(ctx, req.(*BlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockUserService_GetBlockUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockUserServiceServer).GetBlockUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockuser.v1.BlockUserService/GetBlockUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockUserServiceServer).GetBlockUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockUserService_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockUserServiceServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockuser.v1.BlockUserService/UnblockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockUserServiceServer).UnblockUser(ctx, req.(*UnblockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockUserService_ServiceDesc is the grpc.ServiceDesc for BlockUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockuser.v1.BlockUserService",
	HandlerType: (*BlockUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlockUser",
			Handler:    _BlockUserService_BlockUser_Handler,
		},
		{
			MethodName: "GetBlockUsers",
			Handler:    _BlockUserService_GetBlockUsers_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _BlockUserService_UnblockUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block_user/v1/block_user.proto",
}
