// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: block_user/v1/block_user.proto

package blockuserv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/10kn/wink_common/server/block_user/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BlockUserServiceName is the fully-qualified name of the BlockUserService service.
	BlockUserServiceName = "blockuser.v1.BlockUserService"
)

// BlockUserServiceClient is a client for the blockuser.v1.BlockUserService service.
type BlockUserServiceClient interface {
	BlockUser(context.Context, *connect_go.Request[v1.BlockUserRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetBlockUsers(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetBlockUsersResponse], error)
	UnblockUser(context.Context, *connect_go.Request[v1.UnblockUserRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewBlockUserServiceClient constructs a client for the blockuser.v1.BlockUserService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBlockUserServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BlockUserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &blockUserServiceClient{
		blockUser: connect_go.NewClient[v1.BlockUserRequest, emptypb.Empty](
			httpClient,
			baseURL+"/blockuser.v1.BlockUserService/BlockUser",
			opts...,
		),
		getBlockUsers: connect_go.NewClient[emptypb.Empty, v1.GetBlockUsersResponse](
			httpClient,
			baseURL+"/blockuser.v1.BlockUserService/GetBlockUsers",
			opts...,
		),
		unblockUser: connect_go.NewClient[v1.UnblockUserRequest, emptypb.Empty](
			httpClient,
			baseURL+"/blockuser.v1.BlockUserService/UnblockUser",
			opts...,
		),
	}
}

// blockUserServiceClient implements BlockUserServiceClient.
type blockUserServiceClient struct {
	blockUser     *connect_go.Client[v1.BlockUserRequest, emptypb.Empty]
	getBlockUsers *connect_go.Client[emptypb.Empty, v1.GetBlockUsersResponse]
	unblockUser   *connect_go.Client[v1.UnblockUserRequest, emptypb.Empty]
}

// BlockUser calls blockuser.v1.BlockUserService.BlockUser.
func (c *blockUserServiceClient) BlockUser(ctx context.Context, req *connect_go.Request[v1.BlockUserRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.blockUser.CallUnary(ctx, req)
}

// GetBlockUsers calls blockuser.v1.BlockUserService.GetBlockUsers.
func (c *blockUserServiceClient) GetBlockUsers(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetBlockUsersResponse], error) {
	return c.getBlockUsers.CallUnary(ctx, req)
}

// UnblockUser calls blockuser.v1.BlockUserService.UnblockUser.
func (c *blockUserServiceClient) UnblockUser(ctx context.Context, req *connect_go.Request[v1.UnblockUserRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.unblockUser.CallUnary(ctx, req)
}

// BlockUserServiceHandler is an implementation of the blockuser.v1.BlockUserService service.
type BlockUserServiceHandler interface {
	BlockUser(context.Context, *connect_go.Request[v1.BlockUserRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetBlockUsers(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetBlockUsersResponse], error)
	UnblockUser(context.Context, *connect_go.Request[v1.UnblockUserRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewBlockUserServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBlockUserServiceHandler(svc BlockUserServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/blockuser.v1.BlockUserService/BlockUser", connect_go.NewUnaryHandler(
		"/blockuser.v1.BlockUserService/BlockUser",
		svc.BlockUser,
		opts...,
	))
	mux.Handle("/blockuser.v1.BlockUserService/GetBlockUsers", connect_go.NewUnaryHandler(
		"/blockuser.v1.BlockUserService/GetBlockUsers",
		svc.GetBlockUsers,
		opts...,
	))
	mux.Handle("/blockuser.v1.BlockUserService/UnblockUser", connect_go.NewUnaryHandler(
		"/blockuser.v1.BlockUserService/UnblockUser",
		svc.UnblockUser,
		opts...,
	))
	return "/blockuser.v1.BlockUserService/", mux
}

// UnimplementedBlockUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBlockUserServiceHandler struct{}

func (UnimplementedBlockUserServiceHandler) BlockUser(context.Context, *connect_go.Request[v1.BlockUserRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blockuser.v1.BlockUserService.BlockUser is not implemented"))
}

func (UnimplementedBlockUserServiceHandler) GetBlockUsers(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetBlockUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blockuser.v1.BlockUserService.GetBlockUsers is not implemented"))
}

func (UnimplementedBlockUserServiceHandler) UnblockUser(context.Context, *connect_go.Request[v1.UnblockUserRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blockuser.v1.BlockUserService.UnblockUser is not implemented"))
}
