// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: notification/v1/notification.proto

package notificationv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gisucoinc/ebisuiru-fc-common/server/notification/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "notification.v1.NotificationService"
)

// NotificationServiceClient is a client for the notification.v1.NotificationService service.
type NotificationServiceClient interface {
	SendNotification(context.Context, *connect_go.Request[v1.SendNotificationRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetNotifications(context.Context, *connect_go.Request[v1.GetNotificationsRequest]) (*connect_go.Response[v1.GetNotificationsResponse], error)
	GetNotification(context.Context, *connect_go.Request[v1.GetNotificationRequest]) (*connect_go.Response[v1.GetNotificationResponse], error)
	SearchNotifications(context.Context, *connect_go.Request[v1.SearchNotificationsRequest]) (*connect_go.Response[v1.SearchNotificationsResponse], error)
	GetNotificationCategories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetNotificationCategoriesResponse], error)
}

// NewNotificationServiceClient constructs a client for the notification.v1.NotificationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notificationServiceClient{
		sendNotification: connect_go.NewClient[v1.SendNotificationRequest, emptypb.Empty](
			httpClient,
			baseURL+"/notification.v1.NotificationService/SendNotification",
			opts...,
		),
		getNotifications: connect_go.NewClient[v1.GetNotificationsRequest, v1.GetNotificationsResponse](
			httpClient,
			baseURL+"/notification.v1.NotificationService/GetNotifications",
			opts...,
		),
		getNotification: connect_go.NewClient[v1.GetNotificationRequest, v1.GetNotificationResponse](
			httpClient,
			baseURL+"/notification.v1.NotificationService/GetNotification",
			opts...,
		),
		searchNotifications: connect_go.NewClient[v1.SearchNotificationsRequest, v1.SearchNotificationsResponse](
			httpClient,
			baseURL+"/notification.v1.NotificationService/SearchNotifications",
			opts...,
		),
		getNotificationCategories: connect_go.NewClient[emptypb.Empty, v1.GetNotificationCategoriesResponse](
			httpClient,
			baseURL+"/notification.v1.NotificationService/GetNotificationCategories",
			opts...,
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	sendNotification          *connect_go.Client[v1.SendNotificationRequest, emptypb.Empty]
	getNotifications          *connect_go.Client[v1.GetNotificationsRequest, v1.GetNotificationsResponse]
	getNotification           *connect_go.Client[v1.GetNotificationRequest, v1.GetNotificationResponse]
	searchNotifications       *connect_go.Client[v1.SearchNotificationsRequest, v1.SearchNotificationsResponse]
	getNotificationCategories *connect_go.Client[emptypb.Empty, v1.GetNotificationCategoriesResponse]
}

// SendNotification calls notification.v1.NotificationService.SendNotification.
func (c *notificationServiceClient) SendNotification(ctx context.Context, req *connect_go.Request[v1.SendNotificationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.sendNotification.CallUnary(ctx, req)
}

// GetNotifications calls notification.v1.NotificationService.GetNotifications.
func (c *notificationServiceClient) GetNotifications(ctx context.Context, req *connect_go.Request[v1.GetNotificationsRequest]) (*connect_go.Response[v1.GetNotificationsResponse], error) {
	return c.getNotifications.CallUnary(ctx, req)
}

// GetNotification calls notification.v1.NotificationService.GetNotification.
func (c *notificationServiceClient) GetNotification(ctx context.Context, req *connect_go.Request[v1.GetNotificationRequest]) (*connect_go.Response[v1.GetNotificationResponse], error) {
	return c.getNotification.CallUnary(ctx, req)
}

// SearchNotifications calls notification.v1.NotificationService.SearchNotifications.
func (c *notificationServiceClient) SearchNotifications(ctx context.Context, req *connect_go.Request[v1.SearchNotificationsRequest]) (*connect_go.Response[v1.SearchNotificationsResponse], error) {
	return c.searchNotifications.CallUnary(ctx, req)
}

// GetNotificationCategories calls notification.v1.NotificationService.GetNotificationCategories.
func (c *notificationServiceClient) GetNotificationCategories(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetNotificationCategoriesResponse], error) {
	return c.getNotificationCategories.CallUnary(ctx, req)
}

// NotificationServiceHandler is an implementation of the notification.v1.NotificationService
// service.
type NotificationServiceHandler interface {
	SendNotification(context.Context, *connect_go.Request[v1.SendNotificationRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetNotifications(context.Context, *connect_go.Request[v1.GetNotificationsRequest]) (*connect_go.Response[v1.GetNotificationsResponse], error)
	GetNotification(context.Context, *connect_go.Request[v1.GetNotificationRequest]) (*connect_go.Response[v1.GetNotificationResponse], error)
	SearchNotifications(context.Context, *connect_go.Request[v1.SearchNotificationsRequest]) (*connect_go.Response[v1.SearchNotificationsResponse], error)
	GetNotificationCategories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetNotificationCategoriesResponse], error)
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/notification.v1.NotificationService/SendNotification", connect_go.NewUnaryHandler(
		"/notification.v1.NotificationService/SendNotification",
		svc.SendNotification,
		opts...,
	))
	mux.Handle("/notification.v1.NotificationService/GetNotifications", connect_go.NewUnaryHandler(
		"/notification.v1.NotificationService/GetNotifications",
		svc.GetNotifications,
		opts...,
	))
	mux.Handle("/notification.v1.NotificationService/GetNotification", connect_go.NewUnaryHandler(
		"/notification.v1.NotificationService/GetNotification",
		svc.GetNotification,
		opts...,
	))
	mux.Handle("/notification.v1.NotificationService/SearchNotifications", connect_go.NewUnaryHandler(
		"/notification.v1.NotificationService/SearchNotifications",
		svc.SearchNotifications,
		opts...,
	))
	mux.Handle("/notification.v1.NotificationService/GetNotificationCategories", connect_go.NewUnaryHandler(
		"/notification.v1.NotificationService/GetNotificationCategories",
		svc.GetNotificationCategories,
		opts...,
	))
	return "/notification.v1.NotificationService/", mux
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) SendNotification(context.Context, *connect_go.Request[v1.SendNotificationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("notification.v1.NotificationService.SendNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) GetNotifications(context.Context, *connect_go.Request[v1.GetNotificationsRequest]) (*connect_go.Response[v1.GetNotificationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("notification.v1.NotificationService.GetNotifications is not implemented"))
}

func (UnimplementedNotificationServiceHandler) GetNotification(context.Context, *connect_go.Request[v1.GetNotificationRequest]) (*connect_go.Response[v1.GetNotificationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("notification.v1.NotificationService.GetNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SearchNotifications(context.Context, *connect_go.Request[v1.SearchNotificationsRequest]) (*connect_go.Response[v1.SearchNotificationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("notification.v1.NotificationService.SearchNotifications is not implemented"))
}

func (UnimplementedNotificationServiceHandler) GetNotificationCategories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetNotificationCategoriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("notification.v1.NotificationService.GetNotificationCategories is not implemented"))
}
