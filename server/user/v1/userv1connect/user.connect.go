// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user.proto

package userv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/10kn/wink_common/server/user/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "user.v1.UserService"
)

// UserServiceClient is a client for the user.v1.UserService service.
type UserServiceClient interface {
	// メタデータのauthorizationに含まれるtokenから識別したユーザーを返却する。
	// 見つからない場合は `5: CodeNotFound` エラーを返却する。
	CurrentUser(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CurrentUserResponse], error)
	GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error)
	QuitUser(context.Context, *connect_go.Request[v1.QuitUserRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetOwnMemberStatus(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetOwnMemberStatusResponse], error)
	GetAdminUser(context.Context, *connect_go.Request[v1.GetAdminUserRequest]) (*connect_go.Response[v1.GetAdminUserResponse], error)
	UpdateAdminUser(context.Context, *connect_go.Request[v1.UpdateAdminUserRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteAdminUser(context.Context, *connect_go.Request[v1.DeleteAdminUserRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetNotificationCount(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetNotificationCountResponse], error)
}

// NewUserServiceClient constructs a client for the user.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		currentUser: connect_go.NewClient[emptypb.Empty, v1.CurrentUserResponse](
			httpClient,
			baseURL+"/user.v1.UserService/CurrentUser",
			opts...,
		),
		getUser: connect_go.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+"/user.v1.UserService/GetUser",
			opts...,
		),
		quitUser: connect_go.NewClient[v1.QuitUserRequest, emptypb.Empty](
			httpClient,
			baseURL+"/user.v1.UserService/QuitUser",
			opts...,
		),
		getOwnMemberStatus: connect_go.NewClient[emptypb.Empty, v1.GetOwnMemberStatusResponse](
			httpClient,
			baseURL+"/user.v1.UserService/GetOwnMemberStatus",
			opts...,
		),
		getAdminUser: connect_go.NewClient[v1.GetAdminUserRequest, v1.GetAdminUserResponse](
			httpClient,
			baseURL+"/user.v1.UserService/GetAdminUser",
			opts...,
		),
		updateAdminUser: connect_go.NewClient[v1.UpdateAdminUserRequest, emptypb.Empty](
			httpClient,
			baseURL+"/user.v1.UserService/UpdateAdminUser",
			opts...,
		),
		deleteAdminUser: connect_go.NewClient[v1.DeleteAdminUserRequest, emptypb.Empty](
			httpClient,
			baseURL+"/user.v1.UserService/DeleteAdminUser",
			opts...,
		),
		getNotificationCount: connect_go.NewClient[emptypb.Empty, v1.GetNotificationCountResponse](
			httpClient,
			baseURL+"/user.v1.UserService/GetNotificationCount",
			opts...,
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	currentUser          *connect_go.Client[emptypb.Empty, v1.CurrentUserResponse]
	getUser              *connect_go.Client[v1.GetUserRequest, v1.GetUserResponse]
	quitUser             *connect_go.Client[v1.QuitUserRequest, emptypb.Empty]
	getOwnMemberStatus   *connect_go.Client[emptypb.Empty, v1.GetOwnMemberStatusResponse]
	getAdminUser         *connect_go.Client[v1.GetAdminUserRequest, v1.GetAdminUserResponse]
	updateAdminUser      *connect_go.Client[v1.UpdateAdminUserRequest, emptypb.Empty]
	deleteAdminUser      *connect_go.Client[v1.DeleteAdminUserRequest, emptypb.Empty]
	getNotificationCount *connect_go.Client[emptypb.Empty, v1.GetNotificationCountResponse]
}

// CurrentUser calls user.v1.UserService.CurrentUser.
func (c *userServiceClient) CurrentUser(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CurrentUserResponse], error) {
	return c.currentUser.CallUnary(ctx, req)
}

// GetUser calls user.v1.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// QuitUser calls user.v1.UserService.QuitUser.
func (c *userServiceClient) QuitUser(ctx context.Context, req *connect_go.Request[v1.QuitUserRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.quitUser.CallUnary(ctx, req)
}

// GetOwnMemberStatus calls user.v1.UserService.GetOwnMemberStatus.
func (c *userServiceClient) GetOwnMemberStatus(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetOwnMemberStatusResponse], error) {
	return c.getOwnMemberStatus.CallUnary(ctx, req)
}

// GetAdminUser calls user.v1.UserService.GetAdminUser.
func (c *userServiceClient) GetAdminUser(ctx context.Context, req *connect_go.Request[v1.GetAdminUserRequest]) (*connect_go.Response[v1.GetAdminUserResponse], error) {
	return c.getAdminUser.CallUnary(ctx, req)
}

// UpdateAdminUser calls user.v1.UserService.UpdateAdminUser.
func (c *userServiceClient) UpdateAdminUser(ctx context.Context, req *connect_go.Request[v1.UpdateAdminUserRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updateAdminUser.CallUnary(ctx, req)
}

// DeleteAdminUser calls user.v1.UserService.DeleteAdminUser.
func (c *userServiceClient) DeleteAdminUser(ctx context.Context, req *connect_go.Request[v1.DeleteAdminUserRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteAdminUser.CallUnary(ctx, req)
}

// GetNotificationCount calls user.v1.UserService.GetNotificationCount.
func (c *userServiceClient) GetNotificationCount(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetNotificationCountResponse], error) {
	return c.getNotificationCount.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the user.v1.UserService service.
type UserServiceHandler interface {
	// メタデータのauthorizationに含まれるtokenから識別したユーザーを返却する。
	// 見つからない場合は `5: CodeNotFound` エラーを返却する。
	CurrentUser(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CurrentUserResponse], error)
	GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error)
	QuitUser(context.Context, *connect_go.Request[v1.QuitUserRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetOwnMemberStatus(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetOwnMemberStatusResponse], error)
	GetAdminUser(context.Context, *connect_go.Request[v1.GetAdminUserRequest]) (*connect_go.Response[v1.GetAdminUserResponse], error)
	UpdateAdminUser(context.Context, *connect_go.Request[v1.UpdateAdminUserRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteAdminUser(context.Context, *connect_go.Request[v1.DeleteAdminUserRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetNotificationCount(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetNotificationCountResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/user.v1.UserService/CurrentUser", connect_go.NewUnaryHandler(
		"/user.v1.UserService/CurrentUser",
		svc.CurrentUser,
		opts...,
	))
	mux.Handle("/user.v1.UserService/GetUser", connect_go.NewUnaryHandler(
		"/user.v1.UserService/GetUser",
		svc.GetUser,
		opts...,
	))
	mux.Handle("/user.v1.UserService/QuitUser", connect_go.NewUnaryHandler(
		"/user.v1.UserService/QuitUser",
		svc.QuitUser,
		opts...,
	))
	mux.Handle("/user.v1.UserService/GetOwnMemberStatus", connect_go.NewUnaryHandler(
		"/user.v1.UserService/GetOwnMemberStatus",
		svc.GetOwnMemberStatus,
		opts...,
	))
	mux.Handle("/user.v1.UserService/GetAdminUser", connect_go.NewUnaryHandler(
		"/user.v1.UserService/GetAdminUser",
		svc.GetAdminUser,
		opts...,
	))
	mux.Handle("/user.v1.UserService/UpdateAdminUser", connect_go.NewUnaryHandler(
		"/user.v1.UserService/UpdateAdminUser",
		svc.UpdateAdminUser,
		opts...,
	))
	mux.Handle("/user.v1.UserService/DeleteAdminUser", connect_go.NewUnaryHandler(
		"/user.v1.UserService/DeleteAdminUser",
		svc.DeleteAdminUser,
		opts...,
	))
	mux.Handle("/user.v1.UserService/GetNotificationCount", connect_go.NewUnaryHandler(
		"/user.v1.UserService/GetNotificationCount",
		svc.GetNotificationCount,
		opts...,
	))
	return "/user.v1.UserService/", mux
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) CurrentUser(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CurrentUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.v1.UserService.CurrentUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.v1.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) QuitUser(context.Context, *connect_go.Request[v1.QuitUserRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.v1.UserService.QuitUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetOwnMemberStatus(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetOwnMemberStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.v1.UserService.GetOwnMemberStatus is not implemented"))
}

func (UnimplementedUserServiceHandler) GetAdminUser(context.Context, *connect_go.Request[v1.GetAdminUserRequest]) (*connect_go.Response[v1.GetAdminUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.v1.UserService.GetAdminUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateAdminUser(context.Context, *connect_go.Request[v1.UpdateAdminUserRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.v1.UserService.UpdateAdminUser is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteAdminUser(context.Context, *connect_go.Request[v1.DeleteAdminUserRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.v1.UserService.DeleteAdminUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetNotificationCount(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetNotificationCountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.v1.UserService.GetNotificationCount is not implemented"))
}
