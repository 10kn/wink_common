// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/auth.proto

package authv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/10kn/wink_common/server/auth/v1"
	v11 "github.com/10kn/wink_common/server/user/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.v1.AuthService"
)

// AuthServiceClient is a client for the auth.v1.AuthService service.
type AuthServiceClient interface {
	// rpc SignUp(SignUpRequest) returns (google.protobuf.Empty);
	SignUp(context.Context, *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v11.CurrentUserResponse], error)
	// rpc SignIn(SignInRequest) returns (google.protobuf.Empty);
	SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v11.CurrentUserResponse], error)
	ExistsUserWithUid(context.Context, *connect_go.Request[v1.ExistsUserWithUidRequest]) (*connect_go.Response[v1.ExistsUserWithUidResponse], error)
	AdminSignUp(context.Context, *connect_go.Request[v1.AdminSignUpRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewAuthServiceClient constructs a client for the auth.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		signUp: connect_go.NewClient[v1.SignUpRequest, v11.CurrentUserResponse](
			httpClient,
			baseURL+"/auth.v1.AuthService/SignUp",
			opts...,
		),
		signIn: connect_go.NewClient[v1.SignInRequest, v11.CurrentUserResponse](
			httpClient,
			baseURL+"/auth.v1.AuthService/SignIn",
			opts...,
		),
		existsUserWithUid: connect_go.NewClient[v1.ExistsUserWithUidRequest, v1.ExistsUserWithUidResponse](
			httpClient,
			baseURL+"/auth.v1.AuthService/ExistsUserWithUid",
			opts...,
		),
		adminSignUp: connect_go.NewClient[v1.AdminSignUpRequest, emptypb.Empty](
			httpClient,
			baseURL+"/auth.v1.AuthService/AdminSignUp",
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	signUp            *connect_go.Client[v1.SignUpRequest, v11.CurrentUserResponse]
	signIn            *connect_go.Client[v1.SignInRequest, v11.CurrentUserResponse]
	existsUserWithUid *connect_go.Client[v1.ExistsUserWithUidRequest, v1.ExistsUserWithUidResponse]
	adminSignUp       *connect_go.Client[v1.AdminSignUpRequest, emptypb.Empty]
}

// SignUp calls auth.v1.AuthService.SignUp.
func (c *authServiceClient) SignUp(ctx context.Context, req *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v11.CurrentUserResponse], error) {
	return c.signUp.CallUnary(ctx, req)
}

// SignIn calls auth.v1.AuthService.SignIn.
func (c *authServiceClient) SignIn(ctx context.Context, req *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v11.CurrentUserResponse], error) {
	return c.signIn.CallUnary(ctx, req)
}

// ExistsUserWithUid calls auth.v1.AuthService.ExistsUserWithUid.
func (c *authServiceClient) ExistsUserWithUid(ctx context.Context, req *connect_go.Request[v1.ExistsUserWithUidRequest]) (*connect_go.Response[v1.ExistsUserWithUidResponse], error) {
	return c.existsUserWithUid.CallUnary(ctx, req)
}

// AdminSignUp calls auth.v1.AuthService.AdminSignUp.
func (c *authServiceClient) AdminSignUp(ctx context.Context, req *connect_go.Request[v1.AdminSignUpRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.adminSignUp.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.v1.AuthService service.
type AuthServiceHandler interface {
	// rpc SignUp(SignUpRequest) returns (google.protobuf.Empty);
	SignUp(context.Context, *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v11.CurrentUserResponse], error)
	// rpc SignIn(SignInRequest) returns (google.protobuf.Empty);
	SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v11.CurrentUserResponse], error)
	ExistsUserWithUid(context.Context, *connect_go.Request[v1.ExistsUserWithUidRequest]) (*connect_go.Response[v1.ExistsUserWithUidResponse], error)
	AdminSignUp(context.Context, *connect_go.Request[v1.AdminSignUpRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/auth.v1.AuthService/SignUp", connect_go.NewUnaryHandler(
		"/auth.v1.AuthService/SignUp",
		svc.SignUp,
		opts...,
	))
	mux.Handle("/auth.v1.AuthService/SignIn", connect_go.NewUnaryHandler(
		"/auth.v1.AuthService/SignIn",
		svc.SignIn,
		opts...,
	))
	mux.Handle("/auth.v1.AuthService/ExistsUserWithUid", connect_go.NewUnaryHandler(
		"/auth.v1.AuthService/ExistsUserWithUid",
		svc.ExistsUserWithUid,
		opts...,
	))
	mux.Handle("/auth.v1.AuthService/AdminSignUp", connect_go.NewUnaryHandler(
		"/auth.v1.AuthService/AdminSignUp",
		svc.AdminSignUp,
		opts...,
	))
	return "/auth.v1.AuthService/", mux
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) SignUp(context.Context, *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v11.CurrentUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.SignUp is not implemented"))
}

func (UnimplementedAuthServiceHandler) SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v11.CurrentUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.SignIn is not implemented"))
}

func (UnimplementedAuthServiceHandler) ExistsUserWithUid(context.Context, *connect_go.Request[v1.ExistsUserWithUidRequest]) (*connect_go.Response[v1.ExistsUserWithUidResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.ExistsUserWithUid is not implemented"))
}

func (UnimplementedAuthServiceHandler) AdminSignUp(context.Context, *connect_go.Request[v1.AdminSignUpRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.AdminSignUp is not implemented"))
}
