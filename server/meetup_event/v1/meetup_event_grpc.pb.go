// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: meetup_event/v1/meetup_event.proto

package meetupeventv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeetupEventServiceClient is the client API for MeetupEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeetupEventServiceClient interface {
	CreateMeetupEvent(ctx context.Context, in *CreateMeetupEventRequest, opts ...grpc.CallOption) (*CreateMeetupEventResponse, error)
	GetMeetupEvent(ctx context.Context, in *GetMeetupEventRequest, opts ...grpc.CallOption) (*GetMeetupEventResponse, error)
	UpdateMeetupEvent(ctx context.Context, in *UpdateMeetupEventRequest, opts ...grpc.CallOption) (*UpdateMeetupEventResponse, error)
	DeleteMeetupEvent(ctx context.Context, in *DeleteMeetupEventRequest, opts ...grpc.CallOption) (*DeleteMeetupEventResponse, error)
	ListMeetupEvent(ctx context.Context, in *ListMeetupEventRequest, opts ...grpc.CallOption) (*ListMeetupEventResponse, error)
	GetHashTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetHashTagsResponse, error)
	GetAreas(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAreasResponse, error)
	CreatePrice(ctx context.Context, in *CreatePriceRequest, opts ...grpc.CallOption) (*CreatePriceResponse, error)
	UpdatePrice(ctx context.Context, in *UpdatePriceRequest, opts ...grpc.CallOption) (*UpdatePriceResponse, error)
	DeletePrice(ctx context.Context, in *DeletePriceRequest, opts ...grpc.CallOption) (*DeletePriceResponse, error)
	CreateDetail(ctx context.Context, in *CreateDetailRequest, opts ...grpc.CallOption) (*CreateDetailResponse, error)
	UpdateDetail(ctx context.Context, in *UpdateDetailRequest, opts ...grpc.CallOption) (*UpdateDetailResponse, error)
	DeleteDetail(ctx context.Context, in *DeleteDetailRequest, opts ...grpc.CallOption) (*DeleteDetailResponse, error)
	BookMeetupEvent(ctx context.Context, in *BookMeetupEventRequest, opts ...grpc.CallOption) (*BookMeetupEventResponse, error)
	CancelMeetupEvent(ctx context.Context, in *CancelMeetupEventRequest, opts ...grpc.CallOption) (*CancelMeetupEventResponse, error)
	ListMeetupEventAdmin(ctx context.Context, in *ListMeetupEventAdminRequest, opts ...grpc.CallOption) (*ListMeetupEventAdminResponse, error)
	GetMeetupEventAdmin(ctx context.Context, in *GetMeetupEventAdminRequest, opts ...grpc.CallOption) (*GetMeetupEventAdminResponse, error)
	GetPriceAdmin(ctx context.Context, in *GetPriceAdminRequest, opts ...grpc.CallOption) (*GetPriceAdminResponse, error)
	GetDetailAdmin(ctx context.Context, in *GetDetailAdminRequest, opts ...grpc.CallOption) (*GetDetailAdminResponse, error)
	ListDetailAdmin(ctx context.Context, in *ListDetailAdminRequest, opts ...grpc.CallOption) (*ListDetailAdminResponse, error)
	ListMeetupEventForUser(ctx context.Context, in *ListMeetupEventForUserRequest, opts ...grpc.CallOption) (*ListMeetupEventForUserResponse, error)
	ListUserBookedMeetupEvent(ctx context.Context, in *ListUserBookedMeetupEventRequest, opts ...grpc.CallOption) (*ListUserBookedMeetupEventResponse, error)
}

type meetupEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeetupEventServiceClient(cc grpc.ClientConnInterface) MeetupEventServiceClient {
	return &meetupEventServiceClient{cc}
}

func (c *meetupEventServiceClient) CreateMeetupEvent(ctx context.Context, in *CreateMeetupEventRequest, opts ...grpc.CallOption) (*CreateMeetupEventResponse, error) {
	out := new(CreateMeetupEventResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/CreateMeetupEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) GetMeetupEvent(ctx context.Context, in *GetMeetupEventRequest, opts ...grpc.CallOption) (*GetMeetupEventResponse, error) {
	out := new(GetMeetupEventResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/GetMeetupEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) UpdateMeetupEvent(ctx context.Context, in *UpdateMeetupEventRequest, opts ...grpc.CallOption) (*UpdateMeetupEventResponse, error) {
	out := new(UpdateMeetupEventResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/UpdateMeetupEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) DeleteMeetupEvent(ctx context.Context, in *DeleteMeetupEventRequest, opts ...grpc.CallOption) (*DeleteMeetupEventResponse, error) {
	out := new(DeleteMeetupEventResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/DeleteMeetupEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) ListMeetupEvent(ctx context.Context, in *ListMeetupEventRequest, opts ...grpc.CallOption) (*ListMeetupEventResponse, error) {
	out := new(ListMeetupEventResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/ListMeetupEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) GetHashTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetHashTagsResponse, error) {
	out := new(GetHashTagsResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/GetHashTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) GetAreas(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAreasResponse, error) {
	out := new(GetAreasResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/GetAreas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) CreatePrice(ctx context.Context, in *CreatePriceRequest, opts ...grpc.CallOption) (*CreatePriceResponse, error) {
	out := new(CreatePriceResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/CreatePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) UpdatePrice(ctx context.Context, in *UpdatePriceRequest, opts ...grpc.CallOption) (*UpdatePriceResponse, error) {
	out := new(UpdatePriceResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/UpdatePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) DeletePrice(ctx context.Context, in *DeletePriceRequest, opts ...grpc.CallOption) (*DeletePriceResponse, error) {
	out := new(DeletePriceResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/DeletePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) CreateDetail(ctx context.Context, in *CreateDetailRequest, opts ...grpc.CallOption) (*CreateDetailResponse, error) {
	out := new(CreateDetailResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/CreateDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) UpdateDetail(ctx context.Context, in *UpdateDetailRequest, opts ...grpc.CallOption) (*UpdateDetailResponse, error) {
	out := new(UpdateDetailResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/UpdateDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) DeleteDetail(ctx context.Context, in *DeleteDetailRequest, opts ...grpc.CallOption) (*DeleteDetailResponse, error) {
	out := new(DeleteDetailResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/DeleteDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) BookMeetupEvent(ctx context.Context, in *BookMeetupEventRequest, opts ...grpc.CallOption) (*BookMeetupEventResponse, error) {
	out := new(BookMeetupEventResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/BookMeetupEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) CancelMeetupEvent(ctx context.Context, in *CancelMeetupEventRequest, opts ...grpc.CallOption) (*CancelMeetupEventResponse, error) {
	out := new(CancelMeetupEventResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/CancelMeetupEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) ListMeetupEventAdmin(ctx context.Context, in *ListMeetupEventAdminRequest, opts ...grpc.CallOption) (*ListMeetupEventAdminResponse, error) {
	out := new(ListMeetupEventAdminResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/ListMeetupEventAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) GetMeetupEventAdmin(ctx context.Context, in *GetMeetupEventAdminRequest, opts ...grpc.CallOption) (*GetMeetupEventAdminResponse, error) {
	out := new(GetMeetupEventAdminResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/GetMeetupEventAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) GetPriceAdmin(ctx context.Context, in *GetPriceAdminRequest, opts ...grpc.CallOption) (*GetPriceAdminResponse, error) {
	out := new(GetPriceAdminResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/GetPriceAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) GetDetailAdmin(ctx context.Context, in *GetDetailAdminRequest, opts ...grpc.CallOption) (*GetDetailAdminResponse, error) {
	out := new(GetDetailAdminResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/GetDetailAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) ListDetailAdmin(ctx context.Context, in *ListDetailAdminRequest, opts ...grpc.CallOption) (*ListDetailAdminResponse, error) {
	out := new(ListDetailAdminResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/ListDetailAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) ListMeetupEventForUser(ctx context.Context, in *ListMeetupEventForUserRequest, opts ...grpc.CallOption) (*ListMeetupEventForUserResponse, error) {
	out := new(ListMeetupEventForUserResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/ListMeetupEventForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetupEventServiceClient) ListUserBookedMeetupEvent(ctx context.Context, in *ListUserBookedMeetupEventRequest, opts ...grpc.CallOption) (*ListUserBookedMeetupEventResponse, error) {
	out := new(ListUserBookedMeetupEventResponse)
	err := c.cc.Invoke(ctx, "/event.v1.MeetupEventService/ListUserBookedMeetupEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeetupEventServiceServer is the server API for MeetupEventService service.
// All implementations should embed UnimplementedMeetupEventServiceServer
// for forward compatibility
type MeetupEventServiceServer interface {
	CreateMeetupEvent(context.Context, *CreateMeetupEventRequest) (*CreateMeetupEventResponse, error)
	GetMeetupEvent(context.Context, *GetMeetupEventRequest) (*GetMeetupEventResponse, error)
	UpdateMeetupEvent(context.Context, *UpdateMeetupEventRequest) (*UpdateMeetupEventResponse, error)
	DeleteMeetupEvent(context.Context, *DeleteMeetupEventRequest) (*DeleteMeetupEventResponse, error)
	ListMeetupEvent(context.Context, *ListMeetupEventRequest) (*ListMeetupEventResponse, error)
	GetHashTags(context.Context, *emptypb.Empty) (*GetHashTagsResponse, error)
	GetAreas(context.Context, *emptypb.Empty) (*GetAreasResponse, error)
	CreatePrice(context.Context, *CreatePriceRequest) (*CreatePriceResponse, error)
	UpdatePrice(context.Context, *UpdatePriceRequest) (*UpdatePriceResponse, error)
	DeletePrice(context.Context, *DeletePriceRequest) (*DeletePriceResponse, error)
	CreateDetail(context.Context, *CreateDetailRequest) (*CreateDetailResponse, error)
	UpdateDetail(context.Context, *UpdateDetailRequest) (*UpdateDetailResponse, error)
	DeleteDetail(context.Context, *DeleteDetailRequest) (*DeleteDetailResponse, error)
	BookMeetupEvent(context.Context, *BookMeetupEventRequest) (*BookMeetupEventResponse, error)
	CancelMeetupEvent(context.Context, *CancelMeetupEventRequest) (*CancelMeetupEventResponse, error)
	ListMeetupEventAdmin(context.Context, *ListMeetupEventAdminRequest) (*ListMeetupEventAdminResponse, error)
	GetMeetupEventAdmin(context.Context, *GetMeetupEventAdminRequest) (*GetMeetupEventAdminResponse, error)
	GetPriceAdmin(context.Context, *GetPriceAdminRequest) (*GetPriceAdminResponse, error)
	GetDetailAdmin(context.Context, *GetDetailAdminRequest) (*GetDetailAdminResponse, error)
	ListDetailAdmin(context.Context, *ListDetailAdminRequest) (*ListDetailAdminResponse, error)
	ListMeetupEventForUser(context.Context, *ListMeetupEventForUserRequest) (*ListMeetupEventForUserResponse, error)
	ListUserBookedMeetupEvent(context.Context, *ListUserBookedMeetupEventRequest) (*ListUserBookedMeetupEventResponse, error)
}

// UnimplementedMeetupEventServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMeetupEventServiceServer struct {
}

func (UnimplementedMeetupEventServiceServer) CreateMeetupEvent(context.Context, *CreateMeetupEventRequest) (*CreateMeetupEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeetupEvent not implemented")
}
func (UnimplementedMeetupEventServiceServer) GetMeetupEvent(context.Context, *GetMeetupEventRequest) (*GetMeetupEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeetupEvent not implemented")
}
func (UnimplementedMeetupEventServiceServer) UpdateMeetupEvent(context.Context, *UpdateMeetupEventRequest) (*UpdateMeetupEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeetupEvent not implemented")
}
func (UnimplementedMeetupEventServiceServer) DeleteMeetupEvent(context.Context, *DeleteMeetupEventRequest) (*DeleteMeetupEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeetupEvent not implemented")
}
func (UnimplementedMeetupEventServiceServer) ListMeetupEvent(context.Context, *ListMeetupEventRequest) (*ListMeetupEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeetupEvent not implemented")
}
func (UnimplementedMeetupEventServiceServer) GetHashTags(context.Context, *emptypb.Empty) (*GetHashTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashTags not implemented")
}
func (UnimplementedMeetupEventServiceServer) GetAreas(context.Context, *emptypb.Empty) (*GetAreasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreas not implemented")
}
func (UnimplementedMeetupEventServiceServer) CreatePrice(context.Context, *CreatePriceRequest) (*CreatePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrice not implemented")
}
func (UnimplementedMeetupEventServiceServer) UpdatePrice(context.Context, *UpdatePriceRequest) (*UpdatePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrice not implemented")
}
func (UnimplementedMeetupEventServiceServer) DeletePrice(context.Context, *DeletePriceRequest) (*DeletePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrice not implemented")
}
func (UnimplementedMeetupEventServiceServer) CreateDetail(context.Context, *CreateDetailRequest) (*CreateDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDetail not implemented")
}
func (UnimplementedMeetupEventServiceServer) UpdateDetail(context.Context, *UpdateDetailRequest) (*UpdateDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDetail not implemented")
}
func (UnimplementedMeetupEventServiceServer) DeleteDetail(context.Context, *DeleteDetailRequest) (*DeleteDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDetail not implemented")
}
func (UnimplementedMeetupEventServiceServer) BookMeetupEvent(context.Context, *BookMeetupEventRequest) (*BookMeetupEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookMeetupEvent not implemented")
}
func (UnimplementedMeetupEventServiceServer) CancelMeetupEvent(context.Context, *CancelMeetupEventRequest) (*CancelMeetupEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMeetupEvent not implemented")
}
func (UnimplementedMeetupEventServiceServer) ListMeetupEventAdmin(context.Context, *ListMeetupEventAdminRequest) (*ListMeetupEventAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeetupEventAdmin not implemented")
}
func (UnimplementedMeetupEventServiceServer) GetMeetupEventAdmin(context.Context, *GetMeetupEventAdminRequest) (*GetMeetupEventAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeetupEventAdmin not implemented")
}
func (UnimplementedMeetupEventServiceServer) GetPriceAdmin(context.Context, *GetPriceAdminRequest) (*GetPriceAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceAdmin not implemented")
}
func (UnimplementedMeetupEventServiceServer) GetDetailAdmin(context.Context, *GetDetailAdminRequest) (*GetDetailAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailAdmin not implemented")
}
func (UnimplementedMeetupEventServiceServer) ListDetailAdmin(context.Context, *ListDetailAdminRequest) (*ListDetailAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDetailAdmin not implemented")
}
func (UnimplementedMeetupEventServiceServer) ListMeetupEventForUser(context.Context, *ListMeetupEventForUserRequest) (*ListMeetupEventForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeetupEventForUser not implemented")
}
func (UnimplementedMeetupEventServiceServer) ListUserBookedMeetupEvent(context.Context, *ListUserBookedMeetupEventRequest) (*ListUserBookedMeetupEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserBookedMeetupEvent not implemented")
}

// UnsafeMeetupEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeetupEventServiceServer will
// result in compilation errors.
type UnsafeMeetupEventServiceServer interface {
	mustEmbedUnimplementedMeetupEventServiceServer()
}

func RegisterMeetupEventServiceServer(s grpc.ServiceRegistrar, srv MeetupEventServiceServer) {
	s.RegisterService(&MeetupEventService_ServiceDesc, srv)
}

func _MeetupEventService_CreateMeetupEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeetupEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).CreateMeetupEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/CreateMeetupEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).CreateMeetupEvent(ctx, req.(*CreateMeetupEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_GetMeetupEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeetupEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).GetMeetupEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/GetMeetupEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).GetMeetupEvent(ctx, req.(*GetMeetupEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_UpdateMeetupEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeetupEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).UpdateMeetupEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/UpdateMeetupEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).UpdateMeetupEvent(ctx, req.(*UpdateMeetupEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_DeleteMeetupEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMeetupEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).DeleteMeetupEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/DeleteMeetupEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).DeleteMeetupEvent(ctx, req.(*DeleteMeetupEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_ListMeetupEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeetupEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).ListMeetupEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/ListMeetupEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).ListMeetupEvent(ctx, req.(*ListMeetupEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_GetHashTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).GetHashTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/GetHashTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).GetHashTags(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_GetAreas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).GetAreas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/GetAreas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).GetAreas(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_CreatePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).CreatePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/CreatePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).CreatePrice(ctx, req.(*CreatePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_UpdatePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).UpdatePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/UpdatePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).UpdatePrice(ctx, req.(*UpdatePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_DeletePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).DeletePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/DeletePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).DeletePrice(ctx, req.(*DeletePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_CreateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).CreateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/CreateDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).CreateDetail(ctx, req.(*CreateDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_UpdateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).UpdateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/UpdateDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).UpdateDetail(ctx, req.(*UpdateDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_DeleteDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).DeleteDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/DeleteDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).DeleteDetail(ctx, req.(*DeleteDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_BookMeetupEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookMeetupEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).BookMeetupEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/BookMeetupEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).BookMeetupEvent(ctx, req.(*BookMeetupEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_CancelMeetupEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMeetupEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).CancelMeetupEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/CancelMeetupEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).CancelMeetupEvent(ctx, req.(*CancelMeetupEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_ListMeetupEventAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeetupEventAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).ListMeetupEventAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/ListMeetupEventAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).ListMeetupEventAdmin(ctx, req.(*ListMeetupEventAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_GetMeetupEventAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeetupEventAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).GetMeetupEventAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/GetMeetupEventAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).GetMeetupEventAdmin(ctx, req.(*GetMeetupEventAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_GetPriceAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).GetPriceAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/GetPriceAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).GetPriceAdmin(ctx, req.(*GetPriceAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_GetDetailAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).GetDetailAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/GetDetailAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).GetDetailAdmin(ctx, req.(*GetDetailAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_ListDetailAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDetailAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).ListDetailAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/ListDetailAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).ListDetailAdmin(ctx, req.(*ListDetailAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_ListMeetupEventForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeetupEventForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).ListMeetupEventForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/ListMeetupEventForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).ListMeetupEventForUser(ctx, req.(*ListMeetupEventForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetupEventService_ListUserBookedMeetupEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserBookedMeetupEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetupEventServiceServer).ListUserBookedMeetupEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.v1.MeetupEventService/ListUserBookedMeetupEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetupEventServiceServer).ListUserBookedMeetupEvent(ctx, req.(*ListUserBookedMeetupEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeetupEventService_ServiceDesc is the grpc.ServiceDesc for MeetupEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeetupEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.v1.MeetupEventService",
	HandlerType: (*MeetupEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMeetupEvent",
			Handler:    _MeetupEventService_CreateMeetupEvent_Handler,
		},
		{
			MethodName: "GetMeetupEvent",
			Handler:    _MeetupEventService_GetMeetupEvent_Handler,
		},
		{
			MethodName: "UpdateMeetupEvent",
			Handler:    _MeetupEventService_UpdateMeetupEvent_Handler,
		},
		{
			MethodName: "DeleteMeetupEvent",
			Handler:    _MeetupEventService_DeleteMeetupEvent_Handler,
		},
		{
			MethodName: "ListMeetupEvent",
			Handler:    _MeetupEventService_ListMeetupEvent_Handler,
		},
		{
			MethodName: "GetHashTags",
			Handler:    _MeetupEventService_GetHashTags_Handler,
		},
		{
			MethodName: "GetAreas",
			Handler:    _MeetupEventService_GetAreas_Handler,
		},
		{
			MethodName: "CreatePrice",
			Handler:    _MeetupEventService_CreatePrice_Handler,
		},
		{
			MethodName: "UpdatePrice",
			Handler:    _MeetupEventService_UpdatePrice_Handler,
		},
		{
			MethodName: "DeletePrice",
			Handler:    _MeetupEventService_DeletePrice_Handler,
		},
		{
			MethodName: "CreateDetail",
			Handler:    _MeetupEventService_CreateDetail_Handler,
		},
		{
			MethodName: "UpdateDetail",
			Handler:    _MeetupEventService_UpdateDetail_Handler,
		},
		{
			MethodName: "DeleteDetail",
			Handler:    _MeetupEventService_DeleteDetail_Handler,
		},
		{
			MethodName: "BookMeetupEvent",
			Handler:    _MeetupEventService_BookMeetupEvent_Handler,
		},
		{
			MethodName: "CancelMeetupEvent",
			Handler:    _MeetupEventService_CancelMeetupEvent_Handler,
		},
		{
			MethodName: "ListMeetupEventAdmin",
			Handler:    _MeetupEventService_ListMeetupEventAdmin_Handler,
		},
		{
			MethodName: "GetMeetupEventAdmin",
			Handler:    _MeetupEventService_GetMeetupEventAdmin_Handler,
		},
		{
			MethodName: "GetPriceAdmin",
			Handler:    _MeetupEventService_GetPriceAdmin_Handler,
		},
		{
			MethodName: "GetDetailAdmin",
			Handler:    _MeetupEventService_GetDetailAdmin_Handler,
		},
		{
			MethodName: "ListDetailAdmin",
			Handler:    _MeetupEventService_ListDetailAdmin_Handler,
		},
		{
			MethodName: "ListMeetupEventForUser",
			Handler:    _MeetupEventService_ListMeetupEventForUser_Handler,
		},
		{
			MethodName: "ListUserBookedMeetupEvent",
			Handler:    _MeetupEventService_ListUserBookedMeetupEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meetup_event/v1/meetup_event.proto",
}
