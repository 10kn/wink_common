// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: meetup_event/v1/meetup_event.proto

package meetupeventv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/10kn/wink_common/server/meetup_event/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MeetupEventServiceName is the fully-qualified name of the MeetupEventService service.
	MeetupEventServiceName = "event.v1.MeetupEventService"
)

// MeetupEventServiceClient is a client for the event.v1.MeetupEventService service.
type MeetupEventServiceClient interface {
	CreateMeetupEvent(context.Context, *connect_go.Request[v1.CreateMeetupEventRequest]) (*connect_go.Response[v1.CreateMeetupEventResponse], error)
	GetMeetupEvent(context.Context, *connect_go.Request[v1.GetMeetupEventRequest]) (*connect_go.Response[v1.GetMeetupEventResponse], error)
	UpdateMeetupEvent(context.Context, *connect_go.Request[v1.UpdateMeetupEventRequest]) (*connect_go.Response[v1.UpdateMeetupEventResponse], error)
	DeleteMeetupEvent(context.Context, *connect_go.Request[v1.DeleteMeetupEventRequest]) (*connect_go.Response[v1.DeleteMeetupEventResponse], error)
	ListMeetupEvent(context.Context, *connect_go.Request[v1.ListMeetupEventRequest]) (*connect_go.Response[v1.ListMeetupEventResponse], error)
	GetHashTags(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetHashTagsResponse], error)
	GetAreas(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetAreasResponse], error)
	CreatePrice(context.Context, *connect_go.Request[v1.CreatePriceRequest]) (*connect_go.Response[v1.CreatePriceResponse], error)
	UpdatePrice(context.Context, *connect_go.Request[v1.UpdatePriceRequest]) (*connect_go.Response[v1.UpdatePriceResponse], error)
	DeletePrice(context.Context, *connect_go.Request[v1.DeletePriceRequest]) (*connect_go.Response[v1.DeletePriceResponse], error)
	CreateDetail(context.Context, *connect_go.Request[v1.CreateDetailRequest]) (*connect_go.Response[v1.CreateDetailResponse], error)
	UpdateDetail(context.Context, *connect_go.Request[v1.UpdateDetailRequest]) (*connect_go.Response[v1.UpdateDetailResponse], error)
	DeleteDetail(context.Context, *connect_go.Request[v1.DeleteDetailRequest]) (*connect_go.Response[v1.DeleteDetailResponse], error)
	BookMeetupEvent(context.Context, *connect_go.Request[v1.BookMeetupEventRequest]) (*connect_go.Response[v1.BookMeetupEventResponse], error)
	CancelMeetupEvent(context.Context, *connect_go.Request[v1.CancelMeetupEventRequest]) (*connect_go.Response[v1.CancelMeetupEventResponse], error)
	ListMeetupEventAdmin(context.Context, *connect_go.Request[v1.ListMeetupEventAdminRequest]) (*connect_go.Response[v1.ListMeetupEventAdminResponse], error)
	GetMeetupEventAdmin(context.Context, *connect_go.Request[v1.GetMeetupEventAdminRequest]) (*connect_go.Response[v1.GetMeetupEventAdminResponse], error)
	GetPriceAdmin(context.Context, *connect_go.Request[v1.GetPriceAdminRequest]) (*connect_go.Response[v1.GetPriceAdminResponse], error)
	GetDetailAdmin(context.Context, *connect_go.Request[v1.GetDetailAdminRequest]) (*connect_go.Response[v1.GetDetailAdminResponse], error)
	ListDetailAdmin(context.Context, *connect_go.Request[v1.ListDetailAdminRequest]) (*connect_go.Response[v1.ListDetailAdminResponse], error)
	ListMeetupEventForUser(context.Context, *connect_go.Request[v1.ListMeetupEventForUserRequest]) (*connect_go.Response[v1.ListMeetupEventForUserResponse], error)
	ListUserBookedMeetupEvent(context.Context, *connect_go.Request[v1.ListUserBookedMeetupEventRequest]) (*connect_go.Response[v1.ListUserBookedMeetupEventResponse], error)
}

// NewMeetupEventServiceClient constructs a client for the event.v1.MeetupEventService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMeetupEventServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MeetupEventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &meetupEventServiceClient{
		createMeetupEvent: connect_go.NewClient[v1.CreateMeetupEventRequest, v1.CreateMeetupEventResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/CreateMeetupEvent",
			opts...,
		),
		getMeetupEvent: connect_go.NewClient[v1.GetMeetupEventRequest, v1.GetMeetupEventResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/GetMeetupEvent",
			opts...,
		),
		updateMeetupEvent: connect_go.NewClient[v1.UpdateMeetupEventRequest, v1.UpdateMeetupEventResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/UpdateMeetupEvent",
			opts...,
		),
		deleteMeetupEvent: connect_go.NewClient[v1.DeleteMeetupEventRequest, v1.DeleteMeetupEventResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/DeleteMeetupEvent",
			opts...,
		),
		listMeetupEvent: connect_go.NewClient[v1.ListMeetupEventRequest, v1.ListMeetupEventResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/ListMeetupEvent",
			opts...,
		),
		getHashTags: connect_go.NewClient[emptypb.Empty, v1.GetHashTagsResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/GetHashTags",
			opts...,
		),
		getAreas: connect_go.NewClient[emptypb.Empty, v1.GetAreasResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/GetAreas",
			opts...,
		),
		createPrice: connect_go.NewClient[v1.CreatePriceRequest, v1.CreatePriceResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/CreatePrice",
			opts...,
		),
		updatePrice: connect_go.NewClient[v1.UpdatePriceRequest, v1.UpdatePriceResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/UpdatePrice",
			opts...,
		),
		deletePrice: connect_go.NewClient[v1.DeletePriceRequest, v1.DeletePriceResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/DeletePrice",
			opts...,
		),
		createDetail: connect_go.NewClient[v1.CreateDetailRequest, v1.CreateDetailResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/CreateDetail",
			opts...,
		),
		updateDetail: connect_go.NewClient[v1.UpdateDetailRequest, v1.UpdateDetailResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/UpdateDetail",
			opts...,
		),
		deleteDetail: connect_go.NewClient[v1.DeleteDetailRequest, v1.DeleteDetailResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/DeleteDetail",
			opts...,
		),
		bookMeetupEvent: connect_go.NewClient[v1.BookMeetupEventRequest, v1.BookMeetupEventResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/BookMeetupEvent",
			opts...,
		),
		cancelMeetupEvent: connect_go.NewClient[v1.CancelMeetupEventRequest, v1.CancelMeetupEventResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/CancelMeetupEvent",
			opts...,
		),
		listMeetupEventAdmin: connect_go.NewClient[v1.ListMeetupEventAdminRequest, v1.ListMeetupEventAdminResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/ListMeetupEventAdmin",
			opts...,
		),
		getMeetupEventAdmin: connect_go.NewClient[v1.GetMeetupEventAdminRequest, v1.GetMeetupEventAdminResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/GetMeetupEventAdmin",
			opts...,
		),
		getPriceAdmin: connect_go.NewClient[v1.GetPriceAdminRequest, v1.GetPriceAdminResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/GetPriceAdmin",
			opts...,
		),
		getDetailAdmin: connect_go.NewClient[v1.GetDetailAdminRequest, v1.GetDetailAdminResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/GetDetailAdmin",
			opts...,
		),
		listDetailAdmin: connect_go.NewClient[v1.ListDetailAdminRequest, v1.ListDetailAdminResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/ListDetailAdmin",
			opts...,
		),
		listMeetupEventForUser: connect_go.NewClient[v1.ListMeetupEventForUserRequest, v1.ListMeetupEventForUserResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/ListMeetupEventForUser",
			opts...,
		),
		listUserBookedMeetupEvent: connect_go.NewClient[v1.ListUserBookedMeetupEventRequest, v1.ListUserBookedMeetupEventResponse](
			httpClient,
			baseURL+"/event.v1.MeetupEventService/ListUserBookedMeetupEvent",
			opts...,
		),
	}
}

// meetupEventServiceClient implements MeetupEventServiceClient.
type meetupEventServiceClient struct {
	createMeetupEvent         *connect_go.Client[v1.CreateMeetupEventRequest, v1.CreateMeetupEventResponse]
	getMeetupEvent            *connect_go.Client[v1.GetMeetupEventRequest, v1.GetMeetupEventResponse]
	updateMeetupEvent         *connect_go.Client[v1.UpdateMeetupEventRequest, v1.UpdateMeetupEventResponse]
	deleteMeetupEvent         *connect_go.Client[v1.DeleteMeetupEventRequest, v1.DeleteMeetupEventResponse]
	listMeetupEvent           *connect_go.Client[v1.ListMeetupEventRequest, v1.ListMeetupEventResponse]
	getHashTags               *connect_go.Client[emptypb.Empty, v1.GetHashTagsResponse]
	getAreas                  *connect_go.Client[emptypb.Empty, v1.GetAreasResponse]
	createPrice               *connect_go.Client[v1.CreatePriceRequest, v1.CreatePriceResponse]
	updatePrice               *connect_go.Client[v1.UpdatePriceRequest, v1.UpdatePriceResponse]
	deletePrice               *connect_go.Client[v1.DeletePriceRequest, v1.DeletePriceResponse]
	createDetail              *connect_go.Client[v1.CreateDetailRequest, v1.CreateDetailResponse]
	updateDetail              *connect_go.Client[v1.UpdateDetailRequest, v1.UpdateDetailResponse]
	deleteDetail              *connect_go.Client[v1.DeleteDetailRequest, v1.DeleteDetailResponse]
	bookMeetupEvent           *connect_go.Client[v1.BookMeetupEventRequest, v1.BookMeetupEventResponse]
	cancelMeetupEvent         *connect_go.Client[v1.CancelMeetupEventRequest, v1.CancelMeetupEventResponse]
	listMeetupEventAdmin      *connect_go.Client[v1.ListMeetupEventAdminRequest, v1.ListMeetupEventAdminResponse]
	getMeetupEventAdmin       *connect_go.Client[v1.GetMeetupEventAdminRequest, v1.GetMeetupEventAdminResponse]
	getPriceAdmin             *connect_go.Client[v1.GetPriceAdminRequest, v1.GetPriceAdminResponse]
	getDetailAdmin            *connect_go.Client[v1.GetDetailAdminRequest, v1.GetDetailAdminResponse]
	listDetailAdmin           *connect_go.Client[v1.ListDetailAdminRequest, v1.ListDetailAdminResponse]
	listMeetupEventForUser    *connect_go.Client[v1.ListMeetupEventForUserRequest, v1.ListMeetupEventForUserResponse]
	listUserBookedMeetupEvent *connect_go.Client[v1.ListUserBookedMeetupEventRequest, v1.ListUserBookedMeetupEventResponse]
}

// CreateMeetupEvent calls event.v1.MeetupEventService.CreateMeetupEvent.
func (c *meetupEventServiceClient) CreateMeetupEvent(ctx context.Context, req *connect_go.Request[v1.CreateMeetupEventRequest]) (*connect_go.Response[v1.CreateMeetupEventResponse], error) {
	return c.createMeetupEvent.CallUnary(ctx, req)
}

// GetMeetupEvent calls event.v1.MeetupEventService.GetMeetupEvent.
func (c *meetupEventServiceClient) GetMeetupEvent(ctx context.Context, req *connect_go.Request[v1.GetMeetupEventRequest]) (*connect_go.Response[v1.GetMeetupEventResponse], error) {
	return c.getMeetupEvent.CallUnary(ctx, req)
}

// UpdateMeetupEvent calls event.v1.MeetupEventService.UpdateMeetupEvent.
func (c *meetupEventServiceClient) UpdateMeetupEvent(ctx context.Context, req *connect_go.Request[v1.UpdateMeetupEventRequest]) (*connect_go.Response[v1.UpdateMeetupEventResponse], error) {
	return c.updateMeetupEvent.CallUnary(ctx, req)
}

// DeleteMeetupEvent calls event.v1.MeetupEventService.DeleteMeetupEvent.
func (c *meetupEventServiceClient) DeleteMeetupEvent(ctx context.Context, req *connect_go.Request[v1.DeleteMeetupEventRequest]) (*connect_go.Response[v1.DeleteMeetupEventResponse], error) {
	return c.deleteMeetupEvent.CallUnary(ctx, req)
}

// ListMeetupEvent calls event.v1.MeetupEventService.ListMeetupEvent.
func (c *meetupEventServiceClient) ListMeetupEvent(ctx context.Context, req *connect_go.Request[v1.ListMeetupEventRequest]) (*connect_go.Response[v1.ListMeetupEventResponse], error) {
	return c.listMeetupEvent.CallUnary(ctx, req)
}

// GetHashTags calls event.v1.MeetupEventService.GetHashTags.
func (c *meetupEventServiceClient) GetHashTags(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetHashTagsResponse], error) {
	return c.getHashTags.CallUnary(ctx, req)
}

// GetAreas calls event.v1.MeetupEventService.GetAreas.
func (c *meetupEventServiceClient) GetAreas(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetAreasResponse], error) {
	return c.getAreas.CallUnary(ctx, req)
}

// CreatePrice calls event.v1.MeetupEventService.CreatePrice.
func (c *meetupEventServiceClient) CreatePrice(ctx context.Context, req *connect_go.Request[v1.CreatePriceRequest]) (*connect_go.Response[v1.CreatePriceResponse], error) {
	return c.createPrice.CallUnary(ctx, req)
}

// UpdatePrice calls event.v1.MeetupEventService.UpdatePrice.
func (c *meetupEventServiceClient) UpdatePrice(ctx context.Context, req *connect_go.Request[v1.UpdatePriceRequest]) (*connect_go.Response[v1.UpdatePriceResponse], error) {
	return c.updatePrice.CallUnary(ctx, req)
}

// DeletePrice calls event.v1.MeetupEventService.DeletePrice.
func (c *meetupEventServiceClient) DeletePrice(ctx context.Context, req *connect_go.Request[v1.DeletePriceRequest]) (*connect_go.Response[v1.DeletePriceResponse], error) {
	return c.deletePrice.CallUnary(ctx, req)
}

// CreateDetail calls event.v1.MeetupEventService.CreateDetail.
func (c *meetupEventServiceClient) CreateDetail(ctx context.Context, req *connect_go.Request[v1.CreateDetailRequest]) (*connect_go.Response[v1.CreateDetailResponse], error) {
	return c.createDetail.CallUnary(ctx, req)
}

// UpdateDetail calls event.v1.MeetupEventService.UpdateDetail.
func (c *meetupEventServiceClient) UpdateDetail(ctx context.Context, req *connect_go.Request[v1.UpdateDetailRequest]) (*connect_go.Response[v1.UpdateDetailResponse], error) {
	return c.updateDetail.CallUnary(ctx, req)
}

// DeleteDetail calls event.v1.MeetupEventService.DeleteDetail.
func (c *meetupEventServiceClient) DeleteDetail(ctx context.Context, req *connect_go.Request[v1.DeleteDetailRequest]) (*connect_go.Response[v1.DeleteDetailResponse], error) {
	return c.deleteDetail.CallUnary(ctx, req)
}

// BookMeetupEvent calls event.v1.MeetupEventService.BookMeetupEvent.
func (c *meetupEventServiceClient) BookMeetupEvent(ctx context.Context, req *connect_go.Request[v1.BookMeetupEventRequest]) (*connect_go.Response[v1.BookMeetupEventResponse], error) {
	return c.bookMeetupEvent.CallUnary(ctx, req)
}

// CancelMeetupEvent calls event.v1.MeetupEventService.CancelMeetupEvent.
func (c *meetupEventServiceClient) CancelMeetupEvent(ctx context.Context, req *connect_go.Request[v1.CancelMeetupEventRequest]) (*connect_go.Response[v1.CancelMeetupEventResponse], error) {
	return c.cancelMeetupEvent.CallUnary(ctx, req)
}

// ListMeetupEventAdmin calls event.v1.MeetupEventService.ListMeetupEventAdmin.
func (c *meetupEventServiceClient) ListMeetupEventAdmin(ctx context.Context, req *connect_go.Request[v1.ListMeetupEventAdminRequest]) (*connect_go.Response[v1.ListMeetupEventAdminResponse], error) {
	return c.listMeetupEventAdmin.CallUnary(ctx, req)
}

// GetMeetupEventAdmin calls event.v1.MeetupEventService.GetMeetupEventAdmin.
func (c *meetupEventServiceClient) GetMeetupEventAdmin(ctx context.Context, req *connect_go.Request[v1.GetMeetupEventAdminRequest]) (*connect_go.Response[v1.GetMeetupEventAdminResponse], error) {
	return c.getMeetupEventAdmin.CallUnary(ctx, req)
}

// GetPriceAdmin calls event.v1.MeetupEventService.GetPriceAdmin.
func (c *meetupEventServiceClient) GetPriceAdmin(ctx context.Context, req *connect_go.Request[v1.GetPriceAdminRequest]) (*connect_go.Response[v1.GetPriceAdminResponse], error) {
	return c.getPriceAdmin.CallUnary(ctx, req)
}

// GetDetailAdmin calls event.v1.MeetupEventService.GetDetailAdmin.
func (c *meetupEventServiceClient) GetDetailAdmin(ctx context.Context, req *connect_go.Request[v1.GetDetailAdminRequest]) (*connect_go.Response[v1.GetDetailAdminResponse], error) {
	return c.getDetailAdmin.CallUnary(ctx, req)
}

// ListDetailAdmin calls event.v1.MeetupEventService.ListDetailAdmin.
func (c *meetupEventServiceClient) ListDetailAdmin(ctx context.Context, req *connect_go.Request[v1.ListDetailAdminRequest]) (*connect_go.Response[v1.ListDetailAdminResponse], error) {
	return c.listDetailAdmin.CallUnary(ctx, req)
}

// ListMeetupEventForUser calls event.v1.MeetupEventService.ListMeetupEventForUser.
func (c *meetupEventServiceClient) ListMeetupEventForUser(ctx context.Context, req *connect_go.Request[v1.ListMeetupEventForUserRequest]) (*connect_go.Response[v1.ListMeetupEventForUserResponse], error) {
	return c.listMeetupEventForUser.CallUnary(ctx, req)
}

// ListUserBookedMeetupEvent calls event.v1.MeetupEventService.ListUserBookedMeetupEvent.
func (c *meetupEventServiceClient) ListUserBookedMeetupEvent(ctx context.Context, req *connect_go.Request[v1.ListUserBookedMeetupEventRequest]) (*connect_go.Response[v1.ListUserBookedMeetupEventResponse], error) {
	return c.listUserBookedMeetupEvent.CallUnary(ctx, req)
}

// MeetupEventServiceHandler is an implementation of the event.v1.MeetupEventService service.
type MeetupEventServiceHandler interface {
	CreateMeetupEvent(context.Context, *connect_go.Request[v1.CreateMeetupEventRequest]) (*connect_go.Response[v1.CreateMeetupEventResponse], error)
	GetMeetupEvent(context.Context, *connect_go.Request[v1.GetMeetupEventRequest]) (*connect_go.Response[v1.GetMeetupEventResponse], error)
	UpdateMeetupEvent(context.Context, *connect_go.Request[v1.UpdateMeetupEventRequest]) (*connect_go.Response[v1.UpdateMeetupEventResponse], error)
	DeleteMeetupEvent(context.Context, *connect_go.Request[v1.DeleteMeetupEventRequest]) (*connect_go.Response[v1.DeleteMeetupEventResponse], error)
	ListMeetupEvent(context.Context, *connect_go.Request[v1.ListMeetupEventRequest]) (*connect_go.Response[v1.ListMeetupEventResponse], error)
	GetHashTags(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetHashTagsResponse], error)
	GetAreas(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetAreasResponse], error)
	CreatePrice(context.Context, *connect_go.Request[v1.CreatePriceRequest]) (*connect_go.Response[v1.CreatePriceResponse], error)
	UpdatePrice(context.Context, *connect_go.Request[v1.UpdatePriceRequest]) (*connect_go.Response[v1.UpdatePriceResponse], error)
	DeletePrice(context.Context, *connect_go.Request[v1.DeletePriceRequest]) (*connect_go.Response[v1.DeletePriceResponse], error)
	CreateDetail(context.Context, *connect_go.Request[v1.CreateDetailRequest]) (*connect_go.Response[v1.CreateDetailResponse], error)
	UpdateDetail(context.Context, *connect_go.Request[v1.UpdateDetailRequest]) (*connect_go.Response[v1.UpdateDetailResponse], error)
	DeleteDetail(context.Context, *connect_go.Request[v1.DeleteDetailRequest]) (*connect_go.Response[v1.DeleteDetailResponse], error)
	BookMeetupEvent(context.Context, *connect_go.Request[v1.BookMeetupEventRequest]) (*connect_go.Response[v1.BookMeetupEventResponse], error)
	CancelMeetupEvent(context.Context, *connect_go.Request[v1.CancelMeetupEventRequest]) (*connect_go.Response[v1.CancelMeetupEventResponse], error)
	ListMeetupEventAdmin(context.Context, *connect_go.Request[v1.ListMeetupEventAdminRequest]) (*connect_go.Response[v1.ListMeetupEventAdminResponse], error)
	GetMeetupEventAdmin(context.Context, *connect_go.Request[v1.GetMeetupEventAdminRequest]) (*connect_go.Response[v1.GetMeetupEventAdminResponse], error)
	GetPriceAdmin(context.Context, *connect_go.Request[v1.GetPriceAdminRequest]) (*connect_go.Response[v1.GetPriceAdminResponse], error)
	GetDetailAdmin(context.Context, *connect_go.Request[v1.GetDetailAdminRequest]) (*connect_go.Response[v1.GetDetailAdminResponse], error)
	ListDetailAdmin(context.Context, *connect_go.Request[v1.ListDetailAdminRequest]) (*connect_go.Response[v1.ListDetailAdminResponse], error)
	ListMeetupEventForUser(context.Context, *connect_go.Request[v1.ListMeetupEventForUserRequest]) (*connect_go.Response[v1.ListMeetupEventForUserResponse], error)
	ListUserBookedMeetupEvent(context.Context, *connect_go.Request[v1.ListUserBookedMeetupEventRequest]) (*connect_go.Response[v1.ListUserBookedMeetupEventResponse], error)
}

// NewMeetupEventServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMeetupEventServiceHandler(svc MeetupEventServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/event.v1.MeetupEventService/CreateMeetupEvent", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/CreateMeetupEvent",
		svc.CreateMeetupEvent,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/GetMeetupEvent", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/GetMeetupEvent",
		svc.GetMeetupEvent,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/UpdateMeetupEvent", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/UpdateMeetupEvent",
		svc.UpdateMeetupEvent,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/DeleteMeetupEvent", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/DeleteMeetupEvent",
		svc.DeleteMeetupEvent,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/ListMeetupEvent", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/ListMeetupEvent",
		svc.ListMeetupEvent,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/GetHashTags", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/GetHashTags",
		svc.GetHashTags,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/GetAreas", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/GetAreas",
		svc.GetAreas,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/CreatePrice", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/CreatePrice",
		svc.CreatePrice,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/UpdatePrice", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/UpdatePrice",
		svc.UpdatePrice,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/DeletePrice", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/DeletePrice",
		svc.DeletePrice,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/CreateDetail", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/CreateDetail",
		svc.CreateDetail,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/UpdateDetail", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/UpdateDetail",
		svc.UpdateDetail,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/DeleteDetail", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/DeleteDetail",
		svc.DeleteDetail,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/BookMeetupEvent", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/BookMeetupEvent",
		svc.BookMeetupEvent,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/CancelMeetupEvent", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/CancelMeetupEvent",
		svc.CancelMeetupEvent,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/ListMeetupEventAdmin", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/ListMeetupEventAdmin",
		svc.ListMeetupEventAdmin,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/GetMeetupEventAdmin", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/GetMeetupEventAdmin",
		svc.GetMeetupEventAdmin,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/GetPriceAdmin", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/GetPriceAdmin",
		svc.GetPriceAdmin,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/GetDetailAdmin", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/GetDetailAdmin",
		svc.GetDetailAdmin,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/ListDetailAdmin", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/ListDetailAdmin",
		svc.ListDetailAdmin,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/ListMeetupEventForUser", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/ListMeetupEventForUser",
		svc.ListMeetupEventForUser,
		opts...,
	))
	mux.Handle("/event.v1.MeetupEventService/ListUserBookedMeetupEvent", connect_go.NewUnaryHandler(
		"/event.v1.MeetupEventService/ListUserBookedMeetupEvent",
		svc.ListUserBookedMeetupEvent,
		opts...,
	))
	return "/event.v1.MeetupEventService/", mux
}

// UnimplementedMeetupEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMeetupEventServiceHandler struct{}

func (UnimplementedMeetupEventServiceHandler) CreateMeetupEvent(context.Context, *connect_go.Request[v1.CreateMeetupEventRequest]) (*connect_go.Response[v1.CreateMeetupEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.CreateMeetupEvent is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) GetMeetupEvent(context.Context, *connect_go.Request[v1.GetMeetupEventRequest]) (*connect_go.Response[v1.GetMeetupEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.GetMeetupEvent is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) UpdateMeetupEvent(context.Context, *connect_go.Request[v1.UpdateMeetupEventRequest]) (*connect_go.Response[v1.UpdateMeetupEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.UpdateMeetupEvent is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) DeleteMeetupEvent(context.Context, *connect_go.Request[v1.DeleteMeetupEventRequest]) (*connect_go.Response[v1.DeleteMeetupEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.DeleteMeetupEvent is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) ListMeetupEvent(context.Context, *connect_go.Request[v1.ListMeetupEventRequest]) (*connect_go.Response[v1.ListMeetupEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.ListMeetupEvent is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) GetHashTags(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetHashTagsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.GetHashTags is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) GetAreas(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetAreasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.GetAreas is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) CreatePrice(context.Context, *connect_go.Request[v1.CreatePriceRequest]) (*connect_go.Response[v1.CreatePriceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.CreatePrice is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) UpdatePrice(context.Context, *connect_go.Request[v1.UpdatePriceRequest]) (*connect_go.Response[v1.UpdatePriceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.UpdatePrice is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) DeletePrice(context.Context, *connect_go.Request[v1.DeletePriceRequest]) (*connect_go.Response[v1.DeletePriceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.DeletePrice is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) CreateDetail(context.Context, *connect_go.Request[v1.CreateDetailRequest]) (*connect_go.Response[v1.CreateDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.CreateDetail is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) UpdateDetail(context.Context, *connect_go.Request[v1.UpdateDetailRequest]) (*connect_go.Response[v1.UpdateDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.UpdateDetail is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) DeleteDetail(context.Context, *connect_go.Request[v1.DeleteDetailRequest]) (*connect_go.Response[v1.DeleteDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.DeleteDetail is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) BookMeetupEvent(context.Context, *connect_go.Request[v1.BookMeetupEventRequest]) (*connect_go.Response[v1.BookMeetupEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.BookMeetupEvent is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) CancelMeetupEvent(context.Context, *connect_go.Request[v1.CancelMeetupEventRequest]) (*connect_go.Response[v1.CancelMeetupEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.CancelMeetupEvent is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) ListMeetupEventAdmin(context.Context, *connect_go.Request[v1.ListMeetupEventAdminRequest]) (*connect_go.Response[v1.ListMeetupEventAdminResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.ListMeetupEventAdmin is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) GetMeetupEventAdmin(context.Context, *connect_go.Request[v1.GetMeetupEventAdminRequest]) (*connect_go.Response[v1.GetMeetupEventAdminResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.GetMeetupEventAdmin is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) GetPriceAdmin(context.Context, *connect_go.Request[v1.GetPriceAdminRequest]) (*connect_go.Response[v1.GetPriceAdminResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.GetPriceAdmin is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) GetDetailAdmin(context.Context, *connect_go.Request[v1.GetDetailAdminRequest]) (*connect_go.Response[v1.GetDetailAdminResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.GetDetailAdmin is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) ListDetailAdmin(context.Context, *connect_go.Request[v1.ListDetailAdminRequest]) (*connect_go.Response[v1.ListDetailAdminResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.ListDetailAdmin is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) ListMeetupEventForUser(context.Context, *connect_go.Request[v1.ListMeetupEventForUserRequest]) (*connect_go.Response[v1.ListMeetupEventForUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.ListMeetupEventForUser is not implemented"))
}

func (UnimplementedMeetupEventServiceHandler) ListUserBookedMeetupEvent(context.Context, *connect_go.Request[v1.ListUserBookedMeetupEventRequest]) (*connect_go.Response[v1.ListUserBookedMeetupEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.MeetupEventService.ListUserBookedMeetupEvent is not implemented"))
}
