// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: user_request/v1/user_request.proto

package user_requestv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserRequestServiceClient is the client API for UserRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRequestServiceClient interface {
	CreateRequestForUser(ctx context.Context, in *CreateRequestForUserRequest, opts ...grpc.CallOption) (*CreateRequestForUserResponse, error)
}

type userRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRequestServiceClient(cc grpc.ClientConnInterface) UserRequestServiceClient {
	return &userRequestServiceClient{cc}
}

func (c *userRequestServiceClient) CreateRequestForUser(ctx context.Context, in *CreateRequestForUserRequest, opts ...grpc.CallOption) (*CreateRequestForUserResponse, error) {
	out := new(CreateRequestForUserResponse)
	err := c.cc.Invoke(ctx, "/user_request.v1.UserRequestService/CreateRequestForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRequestServiceServer is the server API for UserRequestService service.
// All implementations should embed UnimplementedUserRequestServiceServer
// for forward compatibility
type UserRequestServiceServer interface {
	CreateRequestForUser(context.Context, *CreateRequestForUserRequest) (*CreateRequestForUserResponse, error)
}

// UnimplementedUserRequestServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserRequestServiceServer struct {
}

func (UnimplementedUserRequestServiceServer) CreateRequestForUser(context.Context, *CreateRequestForUserRequest) (*CreateRequestForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequestForUser not implemented")
}

// UnsafeUserRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRequestServiceServer will
// result in compilation errors.
type UnsafeUserRequestServiceServer interface {
	mustEmbedUnimplementedUserRequestServiceServer()
}

func RegisterUserRequestServiceServer(s grpc.ServiceRegistrar, srv UserRequestServiceServer) {
	s.RegisterService(&UserRequestService_ServiceDesc, srv)
}

func _UserRequestService_CreateRequestForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRequestServiceServer).CreateRequestForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_request.v1.UserRequestService/CreateRequestForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRequestServiceServer).CreateRequestForUser(ctx, req.(*CreateRequestForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRequestService_ServiceDesc is the grpc.ServiceDesc for UserRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_request.v1.UserRequestService",
	HandlerType: (*UserRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRequestForUser",
			Handler:    _UserRequestService_CreateRequestForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_request/v1/user_request.proto",
}
