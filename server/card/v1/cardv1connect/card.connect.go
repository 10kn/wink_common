// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: card/v1/card.proto

package cardv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gisucoinc/ebisuiru-fc-common/server/card/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CardServiceName is the fully-qualified name of the CardService service.
	CardServiceName = "card.v1.CardService"
)

// CardServiceClient is a client for the card.v1.CardService service.
type CardServiceClient interface {
	GetCards(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetCardsResponse], error)
	GetCardsForMeetupEvent(context.Context, *connect_go.Request[v1.GetCardsForMeetupEventRequest]) (*connect_go.Response[v1.GetCardsForMeetupEventResponse], error)
	AddCards(context.Context, *connect_go.Request[v1.AddCardsRequest]) (*connect_go.Response[emptypb.Empty], error)
	CardAction(context.Context, *connect_go.Request[v1.CardActionRequest]) (*connect_go.Response[v1.CardActionResponse], error)
	GetCandidates(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetCandidatesResponse], error)
	GetCandidatesForMeetupEvent(context.Context, *connect_go.Request[v1.GetCandidatesForMeetupEventRequest]) (*connect_go.Response[v1.GetCandidatesForMeetupEventResponse], error)
	GetSuperWinkCoin(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetSuperWinkCoinResponse], error)
	GetSuperWinkUsed(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetSuperWinkUsedResponse], error)
}

// NewCardServiceClient constructs a client for the card.v1.CardService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCardServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cardServiceClient{
		getCards: connect_go.NewClient[emptypb.Empty, v1.GetCardsResponse](
			httpClient,
			baseURL+"/card.v1.CardService/GetCards",
			opts...,
		),
		getCardsForMeetupEvent: connect_go.NewClient[v1.GetCardsForMeetupEventRequest, v1.GetCardsForMeetupEventResponse](
			httpClient,
			baseURL+"/card.v1.CardService/GetCardsForMeetupEvent",
			opts...,
		),
		addCards: connect_go.NewClient[v1.AddCardsRequest, emptypb.Empty](
			httpClient,
			baseURL+"/card.v1.CardService/AddCards",
			opts...,
		),
		cardAction: connect_go.NewClient[v1.CardActionRequest, v1.CardActionResponse](
			httpClient,
			baseURL+"/card.v1.CardService/CardAction",
			opts...,
		),
		getCandidates: connect_go.NewClient[emptypb.Empty, v1.GetCandidatesResponse](
			httpClient,
			baseURL+"/card.v1.CardService/GetCandidates",
			opts...,
		),
		getCandidatesForMeetupEvent: connect_go.NewClient[v1.GetCandidatesForMeetupEventRequest, v1.GetCandidatesForMeetupEventResponse](
			httpClient,
			baseURL+"/card.v1.CardService/GetCandidatesForMeetupEvent",
			opts...,
		),
		getSuperWinkCoin: connect_go.NewClient[emptypb.Empty, v1.GetSuperWinkCoinResponse](
			httpClient,
			baseURL+"/card.v1.CardService/GetSuperWinkCoin",
			opts...,
		),
		getSuperWinkUsed: connect_go.NewClient[emptypb.Empty, v1.GetSuperWinkUsedResponse](
			httpClient,
			baseURL+"/card.v1.CardService/GetSuperWinkUsed",
			opts...,
		),
	}
}

// cardServiceClient implements CardServiceClient.
type cardServiceClient struct {
	getCards                    *connect_go.Client[emptypb.Empty, v1.GetCardsResponse]
	getCardsForMeetupEvent      *connect_go.Client[v1.GetCardsForMeetupEventRequest, v1.GetCardsForMeetupEventResponse]
	addCards                    *connect_go.Client[v1.AddCardsRequest, emptypb.Empty]
	cardAction                  *connect_go.Client[v1.CardActionRequest, v1.CardActionResponse]
	getCandidates               *connect_go.Client[emptypb.Empty, v1.GetCandidatesResponse]
	getCandidatesForMeetupEvent *connect_go.Client[v1.GetCandidatesForMeetupEventRequest, v1.GetCandidatesForMeetupEventResponse]
	getSuperWinkCoin            *connect_go.Client[emptypb.Empty, v1.GetSuperWinkCoinResponse]
	getSuperWinkUsed            *connect_go.Client[emptypb.Empty, v1.GetSuperWinkUsedResponse]
}

// GetCards calls card.v1.CardService.GetCards.
func (c *cardServiceClient) GetCards(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetCardsResponse], error) {
	return c.getCards.CallUnary(ctx, req)
}

// GetCardsForMeetupEvent calls card.v1.CardService.GetCardsForMeetupEvent.
func (c *cardServiceClient) GetCardsForMeetupEvent(ctx context.Context, req *connect_go.Request[v1.GetCardsForMeetupEventRequest]) (*connect_go.Response[v1.GetCardsForMeetupEventResponse], error) {
	return c.getCardsForMeetupEvent.CallUnary(ctx, req)
}

// AddCards calls card.v1.CardService.AddCards.
func (c *cardServiceClient) AddCards(ctx context.Context, req *connect_go.Request[v1.AddCardsRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.addCards.CallUnary(ctx, req)
}

// CardAction calls card.v1.CardService.CardAction.
func (c *cardServiceClient) CardAction(ctx context.Context, req *connect_go.Request[v1.CardActionRequest]) (*connect_go.Response[v1.CardActionResponse], error) {
	return c.cardAction.CallUnary(ctx, req)
}

// GetCandidates calls card.v1.CardService.GetCandidates.
func (c *cardServiceClient) GetCandidates(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetCandidatesResponse], error) {
	return c.getCandidates.CallUnary(ctx, req)
}

// GetCandidatesForMeetupEvent calls card.v1.CardService.GetCandidatesForMeetupEvent.
func (c *cardServiceClient) GetCandidatesForMeetupEvent(ctx context.Context, req *connect_go.Request[v1.GetCandidatesForMeetupEventRequest]) (*connect_go.Response[v1.GetCandidatesForMeetupEventResponse], error) {
	return c.getCandidatesForMeetupEvent.CallUnary(ctx, req)
}

// GetSuperWinkCoin calls card.v1.CardService.GetSuperWinkCoin.
func (c *cardServiceClient) GetSuperWinkCoin(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetSuperWinkCoinResponse], error) {
	return c.getSuperWinkCoin.CallUnary(ctx, req)
}

// GetSuperWinkUsed calls card.v1.CardService.GetSuperWinkUsed.
func (c *cardServiceClient) GetSuperWinkUsed(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetSuperWinkUsedResponse], error) {
	return c.getSuperWinkUsed.CallUnary(ctx, req)
}

// CardServiceHandler is an implementation of the card.v1.CardService service.
type CardServiceHandler interface {
	GetCards(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetCardsResponse], error)
	GetCardsForMeetupEvent(context.Context, *connect_go.Request[v1.GetCardsForMeetupEventRequest]) (*connect_go.Response[v1.GetCardsForMeetupEventResponse], error)
	AddCards(context.Context, *connect_go.Request[v1.AddCardsRequest]) (*connect_go.Response[emptypb.Empty], error)
	CardAction(context.Context, *connect_go.Request[v1.CardActionRequest]) (*connect_go.Response[v1.CardActionResponse], error)
	GetCandidates(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetCandidatesResponse], error)
	GetCandidatesForMeetupEvent(context.Context, *connect_go.Request[v1.GetCandidatesForMeetupEventRequest]) (*connect_go.Response[v1.GetCandidatesForMeetupEventResponse], error)
	GetSuperWinkCoin(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetSuperWinkCoinResponse], error)
	GetSuperWinkUsed(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetSuperWinkUsedResponse], error)
}

// NewCardServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCardServiceHandler(svc CardServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/card.v1.CardService/GetCards", connect_go.NewUnaryHandler(
		"/card.v1.CardService/GetCards",
		svc.GetCards,
		opts...,
	))
	mux.Handle("/card.v1.CardService/GetCardsForMeetupEvent", connect_go.NewUnaryHandler(
		"/card.v1.CardService/GetCardsForMeetupEvent",
		svc.GetCardsForMeetupEvent,
		opts...,
	))
	mux.Handle("/card.v1.CardService/AddCards", connect_go.NewUnaryHandler(
		"/card.v1.CardService/AddCards",
		svc.AddCards,
		opts...,
	))
	mux.Handle("/card.v1.CardService/CardAction", connect_go.NewUnaryHandler(
		"/card.v1.CardService/CardAction",
		svc.CardAction,
		opts...,
	))
	mux.Handle("/card.v1.CardService/GetCandidates", connect_go.NewUnaryHandler(
		"/card.v1.CardService/GetCandidates",
		svc.GetCandidates,
		opts...,
	))
	mux.Handle("/card.v1.CardService/GetCandidatesForMeetupEvent", connect_go.NewUnaryHandler(
		"/card.v1.CardService/GetCandidatesForMeetupEvent",
		svc.GetCandidatesForMeetupEvent,
		opts...,
	))
	mux.Handle("/card.v1.CardService/GetSuperWinkCoin", connect_go.NewUnaryHandler(
		"/card.v1.CardService/GetSuperWinkCoin",
		svc.GetSuperWinkCoin,
		opts...,
	))
	mux.Handle("/card.v1.CardService/GetSuperWinkUsed", connect_go.NewUnaryHandler(
		"/card.v1.CardService/GetSuperWinkUsed",
		svc.GetSuperWinkUsed,
		opts...,
	))
	return "/card.v1.CardService/", mux
}

// UnimplementedCardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCardServiceHandler struct{}

func (UnimplementedCardServiceHandler) GetCards(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetCardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.v1.CardService.GetCards is not implemented"))
}

func (UnimplementedCardServiceHandler) GetCardsForMeetupEvent(context.Context, *connect_go.Request[v1.GetCardsForMeetupEventRequest]) (*connect_go.Response[v1.GetCardsForMeetupEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.v1.CardService.GetCardsForMeetupEvent is not implemented"))
}

func (UnimplementedCardServiceHandler) AddCards(context.Context, *connect_go.Request[v1.AddCardsRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.v1.CardService.AddCards is not implemented"))
}

func (UnimplementedCardServiceHandler) CardAction(context.Context, *connect_go.Request[v1.CardActionRequest]) (*connect_go.Response[v1.CardActionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.v1.CardService.CardAction is not implemented"))
}

func (UnimplementedCardServiceHandler) GetCandidates(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetCandidatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.v1.CardService.GetCandidates is not implemented"))
}

func (UnimplementedCardServiceHandler) GetCandidatesForMeetupEvent(context.Context, *connect_go.Request[v1.GetCandidatesForMeetupEventRequest]) (*connect_go.Response[v1.GetCandidatesForMeetupEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.v1.CardService.GetCandidatesForMeetupEvent is not implemented"))
}

func (UnimplementedCardServiceHandler) GetSuperWinkCoin(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetSuperWinkCoinResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.v1.CardService.GetSuperWinkCoin is not implemented"))
}

func (UnimplementedCardServiceHandler) GetSuperWinkUsed(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetSuperWinkUsedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.v1.CardService.GetSuperWinkUsed is not implemented"))
}
