// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: card/v1/card.proto

package cardv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CardServiceClient is the client API for CardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardServiceClient interface {
	GetCards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCardsResponse, error)
	GetCardsForMeetupEvent(ctx context.Context, in *GetCardsForMeetupEventRequest, opts ...grpc.CallOption) (*GetCardsForMeetupEventResponse, error)
	AddCards(ctx context.Context, in *AddCardsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CardAction(ctx context.Context, in *CardActionRequest, opts ...grpc.CallOption) (*CardActionResponse, error)
	GetCandidates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCandidatesResponse, error)
	GetCandidatesForMeetupEvent(ctx context.Context, in *GetCandidatesForMeetupEventRequest, opts ...grpc.CallOption) (*GetCandidatesForMeetupEventResponse, error)
	GetSuperWinkCoin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSuperWinkCoinResponse, error)
	GetSuperWinkUsed(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSuperWinkUsedResponse, error)
}

type cardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardServiceClient(cc grpc.ClientConnInterface) CardServiceClient {
	return &cardServiceClient{cc}
}

func (c *cardServiceClient) GetCards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCardsResponse, error) {
	out := new(GetCardsResponse)
	err := c.cc.Invoke(ctx, "/card.v1.CardService/GetCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardsForMeetupEvent(ctx context.Context, in *GetCardsForMeetupEventRequest, opts ...grpc.CallOption) (*GetCardsForMeetupEventResponse, error) {
	out := new(GetCardsForMeetupEventResponse)
	err := c.cc.Invoke(ctx, "/card.v1.CardService/GetCardsForMeetupEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) AddCards(ctx context.Context, in *AddCardsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/card.v1.CardService/AddCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) CardAction(ctx context.Context, in *CardActionRequest, opts ...grpc.CallOption) (*CardActionResponse, error) {
	out := new(CardActionResponse)
	err := c.cc.Invoke(ctx, "/card.v1.CardService/CardAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCandidates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCandidatesResponse, error) {
	out := new(GetCandidatesResponse)
	err := c.cc.Invoke(ctx, "/card.v1.CardService/GetCandidates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCandidatesForMeetupEvent(ctx context.Context, in *GetCandidatesForMeetupEventRequest, opts ...grpc.CallOption) (*GetCandidatesForMeetupEventResponse, error) {
	out := new(GetCandidatesForMeetupEventResponse)
	err := c.cc.Invoke(ctx, "/card.v1.CardService/GetCandidatesForMeetupEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetSuperWinkCoin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSuperWinkCoinResponse, error) {
	out := new(GetSuperWinkCoinResponse)
	err := c.cc.Invoke(ctx, "/card.v1.CardService/GetSuperWinkCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetSuperWinkUsed(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSuperWinkUsedResponse, error) {
	out := new(GetSuperWinkUsedResponse)
	err := c.cc.Invoke(ctx, "/card.v1.CardService/GetSuperWinkUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServiceServer is the server API for CardService service.
// All implementations should embed UnimplementedCardServiceServer
// for forward compatibility
type CardServiceServer interface {
	GetCards(context.Context, *emptypb.Empty) (*GetCardsResponse, error)
	GetCardsForMeetupEvent(context.Context, *GetCardsForMeetupEventRequest) (*GetCardsForMeetupEventResponse, error)
	AddCards(context.Context, *AddCardsRequest) (*emptypb.Empty, error)
	CardAction(context.Context, *CardActionRequest) (*CardActionResponse, error)
	GetCandidates(context.Context, *emptypb.Empty) (*GetCandidatesResponse, error)
	GetCandidatesForMeetupEvent(context.Context, *GetCandidatesForMeetupEventRequest) (*GetCandidatesForMeetupEventResponse, error)
	GetSuperWinkCoin(context.Context, *emptypb.Empty) (*GetSuperWinkCoinResponse, error)
	GetSuperWinkUsed(context.Context, *emptypb.Empty) (*GetSuperWinkUsedResponse, error)
}

// UnimplementedCardServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCardServiceServer struct {
}

func (UnimplementedCardServiceServer) GetCards(context.Context, *emptypb.Empty) (*GetCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCards not implemented")
}
func (UnimplementedCardServiceServer) GetCardsForMeetupEvent(context.Context, *GetCardsForMeetupEventRequest) (*GetCardsForMeetupEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsForMeetupEvent not implemented")
}
func (UnimplementedCardServiceServer) AddCards(context.Context, *AddCardsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCards not implemented")
}
func (UnimplementedCardServiceServer) CardAction(context.Context, *CardActionRequest) (*CardActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardAction not implemented")
}
func (UnimplementedCardServiceServer) GetCandidates(context.Context, *emptypb.Empty) (*GetCandidatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandidates not implemented")
}
func (UnimplementedCardServiceServer) GetCandidatesForMeetupEvent(context.Context, *GetCandidatesForMeetupEventRequest) (*GetCandidatesForMeetupEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandidatesForMeetupEvent not implemented")
}
func (UnimplementedCardServiceServer) GetSuperWinkCoin(context.Context, *emptypb.Empty) (*GetSuperWinkCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuperWinkCoin not implemented")
}
func (UnimplementedCardServiceServer) GetSuperWinkUsed(context.Context, *emptypb.Empty) (*GetSuperWinkUsedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuperWinkUsed not implemented")
}

// UnsafeCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServiceServer will
// result in compilation errors.
type UnsafeCardServiceServer interface {
	mustEmbedUnimplementedCardServiceServer()
}

func RegisterCardServiceServer(s grpc.ServiceRegistrar, srv CardServiceServer) {
	s.RegisterService(&CardService_ServiceDesc, srv)
}

func _CardService_GetCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.v1.CardService/GetCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCards(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardsForMeetupEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardsForMeetupEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardsForMeetupEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.v1.CardService/GetCardsForMeetupEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardsForMeetupEvent(ctx, req.(*GetCardsForMeetupEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_AddCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).AddCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.v1.CardService/AddCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).AddCards(ctx, req.(*AddCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_CardAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).CardAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.v1.CardService/CardAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).CardAction(ctx, req.(*CardActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.v1.CardService/GetCandidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCandidates(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCandidatesForMeetupEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandidatesForMeetupEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCandidatesForMeetupEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.v1.CardService/GetCandidatesForMeetupEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCandidatesForMeetupEvent(ctx, req.(*GetCandidatesForMeetupEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetSuperWinkCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetSuperWinkCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.v1.CardService/GetSuperWinkCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetSuperWinkCoin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetSuperWinkUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetSuperWinkUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.v1.CardService/GetSuperWinkUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetSuperWinkUsed(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CardService_ServiceDesc is the grpc.ServiceDesc for CardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card.v1.CardService",
	HandlerType: (*CardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCards",
			Handler:    _CardService_GetCards_Handler,
		},
		{
			MethodName: "GetCardsForMeetupEvent",
			Handler:    _CardService_GetCardsForMeetupEvent_Handler,
		},
		{
			MethodName: "AddCards",
			Handler:    _CardService_AddCards_Handler,
		},
		{
			MethodName: "CardAction",
			Handler:    _CardService_CardAction_Handler,
		},
		{
			MethodName: "GetCandidates",
			Handler:    _CardService_GetCandidates_Handler,
		},
		{
			MethodName: "GetCandidatesForMeetupEvent",
			Handler:    _CardService_GetCandidatesForMeetupEvent_Handler,
		},
		{
			MethodName: "GetSuperWinkCoin",
			Handler:    _CardService_GetSuperWinkCoin_Handler,
		},
		{
			MethodName: "GetSuperWinkUsed",
			Handler:    _CardService_GetSuperWinkUsed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card/v1/card.proto",
}
