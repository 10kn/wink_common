// 参考
// https://zenn.dev/hsaki/books/golang-grpc-starting/viewer/proto
// https://dev.classmethod.jp/articles/golang-grpc-sample-project/
//

// protoのバージョンです。

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: user_profile/v1/user_profile.proto

// メッセージ型などの名前の衝突を避けるためにパッケージ名を指定します。

package userprofilev1

import (
	v12 "github.com/10kn/wink_common/server/common/v1"
	v1 "github.com/10kn/wink_common/server/profile/v1"
	v13 "github.com/10kn/wink_common/server/profile_image/v1"
	v11 "github.com/10kn/wink_common/server/user/v1"
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetUserProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetUserProfileRequest) Reset() {
	*x = GetUserProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_profile_v1_user_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserProfileRequest) ProtoMessage() {}

func (x *GetUserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_profile_v1_user_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserProfileRequest.ProtoReflect.Descriptor instead.
func (*GetUserProfileRequest) Descriptor() ([]byte, []int) {
	return file_user_profile_v1_user_profile_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserProfileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                string                    `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Gender                *v1.Gender                `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Nickname              string                    `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Age                   uint32                    `protobuf:"varint,4,opt,name=age,proto3" json:"age,omitempty"`
	SelfIntroduction      string                    `protobuf:"bytes,5,opt,name=selfIntroduction,proto3" json:"selfIntroduction,omitempty"`
	Job                   *v1.Job                   `protobuf:"bytes,6,opt,name=job,proto3" json:"job,omitempty"`
	Alcohol               *v1.Alcohol               `protobuf:"bytes,7,opt,name=alcohol,proto3" json:"alcohol,omitempty"`
	AnnualIncome          *v1.AnnualIncome          `protobuf:"bytes,8,opt,name=annualIncome,proto3" json:"annualIncome,omitempty"`
	BloodType             *v1.BloodType             `protobuf:"bytes,9,opt,name=bloodType,proto3" json:"bloodType,omitempty"`
	Cigarette             *v1.Cigarette             `protobuf:"bytes,10,opt,name=cigarette,proto3" json:"cigarette,omitempty"`
	DateCost              *v1.DateCost              `protobuf:"bytes,11,opt,name=dateCost,proto3" json:"dateCost,omitempty"`
	EducationalBackground *v1.EducationalBackground `protobuf:"bytes,12,opt,name=educationalBackground,proto3" json:"educationalBackground,omitempty"`
	Holiday               *v1.Holiday               `protobuf:"bytes,13,opt,name=holiday,proto3" json:"holiday,omitempty"`
	Housemate             *v1.Housemate             `protobuf:"bytes,14,opt,name=housemate,proto3" json:"housemate,omitempty"`
	Height                uint32                    `protobuf:"varint,15,opt,name=height,proto3" json:"height,omitempty"`
	Shape                 *v1.Shape                 `protobuf:"bytes,16,opt,name=shape,proto3" json:"shape,omitempty"`
	Personalities         []*v1.Personality         `protobuf:"bytes,17,rep,name=personalities,proto3" json:"personalities,omitempty"`
	LoggedinAt            *timestamppb.Timestamp    `protobuf:"bytes,18,opt,name=loggedinAt,proto3,oneof" json:"loggedinAt,omitempty"`
	Latitude              *float64                  `protobuf:"fixed64,19,opt,name=latitude,proto3,oneof" json:"latitude,omitempty"`
	Longitude             *float64                  `protobuf:"fixed64,20,opt,name=longitude,proto3,oneof" json:"longitude,omitempty"`
	NewStatus             bool                      `protobuf:"varint,21,opt,name=newStatus,proto3" json:"newStatus,omitempty"`
	Hobbies               []*v1.Hobby               `protobuf:"bytes,22,rep,name=hobbies,proto3" json:"hobbies,omitempty"`
	Plans                 []*v1.PlanWithMatching    `protobuf:"bytes,23,rep,name=plans,proto3" json:"plans,omitempty"`
}

func (x *GetUserProfileResponse) Reset() {
	*x = GetUserProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_profile_v1_user_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserProfileResponse) ProtoMessage() {}

func (x *GetUserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_profile_v1_user_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserProfileResponse.ProtoReflect.Descriptor instead.
func (*GetUserProfileResponse) Descriptor() ([]byte, []int) {
	return file_user_profile_v1_user_profile_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserProfileResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserProfileResponse) GetGender() *v1.Gender {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *GetUserProfileResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *GetUserProfileResponse) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *GetUserProfileResponse) GetSelfIntroduction() string {
	if x != nil {
		return x.SelfIntroduction
	}
	return ""
}

func (x *GetUserProfileResponse) GetJob() *v1.Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *GetUserProfileResponse) GetAlcohol() *v1.Alcohol {
	if x != nil {
		return x.Alcohol
	}
	return nil
}

func (x *GetUserProfileResponse) GetAnnualIncome() *v1.AnnualIncome {
	if x != nil {
		return x.AnnualIncome
	}
	return nil
}

func (x *GetUserProfileResponse) GetBloodType() *v1.BloodType {
	if x != nil {
		return x.BloodType
	}
	return nil
}

func (x *GetUserProfileResponse) GetCigarette() *v1.Cigarette {
	if x != nil {
		return x.Cigarette
	}
	return nil
}

func (x *GetUserProfileResponse) GetDateCost() *v1.DateCost {
	if x != nil {
		return x.DateCost
	}
	return nil
}

func (x *GetUserProfileResponse) GetEducationalBackground() *v1.EducationalBackground {
	if x != nil {
		return x.EducationalBackground
	}
	return nil
}

func (x *GetUserProfileResponse) GetHoliday() *v1.Holiday {
	if x != nil {
		return x.Holiday
	}
	return nil
}

func (x *GetUserProfileResponse) GetHousemate() *v1.Housemate {
	if x != nil {
		return x.Housemate
	}
	return nil
}

func (x *GetUserProfileResponse) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetUserProfileResponse) GetShape() *v1.Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *GetUserProfileResponse) GetPersonalities() []*v1.Personality {
	if x != nil {
		return x.Personalities
	}
	return nil
}

func (x *GetUserProfileResponse) GetLoggedinAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LoggedinAt
	}
	return nil
}

func (x *GetUserProfileResponse) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *GetUserProfileResponse) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *GetUserProfileResponse) GetNewStatus() bool {
	if x != nil {
		return x.NewStatus
	}
	return false
}

func (x *GetUserProfileResponse) GetHobbies() []*v1.Hobby {
	if x != nil {
		return x.Hobbies
	}
	return nil
}

func (x *GetUserProfileResponse) GetPlans() []*v1.PlanWithMatching {
	if x != nil {
		return x.Plans
	}
	return nil
}

type UpdateUserProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           string                `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	RegistrationStep *v11.RegistrationStep `protobuf:"varint,2,opt,name=registrationStep,proto3,enum=user.v1.RegistrationStep,oneof" json:"registrationStep,omitempty"`
	GenderId         *uint32               `protobuf:"varint,3,opt,name=genderId,proto3,oneof" json:"genderId,omitempty"`
	Nickname         *string               `protobuf:"bytes,4,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"`
	Birthday         *date.Date            `protobuf:"bytes,5,opt,name=birthday,proto3,oneof" json:"birthday,omitempty"`
	// optional google.protobuf.Timestamp birthday = 5;
	SelfIntroduction        *string  `protobuf:"bytes,6,opt,name=selfIntroduction,proto3,oneof" json:"selfIntroduction,omitempty"`
	CityId                  *uint32  `protobuf:"varint,7,opt,name=cityId,proto3,oneof" json:"cityId,omitempty"`
	JobId                   *uint32  `protobuf:"varint,8,opt,name=jobId,proto3,oneof" json:"jobId,omitempty"`
	AlcoholId               *uint32  `protobuf:"varint,9,opt,name=alcoholId,proto3,oneof" json:"alcoholId,omitempty"`
	AnnualIncomeId          *uint32  `protobuf:"varint,10,opt,name=annualIncomeId,proto3,oneof" json:"annualIncomeId,omitempty"`
	BloodTypeId             *uint32  `protobuf:"varint,11,opt,name=bloodTypeId,proto3,oneof" json:"bloodTypeId,omitempty"`
	CigaretteId             *uint32  `protobuf:"varint,12,opt,name=cigaretteId,proto3,oneof" json:"cigaretteId,omitempty"`
	DateCostId              *uint32  `protobuf:"varint,13,opt,name=dateCostId,proto3,oneof" json:"dateCostId,omitempty"`
	EducationalBackgroundId *uint32  `protobuf:"varint,14,opt,name=educationalBackgroundId,proto3,oneof" json:"educationalBackgroundId,omitempty"`
	HolidayId               *uint32  `protobuf:"varint,15,opt,name=holidayId,proto3,oneof" json:"holidayId,omitempty"`
	HousemateId             *uint32  `protobuf:"varint,16,opt,name=housemateId,proto3,oneof" json:"housemateId,omitempty"`
	Height                  *uint32  `protobuf:"varint,17,opt,name=height,proto3,oneof" json:"height,omitempty"`
	ShapeId                 *uint32  `protobuf:"varint,18,opt,name=shapeId,proto3,oneof" json:"shapeId,omitempty"`
	PersonalityIds          []uint32 `protobuf:"varint,19,rep,packed,name=personalityIds,proto3" json:"personalityIds,omitempty"`
	Email                   *string  `protobuf:"bytes,20,opt,name=email,proto3,oneof" json:"email,omitempty"`
	HobbyIds                []uint32 `protobuf:"varint,21,rep,packed,name=hobbyIds,proto3" json:"hobbyIds,omitempty"`
	PlanIds                 []uint32 `protobuf:"varint,22,rep,packed,name=planIds,proto3" json:"planIds,omitempty"`
	FirstTimeUse            *bool    `protobuf:"varint,23,opt,name=firstTimeUse,proto3,oneof" json:"firstTimeUse,omitempty"`
	HiddenSuperWink         *bool    `protobuf:"varint,24,opt,name=hiddenSuperWink,proto3,oneof" json:"hiddenSuperWink,omitempty"`
}

func (x *UpdateUserProfileRequest) Reset() {
	*x = UpdateUserProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_profile_v1_user_profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserProfileRequest) ProtoMessage() {}

func (x *UpdateUserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_profile_v1_user_profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserProfileRequest) Descriptor() ([]byte, []int) {
	return file_user_profile_v1_user_profile_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateUserProfileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserProfileRequest) GetRegistrationStep() v11.RegistrationStep {
	if x != nil && x.RegistrationStep != nil {
		return *x.RegistrationStep
	}
	return v11.RegistrationStep(0)
}

func (x *UpdateUserProfileRequest) GetGenderId() uint32 {
	if x != nil && x.GenderId != nil {
		return *x.GenderId
	}
	return 0
}

func (x *UpdateUserProfileRequest) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *UpdateUserProfileRequest) GetBirthday() *date.Date {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *UpdateUserProfileRequest) GetSelfIntroduction() string {
	if x != nil && x.SelfIntroduction != nil {
		return *x.SelfIntroduction
	}
	return ""
}

func (x *UpdateUserProfileRequest) GetCityId() uint32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *UpdateUserProfileRequest) GetJobId() uint32 {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return 0
}

func (x *UpdateUserProfileRequest) GetAlcoholId() uint32 {
	if x != nil && x.AlcoholId != nil {
		return *x.AlcoholId
	}
	return 0
}

func (x *UpdateUserProfileRequest) GetAnnualIncomeId() uint32 {
	if x != nil && x.AnnualIncomeId != nil {
		return *x.AnnualIncomeId
	}
	return 0
}

func (x *UpdateUserProfileRequest) GetBloodTypeId() uint32 {
	if x != nil && x.BloodTypeId != nil {
		return *x.BloodTypeId
	}
	return 0
}

func (x *UpdateUserProfileRequest) GetCigaretteId() uint32 {
	if x != nil && x.CigaretteId != nil {
		return *x.CigaretteId
	}
	return 0
}

func (x *UpdateUserProfileRequest) GetDateCostId() uint32 {
	if x != nil && x.DateCostId != nil {
		return *x.DateCostId
	}
	return 0
}

func (x *UpdateUserProfileRequest) GetEducationalBackgroundId() uint32 {
	if x != nil && x.EducationalBackgroundId != nil {
		return *x.EducationalBackgroundId
	}
	return 0
}

func (x *UpdateUserProfileRequest) GetHolidayId() uint32 {
	if x != nil && x.HolidayId != nil {
		return *x.HolidayId
	}
	return 0
}

func (x *UpdateUserProfileRequest) GetHousemateId() uint32 {
	if x != nil && x.HousemateId != nil {
		return *x.HousemateId
	}
	return 0
}

func (x *UpdateUserProfileRequest) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *UpdateUserProfileRequest) GetShapeId() uint32 {
	if x != nil && x.ShapeId != nil {
		return *x.ShapeId
	}
	return 0
}

func (x *UpdateUserProfileRequest) GetPersonalityIds() []uint32 {
	if x != nil {
		return x.PersonalityIds
	}
	return nil
}

func (x *UpdateUserProfileRequest) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *UpdateUserProfileRequest) GetHobbyIds() []uint32 {
	if x != nil {
		return x.HobbyIds
	}
	return nil
}

func (x *UpdateUserProfileRequest) GetPlanIds() []uint32 {
	if x != nil {
		return x.PlanIds
	}
	return nil
}

func (x *UpdateUserProfileRequest) GetFirstTimeUse() bool {
	if x != nil && x.FirstTimeUse != nil {
		return *x.FirstTimeUse
	}
	return false
}

func (x *UpdateUserProfileRequest) GetHiddenSuperWink() bool {
	if x != nil && x.HiddenSuperWink != nil {
		return *x.HiddenSuperWink
	}
	return false
}

type GetOwnUserProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string     `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Gender   *v1.Gender `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Nickname string     `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Birthday *date.Date `protobuf:"bytes,4,opt,name=birthday,proto3,oneof" json:"birthday,omitempty"`
	// google.protobuf.Timestamp birthday = 4;
	SelfIntroduction      string                    `protobuf:"bytes,5,opt,name=selfIntroduction,proto3" json:"selfIntroduction,omitempty"`
	Prefecture            *v1.Prefecture            `protobuf:"bytes,6,opt,name=prefecture,proto3" json:"prefecture,omitempty"`
	City                  *v1.City                  `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	Job                   *v1.Job                   `protobuf:"bytes,8,opt,name=job,proto3" json:"job,omitempty"`
	Alcohol               *v1.Alcohol               `protobuf:"bytes,9,opt,name=alcohol,proto3" json:"alcohol,omitempty"`
	AnnualIncome          *v1.AnnualIncome          `protobuf:"bytes,10,opt,name=annualIncome,proto3" json:"annualIncome,omitempty"`
	BloodType             *v1.BloodType             `protobuf:"bytes,11,opt,name=bloodType,proto3" json:"bloodType,omitempty"`
	Cigarette             *v1.Cigarette             `protobuf:"bytes,12,opt,name=cigarette,proto3" json:"cigarette,omitempty"`
	DateCost              *v1.DateCost              `protobuf:"bytes,13,opt,name=dateCost,proto3" json:"dateCost,omitempty"`
	EducationalBackground *v1.EducationalBackground `protobuf:"bytes,14,opt,name=educationalBackground,proto3" json:"educationalBackground,omitempty"`
	Holiday               *v1.Holiday               `protobuf:"bytes,15,opt,name=holiday,proto3" json:"holiday,omitempty"`
	Housemate             *v1.Housemate             `protobuf:"bytes,16,opt,name=housemate,proto3" json:"housemate,omitempty"`
	Height                uint32                    `protobuf:"varint,17,opt,name=height,proto3" json:"height,omitempty"`
	Shape                 *v1.Shape                 `protobuf:"bytes,18,opt,name=shape,proto3" json:"shape,omitempty"`
	Personalities         []*v1.Personality         `protobuf:"bytes,19,rep,name=personalities,proto3" json:"personalities,omitempty"`
	Email                 string                    `protobuf:"bytes,20,opt,name=email,proto3" json:"email,omitempty"`
	SkipCardsCount        uint32                    `protobuf:"varint,21,opt,name=skipCardsCount,proto3" json:"skipCardsCount,omitempty"`
	ReactedCardsCount     uint32                    `protobuf:"varint,22,opt,name=reactedCardsCount,proto3" json:"reactedCardsCount,omitempty"`
	Hobbies               []*v1.Hobby               `protobuf:"bytes,23,rep,name=hobbies,proto3" json:"hobbies,omitempty"`
	Plans                 []*v1.Plan                `protobuf:"bytes,24,rep,name=plans,proto3" json:"plans,omitempty"`
	FirstTimeUse          bool                      `protobuf:"varint,25,opt,name=firstTimeUse,proto3" json:"firstTimeUse,omitempty"`
	HiddenSuperWink       bool                      `protobuf:"varint,26,opt,name=hiddenSuperWink,proto3" json:"hiddenSuperWink,omitempty"`
	ReferralCode          string                    `protobuf:"bytes,27,opt,name=referralCode,proto3" json:"referralCode,omitempty"`
	FriendReferralCode    string                    `protobuf:"bytes,28,opt,name=friendReferralCode,proto3" json:"friendReferralCode,omitempty"`
}

func (x *GetOwnUserProfileResponse) Reset() {
	*x = GetOwnUserProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_profile_v1_user_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOwnUserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOwnUserProfileResponse) ProtoMessage() {}

func (x *GetOwnUserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_profile_v1_user_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOwnUserProfileResponse.ProtoReflect.Descriptor instead.
func (*GetOwnUserProfileResponse) Descriptor() ([]byte, []int) {
	return file_user_profile_v1_user_profile_proto_rawDescGZIP(), []int{3}
}

func (x *GetOwnUserProfileResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetOwnUserProfileResponse) GetGender() *v1.Gender {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *GetOwnUserProfileResponse) GetBirthday() *date.Date {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetSelfIntroduction() string {
	if x != nil {
		return x.SelfIntroduction
	}
	return ""
}

func (x *GetOwnUserProfileResponse) GetPrefecture() *v1.Prefecture {
	if x != nil {
		return x.Prefecture
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetCity() *v1.City {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetJob() *v1.Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetAlcohol() *v1.Alcohol {
	if x != nil {
		return x.Alcohol
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetAnnualIncome() *v1.AnnualIncome {
	if x != nil {
		return x.AnnualIncome
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetBloodType() *v1.BloodType {
	if x != nil {
		return x.BloodType
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetCigarette() *v1.Cigarette {
	if x != nil {
		return x.Cigarette
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetDateCost() *v1.DateCost {
	if x != nil {
		return x.DateCost
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetEducationalBackground() *v1.EducationalBackground {
	if x != nil {
		return x.EducationalBackground
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetHoliday() *v1.Holiday {
	if x != nil {
		return x.Holiday
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetHousemate() *v1.Housemate {
	if x != nil {
		return x.Housemate
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetOwnUserProfileResponse) GetShape() *v1.Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetPersonalities() []*v1.Personality {
	if x != nil {
		return x.Personalities
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetOwnUserProfileResponse) GetSkipCardsCount() uint32 {
	if x != nil {
		return x.SkipCardsCount
	}
	return 0
}

func (x *GetOwnUserProfileResponse) GetReactedCardsCount() uint32 {
	if x != nil {
		return x.ReactedCardsCount
	}
	return 0
}

func (x *GetOwnUserProfileResponse) GetHobbies() []*v1.Hobby {
	if x != nil {
		return x.Hobbies
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetPlans() []*v1.Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

func (x *GetOwnUserProfileResponse) GetFirstTimeUse() bool {
	if x != nil {
		return x.FirstTimeUse
	}
	return false
}

func (x *GetOwnUserProfileResponse) GetHiddenSuperWink() bool {
	if x != nil {
		return x.HiddenSuperWink
	}
	return false
}

func (x *GetOwnUserProfileResponse) GetReferralCode() string {
	if x != nil {
		return x.ReferralCode
	}
	return ""
}

func (x *GetOwnUserProfileResponse) GetFriendReferralCode() string {
	if x != nil {
		return x.FriendReferralCode
	}
	return ""
}

type GetAdminUserProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetAdminUserProfileRequest) Reset() {
	*x = GetAdminUserProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_profile_v1_user_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminUserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminUserProfileRequest) ProtoMessage() {}

func (x *GetAdminUserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_profile_v1_user_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminUserProfileRequest.ProtoReflect.Descriptor instead.
func (*GetAdminUserProfileRequest) Descriptor() ([]byte, []int) {
	return file_user_profile_v1_user_profile_proto_rawDescGZIP(), []int{4}
}

func (x *GetAdminUserProfileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetAdminUserProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                string                    `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Gender                *v1.Gender                `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Nickname              string                    `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Birthday              *date.Date                `protobuf:"bytes,4,opt,name=birthday,proto3,oneof" json:"birthday,omitempty"`
	SelfIntroduction      string                    `protobuf:"bytes,5,opt,name=selfIntroduction,proto3" json:"selfIntroduction,omitempty"`
	Prefecture            *v1.Prefecture            `protobuf:"bytes,6,opt,name=prefecture,proto3" json:"prefecture,omitempty"`
	City                  *v1.City                  `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	Job                   *v1.Job                   `protobuf:"bytes,8,opt,name=job,proto3" json:"job,omitempty"`
	Alcohol               *v1.Alcohol               `protobuf:"bytes,9,opt,name=alcohol,proto3" json:"alcohol,omitempty"`
	AnnualIncome          *v1.AnnualIncome          `protobuf:"bytes,10,opt,name=annualIncome,proto3" json:"annualIncome,omitempty"`
	BloodType             *v1.BloodType             `protobuf:"bytes,11,opt,name=bloodType,proto3" json:"bloodType,omitempty"`
	Cigarette             *v1.Cigarette             `protobuf:"bytes,12,opt,name=cigarette,proto3" json:"cigarette,omitempty"`
	DateCost              *v1.DateCost              `protobuf:"bytes,13,opt,name=dateCost,proto3" json:"dateCost,omitempty"`
	EducationalBackground *v1.EducationalBackground `protobuf:"bytes,14,opt,name=educationalBackground,proto3" json:"educationalBackground,omitempty"`
	Holiday               *v1.Holiday               `protobuf:"bytes,15,opt,name=holiday,proto3" json:"holiday,omitempty"`
	Housemate             *v1.Housemate             `protobuf:"bytes,16,opt,name=housemate,proto3" json:"housemate,omitempty"`
	Height                uint32                    `protobuf:"varint,17,opt,name=height,proto3" json:"height,omitempty"`
	Shape                 *v1.Shape                 `protobuf:"bytes,18,opt,name=shape,proto3" json:"shape,omitempty"`
	Personalities         []*v1.Personality         `protobuf:"bytes,19,rep,name=personalities,proto3" json:"personalities,omitempty"`
	Email                 string                    `protobuf:"bytes,20,opt,name=email,proto3" json:"email,omitempty"`
	Hobbies               []*v1.Hobby               `protobuf:"bytes,21,rep,name=hobbies,proto3" json:"hobbies,omitempty"`
}

func (x *GetAdminUserProfileResponse) Reset() {
	*x = GetAdminUserProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_profile_v1_user_profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminUserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminUserProfileResponse) ProtoMessage() {}

func (x *GetAdminUserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_profile_v1_user_profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminUserProfileResponse.ProtoReflect.Descriptor instead.
func (*GetAdminUserProfileResponse) Descriptor() ([]byte, []int) {
	return file_user_profile_v1_user_profile_proto_rawDescGZIP(), []int{5}
}

func (x *GetAdminUserProfileResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetAdminUserProfileResponse) GetGender() *v1.Gender {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *GetAdminUserProfileResponse) GetBirthday() *date.Date {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetSelfIntroduction() string {
	if x != nil {
		return x.SelfIntroduction
	}
	return ""
}

func (x *GetAdminUserProfileResponse) GetPrefecture() *v1.Prefecture {
	if x != nil {
		return x.Prefecture
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetCity() *v1.City {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetJob() *v1.Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetAlcohol() *v1.Alcohol {
	if x != nil {
		return x.Alcohol
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetAnnualIncome() *v1.AnnualIncome {
	if x != nil {
		return x.AnnualIncome
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetBloodType() *v1.BloodType {
	if x != nil {
		return x.BloodType
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetCigarette() *v1.Cigarette {
	if x != nil {
		return x.Cigarette
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetDateCost() *v1.DateCost {
	if x != nil {
		return x.DateCost
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetEducationalBackground() *v1.EducationalBackground {
	if x != nil {
		return x.EducationalBackground
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetHoliday() *v1.Holiday {
	if x != nil {
		return x.Holiday
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetHousemate() *v1.Housemate {
	if x != nil {
		return x.Housemate
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetAdminUserProfileResponse) GetShape() *v1.Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetPersonalities() []*v1.Personality {
	if x != nil {
		return x.Personalities
	}
	return nil
}

func (x *GetAdminUserProfileResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetAdminUserProfileResponse) GetHobbies() []*v1.Hobby {
	if x != nil {
		return x.Hobbies
	}
	return nil
}

type SearchAdminUserProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  *string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Limit *uint32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Page  *uint32 `protobuf:"varint,3,opt,name=page,proto3,oneof" json:"page,omitempty"`
}

func (x *SearchAdminUserProfilesRequest) Reset() {
	*x = SearchAdminUserProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_profile_v1_user_profile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAdminUserProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAdminUserProfilesRequest) ProtoMessage() {}

func (x *SearchAdminUserProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_profile_v1_user_profile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAdminUserProfilesRequest.ProtoReflect.Descriptor instead.
func (*SearchAdminUserProfilesRequest) Descriptor() ([]byte, []int) {
	return file_user_profile_v1_user_profile_proto_rawDescGZIP(), []int{6}
}

func (x *SearchAdminUserProfilesRequest) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *SearchAdminUserProfilesRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SearchAdminUserProfilesRequest) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

type SearchAdminUserProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []*SearchAdminUserProfile `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Paging *v12.Paging               `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *SearchAdminUserProfilesResponse) Reset() {
	*x = SearchAdminUserProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_profile_v1_user_profile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAdminUserProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAdminUserProfilesResponse) ProtoMessage() {}

func (x *SearchAdminUserProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_profile_v1_user_profile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAdminUserProfilesResponse.ProtoReflect.Descriptor instead.
func (*SearchAdminUserProfilesResponse) Descriptor() ([]byte, []int) {
	return file_user_profile_v1_user_profile_proto_rawDescGZIP(), []int{7}
}

func (x *SearchAdminUserProfilesResponse) GetData() []*SearchAdminUserProfile {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchAdminUserProfilesResponse) GetPaging() *v12.Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type SearchAdminUserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                string            `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Nickname              string            `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ProfileImage          *v13.ProfileImage `protobuf:"bytes,3,opt,name=profileImage,proto3" json:"profileImage,omitempty"`
	Gender                *v1.Gender        `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Age                   uint32            `protobuf:"varint,5,opt,name=age,proto3" json:"age,omitempty"`
	AgeVerificationStatus v12.ImageStatus   `protobuf:"varint,6,opt,name=ageVerificationStatus,proto3,enum=common.v1.ImageStatus" json:"ageVerificationStatus,omitempty"`
	UserStatus            v11.UserStatus    `protobuf:"varint,7,opt,name=userStatus,proto3,enum=user.v1.UserStatus" json:"userStatus,omitempty"`
	MemberStatus          v11.MemberStatus  `protobuf:"varint,8,opt,name=memberStatus,proto3,enum=user.v1.MemberStatus" json:"memberStatus,omitempty"`
	Score                 uint32            `protobuf:"varint,9,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *SearchAdminUserProfile) Reset() {
	*x = SearchAdminUserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_profile_v1_user_profile_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAdminUserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAdminUserProfile) ProtoMessage() {}

func (x *SearchAdminUserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_user_profile_v1_user_profile_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAdminUserProfile.ProtoReflect.Descriptor instead.
func (*SearchAdminUserProfile) Descriptor() ([]byte, []int) {
	return file_user_profile_v1_user_profile_proto_rawDescGZIP(), []int{8}
}

func (x *SearchAdminUserProfile) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SearchAdminUserProfile) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SearchAdminUserProfile) GetProfileImage() *v13.ProfileImage {
	if x != nil {
		return x.ProfileImage
	}
	return nil
}

func (x *SearchAdminUserProfile) GetGender() *v1.Gender {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *SearchAdminUserProfile) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *SearchAdminUserProfile) GetAgeVerificationStatus() v12.ImageStatus {
	if x != nil {
		return x.AgeVerificationStatus
	}
	return v12.ImageStatus(0)
}

func (x *SearchAdminUserProfile) GetUserStatus() v11.UserStatus {
	if x != nil {
		return x.UserStatus
	}
	return v11.UserStatus(0)
}

func (x *SearchAdminUserProfile) GetMemberStatus() v11.MemberStatus {
	if x != nil {
		return x.MemberStatus
	}
	return v11.MemberStatus(0)
}

func (x *SearchAdminUserProfile) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type UpdateAdminUserProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                  string     `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	GenderId                *uint32    `protobuf:"varint,2,opt,name=genderId,proto3,oneof" json:"genderId,omitempty"`
	Nickname                *string    `protobuf:"bytes,3,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"`
	Birthday                *date.Date `protobuf:"bytes,4,opt,name=birthday,proto3,oneof" json:"birthday,omitempty"`
	SelfIntroduction        *string    `protobuf:"bytes,5,opt,name=selfIntroduction,proto3,oneof" json:"selfIntroduction,omitempty"`
	CityId                  *uint32    `protobuf:"varint,6,opt,name=cityId,proto3,oneof" json:"cityId,omitempty"`
	JobId                   *uint32    `protobuf:"varint,7,opt,name=jobId,proto3,oneof" json:"jobId,omitempty"`
	AlcoholId               *uint32    `protobuf:"varint,8,opt,name=alcoholId,proto3,oneof" json:"alcoholId,omitempty"`
	AnnualIncomeId          *uint32    `protobuf:"varint,9,opt,name=annualIncomeId,proto3,oneof" json:"annualIncomeId,omitempty"`
	BloodTypeId             *uint32    `protobuf:"varint,10,opt,name=bloodTypeId,proto3,oneof" json:"bloodTypeId,omitempty"`
	CigaretteId             *uint32    `protobuf:"varint,11,opt,name=cigaretteId,proto3,oneof" json:"cigaretteId,omitempty"`
	DateCostId              *uint32    `protobuf:"varint,12,opt,name=dateCostId,proto3,oneof" json:"dateCostId,omitempty"`
	EducationalBackgroundId *uint32    `protobuf:"varint,13,opt,name=educationalBackgroundId,proto3,oneof" json:"educationalBackgroundId,omitempty"`
	HolidayId               *uint32    `protobuf:"varint,14,opt,name=holidayId,proto3,oneof" json:"holidayId,omitempty"`
	HousemateId             *uint32    `protobuf:"varint,15,opt,name=housemateId,proto3,oneof" json:"housemateId,omitempty"`
	Height                  *uint32    `protobuf:"varint,16,opt,name=height,proto3,oneof" json:"height,omitempty"`
	ShapeId                 *uint32    `protobuf:"varint,17,opt,name=shapeId,proto3,oneof" json:"shapeId,omitempty"`
	PersonalityIds          []uint32   `protobuf:"varint,18,rep,packed,name=personalityIds,proto3" json:"personalityIds,omitempty"`
	Email                   *string    `protobuf:"bytes,19,opt,name=email,proto3,oneof" json:"email,omitempty"`
	HobbyIds                []uint32   `protobuf:"varint,20,rep,packed,name=hobbyIds,proto3" json:"hobbyIds,omitempty"`
}

func (x *UpdateAdminUserProfileRequest) Reset() {
	*x = UpdateAdminUserProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_profile_v1_user_profile_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAdminUserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdminUserProfileRequest) ProtoMessage() {}

func (x *UpdateAdminUserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_profile_v1_user_profile_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdminUserProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdminUserProfileRequest) Descriptor() ([]byte, []int) {
	return file_user_profile_v1_user_profile_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateAdminUserProfileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateAdminUserProfileRequest) GetGenderId() uint32 {
	if x != nil && x.GenderId != nil {
		return *x.GenderId
	}
	return 0
}

func (x *UpdateAdminUserProfileRequest) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *UpdateAdminUserProfileRequest) GetBirthday() *date.Date {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *UpdateAdminUserProfileRequest) GetSelfIntroduction() string {
	if x != nil && x.SelfIntroduction != nil {
		return *x.SelfIntroduction
	}
	return ""
}

func (x *UpdateAdminUserProfileRequest) GetCityId() uint32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *UpdateAdminUserProfileRequest) GetJobId() uint32 {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return 0
}

func (x *UpdateAdminUserProfileRequest) GetAlcoholId() uint32 {
	if x != nil && x.AlcoholId != nil {
		return *x.AlcoholId
	}
	return 0
}

func (x *UpdateAdminUserProfileRequest) GetAnnualIncomeId() uint32 {
	if x != nil && x.AnnualIncomeId != nil {
		return *x.AnnualIncomeId
	}
	return 0
}

func (x *UpdateAdminUserProfileRequest) GetBloodTypeId() uint32 {
	if x != nil && x.BloodTypeId != nil {
		return *x.BloodTypeId
	}
	return 0
}

func (x *UpdateAdminUserProfileRequest) GetCigaretteId() uint32 {
	if x != nil && x.CigaretteId != nil {
		return *x.CigaretteId
	}
	return 0
}

func (x *UpdateAdminUserProfileRequest) GetDateCostId() uint32 {
	if x != nil && x.DateCostId != nil {
		return *x.DateCostId
	}
	return 0
}

func (x *UpdateAdminUserProfileRequest) GetEducationalBackgroundId() uint32 {
	if x != nil && x.EducationalBackgroundId != nil {
		return *x.EducationalBackgroundId
	}
	return 0
}

func (x *UpdateAdminUserProfileRequest) GetHolidayId() uint32 {
	if x != nil && x.HolidayId != nil {
		return *x.HolidayId
	}
	return 0
}

func (x *UpdateAdminUserProfileRequest) GetHousemateId() uint32 {
	if x != nil && x.HousemateId != nil {
		return *x.HousemateId
	}
	return 0
}

func (x *UpdateAdminUserProfileRequest) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *UpdateAdminUserProfileRequest) GetShapeId() uint32 {
	if x != nil && x.ShapeId != nil {
		return *x.ShapeId
	}
	return 0
}

func (x *UpdateAdminUserProfileRequest) GetPersonalityIds() []uint32 {
	if x != nil {
		return x.PersonalityIds
	}
	return nil
}

func (x *UpdateAdminUserProfileRequest) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *UpdateAdminUserProfileRequest) GetHobbyIds() []uint32 {
	if x != nil {
		return x.HobbyIds
	}
	return nil
}

var File_user_profile_v1_user_profile_proto protoreflect.FileDescriptor

var file_user_profile_v1_user_profile_proto_rawDesc = []byte{
	0x0a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcd, 0x08, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65,
	0x6c, 0x66, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x52, 0x07, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c,
	0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x69, 0x67, 0x61, 0x72, 0x65, 0x74, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x67, 0x61, 0x72, 0x65, 0x74, 0x74, 0x65, 0x52, 0x09, 0x63,
	0x69, 0x67, 0x61, 0x72, 0x65, 0x74, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x15, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x15, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x09, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x27, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x69, 0x6e, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x69, 0x6e, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x68, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x07,
	0x68, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x69, 0x6e, 0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xec, 0x09, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x48,
	0x00, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x03, 0x52,
	0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10,
	0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52,
	0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x09, 0x61, 0x6c, 0x63, 0x6f,
	0x68, 0x6f, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x61, 0x6e, 0x6e, 0x75,
	0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x08, 0x52, 0x0e, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x63, 0x69, 0x67, 0x61, 0x72, 0x65, 0x74, 0x74, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x0a, 0x52, 0x0b, 0x63, 0x69, 0x67, 0x61, 0x72, 0x65, 0x74, 0x74, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52, 0x17, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x09, 0x68, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x0e, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x0f, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x73, 0x68, 0x61, 0x70, 0x65, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x10, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x70,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x48, 0x12, 0x52, 0x0c,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x0f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x57, 0x69,
	0x6e, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x0f, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x65, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73,
	0x65, 0x6c, 0x66, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c,
	0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x69, 0x67, 0x61, 0x72, 0x65,
	0x74, 0x74, 0x65, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x49, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x57, 0x69, 0x6e, 0x6b, 0x22, 0x92, 0x0a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x21, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03,
	0x6a, 0x6f, 0x62, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x52, 0x07, 0x61, 0x6c, 0x63, 0x6f, 0x68,
	0x6f, 0x6c, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x6f,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x69, 0x67, 0x61, 0x72, 0x65, 0x74,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x67, 0x61, 0x72, 0x65, 0x74, 0x74, 0x65, 0x52,
	0x09, 0x63, 0x69, 0x67, 0x61, 0x72, 0x65, 0x74, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x15,
	0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x15,
	0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x07, 0x68, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x6d, 0x61, 0x74,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x61, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x68, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x07, 0x68, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x57, 0x69, 0x6e,
	0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x22, 0x34, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xf4, 0x07, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x74, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x65, 0x6c, 0x66, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x03, 0x6a, 0x6f, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62,
	0x12, 0x2d, 0x0a, 0x07, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x52, 0x07, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x12,
	0x3c, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52,
	0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x69, 0x67, 0x61, 0x72, 0x65, 0x74, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x69, 0x67, 0x61, 0x72, 0x65, 0x74, 0x74, 0x65, 0x52, 0x09, 0x63, 0x69,
	0x67, 0x61, 0x72, 0x65, 0x74, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x15, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x15, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x09, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27,
	0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x07,
	0x68, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x62, 0x62, 0x79,
	0x52, 0x07, 0x68, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x22, 0x89, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x1f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xa1, 0x03,
	0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a,
	0x15, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x39, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0xf9, 0x07, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x08, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x48, 0x02, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x73,
	0x65, 0x6c, 0x66, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x04, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x6c,
	0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52,
	0x09, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x0e, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x6c,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x08, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x69, 0x67, 0x61, 0x72, 0x65, 0x74, 0x74, 0x65, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0b, 0x63, 0x69, 0x67, 0x61, 0x72, 0x65,
	0x74, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x17, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b,
	0x52, 0x17, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x0c, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x6d, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x70, 0x65, 0x49, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x0f, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x6c,
	0x66, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x49, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x69, 0x67, 0x61, 0x72, 0x65, 0x74, 0x74,
	0x65, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x32, 0xf5, 0x04,
	0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x77, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x2a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2d,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x30, 0x6b, 0x6e, 0x2f, 0x77, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x75, 0x73, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_user_profile_v1_user_profile_proto_rawDescOnce sync.Once
	file_user_profile_v1_user_profile_proto_rawDescData = file_user_profile_v1_user_profile_proto_rawDesc
)

func file_user_profile_v1_user_profile_proto_rawDescGZIP() []byte {
	file_user_profile_v1_user_profile_proto_rawDescOnce.Do(func() {
		file_user_profile_v1_user_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_profile_v1_user_profile_proto_rawDescData)
	})
	return file_user_profile_v1_user_profile_proto_rawDescData
}

var file_user_profile_v1_user_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_user_profile_v1_user_profile_proto_goTypes = []interface{}{
	(*GetUserProfileRequest)(nil),           // 0: userprofile.v1.GetUserProfileRequest
	(*GetUserProfileResponse)(nil),          // 1: userprofile.v1.GetUserProfileResponse
	(*UpdateUserProfileRequest)(nil),        // 2: userprofile.v1.UpdateUserProfileRequest
	(*GetOwnUserProfileResponse)(nil),       // 3: userprofile.v1.GetOwnUserProfileResponse
	(*GetAdminUserProfileRequest)(nil),      // 4: userprofile.v1.GetAdminUserProfileRequest
	(*GetAdminUserProfileResponse)(nil),     // 5: userprofile.v1.GetAdminUserProfileResponse
	(*SearchAdminUserProfilesRequest)(nil),  // 6: userprofile.v1.SearchAdminUserProfilesRequest
	(*SearchAdminUserProfilesResponse)(nil), // 7: userprofile.v1.SearchAdminUserProfilesResponse
	(*SearchAdminUserProfile)(nil),          // 8: userprofile.v1.SearchAdminUserProfile
	(*UpdateAdminUserProfileRequest)(nil),   // 9: userprofile.v1.UpdateAdminUserProfileRequest
	(*v1.Gender)(nil),                       // 10: profile.v1.Gender
	(*v1.Job)(nil),                          // 11: profile.v1.Job
	(*v1.Alcohol)(nil),                      // 12: profile.v1.Alcohol
	(*v1.AnnualIncome)(nil),                 // 13: profile.v1.AnnualIncome
	(*v1.BloodType)(nil),                    // 14: profile.v1.BloodType
	(*v1.Cigarette)(nil),                    // 15: profile.v1.Cigarette
	(*v1.DateCost)(nil),                     // 16: profile.v1.DateCost
	(*v1.EducationalBackground)(nil),        // 17: profile.v1.EducationalBackground
	(*v1.Holiday)(nil),                      // 18: profile.v1.Holiday
	(*v1.Housemate)(nil),                    // 19: profile.v1.Housemate
	(*v1.Shape)(nil),                        // 20: profile.v1.Shape
	(*v1.Personality)(nil),                  // 21: profile.v1.Personality
	(*timestamppb.Timestamp)(nil),           // 22: google.protobuf.Timestamp
	(*v1.Hobby)(nil),                        // 23: profile.v1.Hobby
	(*v1.PlanWithMatching)(nil),             // 24: profile.v1.PlanWithMatching
	(v11.RegistrationStep)(0),               // 25: user.v1.RegistrationStep
	(*date.Date)(nil),                       // 26: google.type.Date
	(*v1.Prefecture)(nil),                   // 27: profile.v1.Prefecture
	(*v1.City)(nil),                         // 28: profile.v1.City
	(*v1.Plan)(nil),                         // 29: profile.v1.Plan
	(*v12.Paging)(nil),                      // 30: common.v1.Paging
	(*v13.ProfileImage)(nil),                // 31: profileimage.v1.ProfileImage
	(v12.ImageStatus)(0),                    // 32: common.v1.ImageStatus
	(v11.UserStatus)(0),                     // 33: user.v1.UserStatus
	(v11.MemberStatus)(0),                   // 34: user.v1.MemberStatus
	(*emptypb.Empty)(nil),                   // 35: google.protobuf.Empty
}
var file_user_profile_v1_user_profile_proto_depIdxs = []int32{
	10, // 0: userprofile.v1.GetUserProfileResponse.gender:type_name -> profile.v1.Gender
	11, // 1: userprofile.v1.GetUserProfileResponse.job:type_name -> profile.v1.Job
	12, // 2: userprofile.v1.GetUserProfileResponse.alcohol:type_name -> profile.v1.Alcohol
	13, // 3: userprofile.v1.GetUserProfileResponse.annualIncome:type_name -> profile.v1.AnnualIncome
	14, // 4: userprofile.v1.GetUserProfileResponse.bloodType:type_name -> profile.v1.BloodType
	15, // 5: userprofile.v1.GetUserProfileResponse.cigarette:type_name -> profile.v1.Cigarette
	16, // 6: userprofile.v1.GetUserProfileResponse.dateCost:type_name -> profile.v1.DateCost
	17, // 7: userprofile.v1.GetUserProfileResponse.educationalBackground:type_name -> profile.v1.EducationalBackground
	18, // 8: userprofile.v1.GetUserProfileResponse.holiday:type_name -> profile.v1.Holiday
	19, // 9: userprofile.v1.GetUserProfileResponse.housemate:type_name -> profile.v1.Housemate
	20, // 10: userprofile.v1.GetUserProfileResponse.shape:type_name -> profile.v1.Shape
	21, // 11: userprofile.v1.GetUserProfileResponse.personalities:type_name -> profile.v1.Personality
	22, // 12: userprofile.v1.GetUserProfileResponse.loggedinAt:type_name -> google.protobuf.Timestamp
	23, // 13: userprofile.v1.GetUserProfileResponse.hobbies:type_name -> profile.v1.Hobby
	24, // 14: userprofile.v1.GetUserProfileResponse.plans:type_name -> profile.v1.PlanWithMatching
	25, // 15: userprofile.v1.UpdateUserProfileRequest.registrationStep:type_name -> user.v1.RegistrationStep
	26, // 16: userprofile.v1.UpdateUserProfileRequest.birthday:type_name -> google.type.Date
	10, // 17: userprofile.v1.GetOwnUserProfileResponse.gender:type_name -> profile.v1.Gender
	26, // 18: userprofile.v1.GetOwnUserProfileResponse.birthday:type_name -> google.type.Date
	27, // 19: userprofile.v1.GetOwnUserProfileResponse.prefecture:type_name -> profile.v1.Prefecture
	28, // 20: userprofile.v1.GetOwnUserProfileResponse.city:type_name -> profile.v1.City
	11, // 21: userprofile.v1.GetOwnUserProfileResponse.job:type_name -> profile.v1.Job
	12, // 22: userprofile.v1.GetOwnUserProfileResponse.alcohol:type_name -> profile.v1.Alcohol
	13, // 23: userprofile.v1.GetOwnUserProfileResponse.annualIncome:type_name -> profile.v1.AnnualIncome
	14, // 24: userprofile.v1.GetOwnUserProfileResponse.bloodType:type_name -> profile.v1.BloodType
	15, // 25: userprofile.v1.GetOwnUserProfileResponse.cigarette:type_name -> profile.v1.Cigarette
	16, // 26: userprofile.v1.GetOwnUserProfileResponse.dateCost:type_name -> profile.v1.DateCost
	17, // 27: userprofile.v1.GetOwnUserProfileResponse.educationalBackground:type_name -> profile.v1.EducationalBackground
	18, // 28: userprofile.v1.GetOwnUserProfileResponse.holiday:type_name -> profile.v1.Holiday
	19, // 29: userprofile.v1.GetOwnUserProfileResponse.housemate:type_name -> profile.v1.Housemate
	20, // 30: userprofile.v1.GetOwnUserProfileResponse.shape:type_name -> profile.v1.Shape
	21, // 31: userprofile.v1.GetOwnUserProfileResponse.personalities:type_name -> profile.v1.Personality
	23, // 32: userprofile.v1.GetOwnUserProfileResponse.hobbies:type_name -> profile.v1.Hobby
	29, // 33: userprofile.v1.GetOwnUserProfileResponse.plans:type_name -> profile.v1.Plan
	10, // 34: userprofile.v1.GetAdminUserProfileResponse.gender:type_name -> profile.v1.Gender
	26, // 35: userprofile.v1.GetAdminUserProfileResponse.birthday:type_name -> google.type.Date
	27, // 36: userprofile.v1.GetAdminUserProfileResponse.prefecture:type_name -> profile.v1.Prefecture
	28, // 37: userprofile.v1.GetAdminUserProfileResponse.city:type_name -> profile.v1.City
	11, // 38: userprofile.v1.GetAdminUserProfileResponse.job:type_name -> profile.v1.Job
	12, // 39: userprofile.v1.GetAdminUserProfileResponse.alcohol:type_name -> profile.v1.Alcohol
	13, // 40: userprofile.v1.GetAdminUserProfileResponse.annualIncome:type_name -> profile.v1.AnnualIncome
	14, // 41: userprofile.v1.GetAdminUserProfileResponse.bloodType:type_name -> profile.v1.BloodType
	15, // 42: userprofile.v1.GetAdminUserProfileResponse.cigarette:type_name -> profile.v1.Cigarette
	16, // 43: userprofile.v1.GetAdminUserProfileResponse.dateCost:type_name -> profile.v1.DateCost
	17, // 44: userprofile.v1.GetAdminUserProfileResponse.educationalBackground:type_name -> profile.v1.EducationalBackground
	18, // 45: userprofile.v1.GetAdminUserProfileResponse.holiday:type_name -> profile.v1.Holiday
	19, // 46: userprofile.v1.GetAdminUserProfileResponse.housemate:type_name -> profile.v1.Housemate
	20, // 47: userprofile.v1.GetAdminUserProfileResponse.shape:type_name -> profile.v1.Shape
	21, // 48: userprofile.v1.GetAdminUserProfileResponse.personalities:type_name -> profile.v1.Personality
	23, // 49: userprofile.v1.GetAdminUserProfileResponse.hobbies:type_name -> profile.v1.Hobby
	8,  // 50: userprofile.v1.SearchAdminUserProfilesResponse.data:type_name -> userprofile.v1.SearchAdminUserProfile
	30, // 51: userprofile.v1.SearchAdminUserProfilesResponse.paging:type_name -> common.v1.Paging
	31, // 52: userprofile.v1.SearchAdminUserProfile.profileImage:type_name -> profileimage.v1.ProfileImage
	10, // 53: userprofile.v1.SearchAdminUserProfile.gender:type_name -> profile.v1.Gender
	32, // 54: userprofile.v1.SearchAdminUserProfile.ageVerificationStatus:type_name -> common.v1.ImageStatus
	33, // 55: userprofile.v1.SearchAdminUserProfile.userStatus:type_name -> user.v1.UserStatus
	34, // 56: userprofile.v1.SearchAdminUserProfile.memberStatus:type_name -> user.v1.MemberStatus
	26, // 57: userprofile.v1.UpdateAdminUserProfileRequest.birthday:type_name -> google.type.Date
	0,  // 58: userprofile.v1.UserProfileService.GetUserProfile:input_type -> userprofile.v1.GetUserProfileRequest
	2,  // 59: userprofile.v1.UserProfileService.UpdateUserProfile:input_type -> userprofile.v1.UpdateUserProfileRequest
	35, // 60: userprofile.v1.UserProfileService.GetOwnUserProfile:input_type -> google.protobuf.Empty
	4,  // 61: userprofile.v1.UserProfileService.GetAdminUserProfile:input_type -> userprofile.v1.GetAdminUserProfileRequest
	6,  // 62: userprofile.v1.UserProfileService.SearchAdminUserProfiles:input_type -> userprofile.v1.SearchAdminUserProfilesRequest
	9,  // 63: userprofile.v1.UserProfileService.UpdateAdminUserProfile:input_type -> userprofile.v1.UpdateAdminUserProfileRequest
	1,  // 64: userprofile.v1.UserProfileService.GetUserProfile:output_type -> userprofile.v1.GetUserProfileResponse
	35, // 65: userprofile.v1.UserProfileService.UpdateUserProfile:output_type -> google.protobuf.Empty
	3,  // 66: userprofile.v1.UserProfileService.GetOwnUserProfile:output_type -> userprofile.v1.GetOwnUserProfileResponse
	5,  // 67: userprofile.v1.UserProfileService.GetAdminUserProfile:output_type -> userprofile.v1.GetAdminUserProfileResponse
	7,  // 68: userprofile.v1.UserProfileService.SearchAdminUserProfiles:output_type -> userprofile.v1.SearchAdminUserProfilesResponse
	35, // 69: userprofile.v1.UserProfileService.UpdateAdminUserProfile:output_type -> google.protobuf.Empty
	64, // [64:70] is the sub-list for method output_type
	58, // [58:64] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_user_profile_v1_user_profile_proto_init() }
func file_user_profile_v1_user_profile_proto_init() {
	if File_user_profile_v1_user_profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_profile_v1_user_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_profile_v1_user_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_profile_v1_user_profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_profile_v1_user_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOwnUserProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_profile_v1_user_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminUserProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_profile_v1_user_profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminUserProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_profile_v1_user_profile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAdminUserProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_profile_v1_user_profile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAdminUserProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_profile_v1_user_profile_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAdminUserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_profile_v1_user_profile_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAdminUserProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_user_profile_v1_user_profile_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_user_profile_v1_user_profile_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_user_profile_v1_user_profile_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_user_profile_v1_user_profile_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_user_profile_v1_user_profile_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_user_profile_v1_user_profile_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_profile_v1_user_profile_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_profile_v1_user_profile_proto_goTypes,
		DependencyIndexes: file_user_profile_v1_user_profile_proto_depIdxs,
		MessageInfos:      file_user_profile_v1_user_profile_proto_msgTypes,
	}.Build()
	File_user_profile_v1_user_profile_proto = out.File
	file_user_profile_v1_user_profile_proto_rawDesc = nil
	file_user_profile_v1_user_profile_proto_goTypes = nil
	file_user_profile_v1_user_profile_proto_depIdxs = nil
}
